{"file_contents":{"app.py":{"content":"from flask import Flask, render_template, request, redirect, url_for, session, jsonify, flash\nfrom werkzeug.utils import secure_filename\nimport os\nimport uuid\nfrom datetime import datetime, timedelta\nfrom typing import Dict, List, Optional\nimport json\n\nfrom models import User, Schedule, UserStatus, StatusType, DayType\nfrom services import ScheduleService, StatusService, RecommendationService, ICSParser\n\napp = Flask(__name__)\napp.secret_key = os.environ.get('SESSION_SECRET', 'your-secret-key-here')\napp.config['UPLOAD_FOLDER'] = 'uploads'\napp.config['MAX_CONTENT_LENGTH'] = 5 * 1024 * 1024  # 5MB max file size\n\n# Create upload folder if it doesn't exist\nos.makedirs(app.config['UPLOAD_FOLDER'], exist_ok=True)\n\n# Initialize services\nschedule_service = ScheduleService()\nstatus_service = StatusService()\nrecommendation_service = RecommendationService()\nics_parser = ICSParser()\n\n# Template filters\n@app.template_filter('format_time')\ndef format_time_filter(time_str):\n    \"\"\"Format HH:MM to 12-hour format\"\"\"\n    if not time_str:\n        return ''\n    try:\n        hour, minute = map(int, time_str.split(':'))\n        ampm = 'AM' if hour < 12 else 'PM'\n        display_hour = hour if hour <= 12 else hour - 12\n        if display_hour == 0:\n            display_hour = 12\n        return f\"{display_hour}:{minute:02d} {ampm}\"\n    except:\n        return time_str\n\n@app.route('/')\ndef dashboard():\n    if 'user_id' not in session:\n        return redirect(url_for('login'))\n    \n    user = schedule_service.get_user(session['user_id'])\n    if not user:\n        return redirect(url_for('login'))\n    \n    # Get current status data\n    status_data = status_service.get_current_status()\n    \n    # Get user's current status\n    user_status = status_service.get_user_status(user.id)\n    \n    return render_template('dashboard.html', \n                         user=user, \n                         status_data=status_data, \n                         user_status=user_status)\n\n@app.route('/login', methods=['GET', 'POST'])\ndef login():\n    if request.method == 'POST':\n        username = request.form.get('username', '').strip()\n        major = request.form.get('major', '').strip()\n        \n        if not username or not major:\n            flash('Please fill in all fields', 'error')\n            return render_template('login.html')\n        \n        # Create or get user\n        user = schedule_service.create_or_get_user(username, major)\n        session['user_id'] = user.id\n        \n        flash(f'Welcome, {username}!', 'success')\n        return redirect(url_for('dashboard'))\n    \n    return render_template('login.html')\n\n@app.route('/logout')\ndef logout():\n    session.clear()\n    flash('Logged out successfully', 'info')\n    return redirect(url_for('login'))\n\n@app.route('/status', methods=['GET', 'POST'])\ndef status():\n    if 'user_id' not in session:\n        return jsonify({'error': 'Not logged in'}), 401\n    \n    if request.method == 'POST':\n        new_status = None\n        if request.form:\n            new_status = request.form.get('status')\n        elif request.json:\n            new_status = request.json.get('status')\n        \n        if new_status not in [s.value for s in StatusType]:\n            return jsonify({'error': 'Invalid status'}), 400\n        \n        status_service.update_user_status(session['user_id'], StatusType(new_status))\n        \n        if request.is_json:\n            return jsonify({'success': True, 'status': new_status})\n        else:\n            flash('Status updated!', 'success')\n            return redirect(url_for('dashboard'))\n    \n    # GET request - return current status\n    user_status = status_service.get_user_status(session['user_id'])\n    return jsonify({'status': user_status.value if user_status else 'free'})\n\n@app.route('/schedule')\ndef schedule_page():\n    if 'user_id' not in session:\n        return redirect(url_for('login'))\n    \n    user = schedule_service.get_user(session['user_id'])\n    schedules = schedule_service.get_user_schedules(session['user_id'])\n    \n    return render_template('schedule.html', user=user, schedules=schedules)\n\n@app.route('/schedule', methods=['POST'])\ndef add_schedule():\n    if 'user_id' not in session:\n        return jsonify({'error': 'Not logged in'}), 401\n    \n    data = request.form.to_dict() if request.form else request.get_json()\n    if not data:\n        return jsonify({'error': 'No data provided'}), 400\n    \n    try:\n        schedule = Schedule(\n            id=str(uuid.uuid4()),\n            user_id=session['user_id'],\n            course_code=data['course_code'],\n            course_name=data['course_name'],\n            day=DayType(data['day']),\n            start_time=data['start_time'],\n            end_time=data['end_time'],\n            location=data.get('location', '')\n        )\n        \n        schedule_service.add_schedule(schedule)\n        \n        if request.is_json:\n            return jsonify({'success': True, 'schedule': schedule.to_dict()})\n        else:\n            flash('Course added successfully!', 'success')\n            return redirect(url_for('schedule_page'))\n            \n    except Exception as e:\n        if request.is_json:\n            return jsonify({'error': str(e)}), 400\n        else:\n            flash(f'Error adding course: {str(e)}', 'error')\n            return redirect(url_for('schedule_page'))\n\n@app.route('/schedule/<schedule_id>', methods=['DELETE'])\ndef remove_schedule(schedule_id):\n    if 'user_id' not in session:\n        return jsonify({'error': 'Not logged in'}), 401\n    \n    try:\n        schedule_service.remove_schedule(schedule_id, session['user_id'])\n        return jsonify({'success': True})\n    except Exception as e:\n        return jsonify({'error': str(e)}), 400\n\n@app.route('/upload-ics', methods=['POST'])\ndef upload_ics():\n    if 'user_id' not in session:\n        return jsonify({'error': 'Not logged in'}), 401\n    \n    if 'ics_file' not in request.files:\n        flash('No file uploaded', 'error')\n        return redirect(url_for('schedule_page'))\n    \n    file = request.files['ics_file']\n    \n    if file.filename == '':\n        flash('No file selected', 'error')\n        return redirect(url_for('schedule_page'))\n    \n    if not file.filename or not file.filename.lower().endswith('.ics'):\n        flash('Please upload a .ics file', 'error')\n        return redirect(url_for('schedule_page'))\n    \n    try:\n        # Parse ICS file\n        schedules = ics_parser.parse_ics_file(file, session['user_id'])\n        \n        # Add schedules to database\n        for schedule in schedules:\n            schedule_service.add_schedule(schedule)\n        \n        flash(f'Successfully imported {len(schedules)} courses from calendar!', 'success')\n        \n    except Exception as e:\n        flash(f'Error parsing calendar file: {str(e)}', 'error')\n    \n    return redirect(url_for('schedule_page'))\n\n@app.route('/partners')\ndef partners():\n    if 'user_id' not in session:\n        return redirect(url_for('login'))\n    \n    user = schedule_service.get_user(session['user_id'])\n    recommendations = recommendation_service.get_recommendations(session['user_id'])\n    \n    return render_template('partners.html', user=user, recommendations=recommendations)\n\n@app.route('/api/status-board')\ndef api_status_board():\n    \"\"\"API endpoint for status board updates\"\"\"\n    status_data = status_service.get_current_status()\n    return jsonify(status_data.to_dict())\n\n@app.route('/api/recommendations')\ndef api_recommendations():\n    \"\"\"API endpoint for study partner recommendations\"\"\"\n    if 'user_id' not in session:\n        return jsonify({'error': 'Not logged in'}), 401\n    \n    recommendations = recommendation_service.get_recommendations(session['user_id'])\n    return jsonify([rec.to_dict() for rec in recommendations])\n\nif __name__ == '__main__':\n    app.run(host='0.0.0.0', port=5000, debug=True)","size_bytes":7853},"design_guidelines.md":{"content":"# Design Guidelines for Campus Study Partner Matching H5 Website\n\n## Design Approach\n**Reference-Based Approach**: Drawing inspiration from modern productivity and social apps like Linear, Notion, and Discord for their clean interfaces and real-time collaboration features.\n\n## Core Design Elements\n\n### Color Palette\n**Light Mode:**\n- Primary: 250 100% 65% (vibrant blue)\n- Secondary: 220 15% 25% (dark gray)\n- Background: 0 0% 98% (off-white)\n- Surface: 0 0% 100% (white)\n\n**Dark Mode:**\n- Primary: 250 80% 70% (softer blue)\n- Secondary: 220 20% 75% (light gray)\n- Background: 220 25% 8% (dark blue-gray)\n- Surface: 220 20% 12% (elevated dark)\n\n### Typography\n- **Primary Font**: Inter (Google Fonts)\n- **Headers**: 600-700 weight\n- **Body**: 400-500 weight\n- **Accent**: 500 weight for buttons and highlights\n\n### Layout System\n**Spacing Units**: Tailwind 2, 4, 6, 8, 12, 16\n- Consistent 4-unit (1rem) rhythm\n- 2-unit for tight spacing\n- 8-16 for section separation\n\n### Component Library\n\n**Navigation**\n- Fixed top navigation with app logo and user avatar\n- Tab-based navigation for main sections\n- Breadcrumb for deeper pages\n\n**Status Components**\n- Circular status indicators with colors:\n  - Studying: 120 70% 50% (green)\n  - Free: 200 90% 60% (light blue)\n  - Help: 30 100% 60% (orange)\n  - Busy: 0 80% 60% (red)\n  - Tired: 280 60% 65% (purple)\n  - Social: 320 70% 55% (pink)\n\n**Cards & Recommendations**\n- Clean white/dark cards with subtle shadows\n- Profile cards showing: avatar, name, major, common courses\n- Match reason badges with soft background colors\n\n**Forms**\n- Modern input fields with floating labels\n- Schedule grid with time slots and drag-drop capability\n- Toggle switches for status updates\n\n**Real-time Elements**\n- Subtle pulse animations for live status\n- Loading skeletons during 30-second polling\n- Toast notifications for status changes\n\n### Mobile-First Design\n- Single-column layout on mobile\n- Bottom tab navigation\n- Swipeable cards for recommendations\n- Large touch targets (44px minimum)\n\n### Visual Hierarchy\n- Bold typography for names and course titles\n- Subtle text for metadata (time, location)\n- Color-coded status throughout interface\n- Generous whitespace for readability\n\n### Interactive Elements\n- Smooth transitions (200-300ms)\n- Hover states with subtle color shifts\n- Active states with slight scale transforms\n- Disabled states with reduced opacity\n\nThis design creates a modern, campus-friendly interface that prioritizes clarity and real-time collaboration while maintaining the energy of student life through thoughtful color choices and clean typography.","size_bytes":2612},"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"models.py":{"content":"from dataclasses import dataclass, asdict\nfrom datetime import datetime\nfrom enum import Enum\nfrom typing import Optional, List\n\nclass StatusType(Enum):\n    STUDYING = \"studying\"\n    FREE = \"free\"\n    HELP = \"help\"\n    BUSY = \"busy\"\n    TIRED = \"tired\"\n    SOCIAL = \"social\"\n\nclass DayType(Enum):\n    MONDAY = \"monday\"\n    TUESDAY = \"tuesday\"\n    WEDNESDAY = \"wednesday\"\n    THURSDAY = \"thursday\"\n    FRIDAY = \"friday\"\n    SATURDAY = \"saturday\"\n    SUNDAY = \"sunday\"\n\n@dataclass\nclass User:\n    id: str\n    username: str\n    major: str\n    avatar: Optional[str] = None\n    \n    def to_dict(self):\n        return asdict(self)\n\n@dataclass\nclass Schedule:\n    id: str\n    user_id: str\n    course_code: str\n    course_name: str\n    day: DayType\n    start_time: str  # HH:MM format\n    end_time: str    # HH:MM format\n    location: Optional[str] = None\n    \n    def to_dict(self):\n        result = asdict(self)\n        result['day'] = self.day.value\n        return result\n\n@dataclass\nclass UserStatus:\n    id: str\n    user_id: str\n    manual_status: StatusType\n    last_updated: datetime\n    \n    def to_dict(self):\n        result = asdict(self)\n        result['manual_status'] = self.manual_status.value\n        result['last_updated'] = self.last_updated.isoformat()\n        return result\n\n@dataclass\nclass StudyPartner:\n    id: str\n    username: str\n    major: str\n    avatar: Optional[str]\n    score: int\n    shared_classes: List[str]\n    current_class: Optional[str]\n    next_class: Optional[str]\n    reason: str\n    \n    def to_dict(self):\n        return asdict(self)\n\n@dataclass\nclass StatusBoardUser:\n    id: str\n    username: str\n    major: str\n    avatar: Optional[str]\n    manual_status: str\n    current_class: Optional[str] = None\n    next_class: Optional[str] = None\n    \n    def to_dict(self):\n        return asdict(self)\n\n@dataclass\nclass CurrentStatusResponse:\n    now: str\n    in_class: List[StatusBoardUser]\n    free: List[StatusBoardUser]\n    \n    def to_dict(self):\n        return {\n            'now': self.now,\n            'in_class': [user.to_dict() for user in self.in_class],\n            'free': [user.to_dict() for user in self.free]\n        }","size_bytes":2162},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"pyproject.toml":{"content":"[project]\nname = \"repl-nix-workspace\"\nversion = \"0.1.0\"\ndescription = \"Add your description here\"\nrequires-python = \">=3.11\"\ndependencies = [\n    \"flask>=3.1.2\",\n    \"icalendar>=6.3.1\",\n    \"python-dateutil>=2.9.0.post0\",\n]\n","size_bytes":224},"replit.md":{"content":"# Campus Study Partner Matching System\n\n## Overview\n\nA campus study partner matching platform that connects students based on shared classes and real-time status. The application allows students to upload their course schedules, set their current study status, and find suitable study partners through intelligent recommendations. Built with a hybrid architecture featuring Flask backend services and React frontend components, the system enables real-time collaboration and schedule-based matching.\n\n## Recent Changes\n\n### Two-Way Friend Approval System (September 2025)\n- **Enhanced Friend Request Workflow**: Implemented two-way friend approval system replacing immediate friend confirmation\n- **Pending Request Management**: Friend requests now create pending status requiring recipient acceptance\n- **Notifications Page**: Added comprehensive notifications page at `/notifications` route displaying pending friend requests\n- **Interactive Request Actions**: Users can accept or reject friend requests with immediate UI feedback\n- **Notification Badge**: Header now includes Bell icon with red badge showing count of pending requests\n- **API Security**: Added authorization checks ensuring only recipients can accept/reject their own friend requests\n- **Database Schema Updates**: Modified friend status to default to \"pending\" instead of \"confirmed\"\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n## System Architecture\n\n### Frontend Architecture\n- **React-based SPA**: Built with TypeScript, React Router (Wouter), and TanStack Query for state management\n- **Component Library**: Radix UI primitives with shadcn/ui design system for consistent UI components\n- **Styling**: Tailwind CSS with custom design tokens and theme support (light/dark mode)\n- **Build System**: Vite for fast development and optimized production builds\n\n### Backend Architecture\n- **Hybrid Service Layer**: Flask-based Python services for core business logic alongside Express.js/TypeScript API routes\n- **Service-Oriented Design**: Separate services for schedule management, status tracking, recommendations, and ICS file parsing\n- **Data Models**: Strongly-typed models using Pydantic-style dataclasses and Zod schemas for validation\n- **Session Management**: Flask sessions for user authentication and state persistence\n\n### Data Storage Solutions\n- **Database**: PostgreSQL with Drizzle ORM for type-safe database operations\n- **Schema Design**: Normalized tables for users, schedules, and user status with proper foreign key relationships\n- **In-Memory Storage**: Fallback memory storage implementation for development and testing\n\n### Authentication and Authorization\n- **Session-Based Auth**: Flask session management with secure session keys\n- **User Management**: Simple username/major-based registration without complex authentication flows\n- **Authorization**: User-scoped data access with service-layer permission checks\n\n### Status Management System\n- **Real-Time Status**: Six status types (studying, free, help, busy, tired, social) with timestamp tracking\n- **Schedule Integration**: Automatic status inference based on current class schedules\n- **Manual Override**: User-controlled status updates that override schedule-based status\n\n### Recommendation Engine\n- **Class-Based Matching**: Algorithm that finds study partners based on shared courses\n- **Status Compatibility**: Filters recommendations based on complementary status types (e.g., \"help\" with \"studying\")\n- **Scoring System**: Weighted scoring considering shared classes, status compatibility, and availability\n\n### Schedule Management\n- **ICS Import**: Parser for standard calendar files from Google Calendar, Outlook, and other calendar applications\n- **Manual Entry**: Form-based schedule creation with course codes, names, times, and locations\n- **Time Conflict Detection**: Validation to prevent overlapping schedule entries\n\n## External Dependencies\n\n### UI and Component Libraries\n- **Radix UI**: Comprehensive set of accessible UI primitives for complex components\n- **shadcn/ui**: Pre-built component library built on Radix UI with consistent design patterns\n- **Lucide React**: Icon library for consistent iconography across the application\n\n### Development and Build Tools\n- **Vite**: Fast build tool with hot module replacement for development\n- **TypeScript**: Type safety across both frontend and backend codebases\n- **Tailwind CSS**: Utility-first CSS framework with custom design system integration\n\n### Database and ORM\n- **Neon Database**: Serverless PostgreSQL provider for scalable data storage\n- **Drizzle ORM**: Type-safe database toolkit with schema generation and migration support\n- **connect-pg-simple**: PostgreSQL session store for Flask session management\n\n### Form and Validation\n- **React Hook Form**: Performant form library with built-in validation\n- **Zod**: Schema validation library used across frontend and backend for type safety\n- **@hookform/resolvers**: Integration between React Hook Form and Zod validation\n\n### State Management and Data Fetching\n- **TanStack Query**: Powerful data synchronization library for server state management\n- **React Context**: Local state management for user preferences and theme settings\n\n### Calendar and File Processing\n- **ICS Parser**: Custom service for processing calendar file uploads and extracting schedule data\n- **File Upload**: Secure file handling with size limits and type validation\n\n### Styling and Theming\n- **CSS Variables**: Dynamic theming system supporting light and dark modes\n- **Class Variance Authority**: Utility for creating consistent component variants\n- **Tailwind Merge**: Intelligent CSS class merging for component composition","size_bytes":5725},"services.py":{"content":"import uuid\nfrom datetime import datetime, timedelta\nfrom typing import Dict, List, Optional\nfrom collections import defaultdict\nimport re\n\nfrom models import (\n    User, Schedule, UserStatus, StudyPartner, StatusType, DayType,\n    CurrentStatusResponse, StatusBoardUser\n)\n\nclass ScheduleService:\n    def __init__(self):\n        self.users: Dict[str, User] = {}\n        self.schedules: Dict[str, Schedule] = {}\n        self.user_schedules: Dict[str, List[str]] = defaultdict(list)\n    \n    def create_or_get_user(self, username: str, major: str) -> User:\n        # Check if user already exists\n        for user in self.users.values():\n            if user.username == username and user.major == major:\n                return user\n        \n        # Create new user\n        user = User(\n            id=str(uuid.uuid4()),\n            username=username,\n            major=major\n        )\n        self.users[user.id] = user\n        return user\n    \n    def get_user(self, user_id: str) -> Optional[User]:\n        return self.users.get(user_id)\n    \n    def add_schedule(self, schedule: Schedule):\n        self.schedules[schedule.id] = schedule\n        self.user_schedules[schedule.user_id].append(schedule.id)\n    \n    def remove_schedule(self, schedule_id: str, user_id: str):\n        if schedule_id in self.schedules:\n            schedule = self.schedules[schedule_id]\n            if schedule.user_id == user_id:\n                del self.schedules[schedule_id]\n                self.user_schedules[user_id] = [\n                    sid for sid in self.user_schedules[user_id] \n                    if sid != schedule_id\n                ]\n            else:\n                raise ValueError(\"Not authorized to remove this schedule\")\n        else:\n            raise ValueError(\"Schedule not found\")\n    \n    def get_user_schedules(self, user_id: str) -> List[Schedule]:\n        schedule_ids = self.user_schedules.get(user_id, [])\n        return [self.schedules[sid] for sid in schedule_ids if sid in self.schedules]\n    \n    def get_all_schedules(self) -> List[Schedule]:\n        return list(self.schedules.values())\n\nclass StatusService:\n    def __init__(self):\n        self.user_statuses: Dict[str, UserStatus] = {}\n    \n    def update_user_status(self, user_id: str, status: StatusType):\n        status_obj = UserStatus(\n            id=str(uuid.uuid4()),\n            user_id=user_id,\n            manual_status=status,\n            last_updated=datetime.now()\n        )\n        self.user_statuses[user_id] = status_obj\n    \n    def get_user_status(self, user_id: str) -> Optional[StatusType]:\n        status = self.user_statuses.get(user_id)\n        return status.manual_status if status else StatusType.FREE\n    \n    def get_current_status(self) -> CurrentStatusResponse:\n        from app import schedule_service  # Avoid circular import\n        \n        now = datetime.now()\n        current_day = DayType(now.strftime('%A').lower())\n        current_time = now.strftime('%H:%M')\n        \n        in_class = []\n        free = []\n        \n        # Get all users and their schedules\n        for user_id, user in schedule_service.users.items():\n            user_status = self.get_user_status(user_id)\n            schedules = schedule_service.get_user_schedules(user_id)\n            \n            # Check if user is currently in class\n            current_class = None\n            next_class = None\n            \n            for schedule in schedules:\n                if schedule.day == current_day:\n                    if schedule.start_time <= current_time <= schedule.end_time:\n                        current_class = f\"{schedule.course_code}\"\n                        break\n            \n            # Find next class today\n            today_schedules = [s for s in schedules if s.day == current_day]\n            future_schedules = [s for s in today_schedules if s.start_time > current_time]\n            if future_schedules:\n                next_schedule = min(future_schedules, key=lambda x: x.start_time)\n                next_class = f\"{next_schedule.course_code} @ {self._format_time(next_schedule.start_time)}\"\n            \n            status_user = StatusBoardUser(\n                id=user.id,\n                username=user.username,\n                major=user.major,\n                avatar=user.avatar,\n                manual_status=user_status.value if user_status else StatusType.FREE.value,\n                current_class=current_class,\n                next_class=next_class\n            )\n            \n            if current_class:\n                in_class.append(status_user)\n            else:\n                free.append(status_user)\n        \n        return CurrentStatusResponse(\n            now=now.isoformat(),\n            in_class=in_class,\n            free=free\n        )\n    \n    def _format_time(self, time_str: str) -> str:\n        \"\"\"Format HH:MM to 12-hour format\"\"\"\n        hour, minute = map(int, time_str.split(':'))\n        ampm = 'AM' if hour < 12 else 'PM'\n        display_hour = hour if hour <= 12 else hour - 12\n        if display_hour == 0:\n            display_hour = 12\n        return f\"{display_hour}:{minute:02d} {ampm}\"\n\nclass RecommendationService:\n    def __init__(self):\n        pass\n    \n    def get_recommendations(self, user_id: str) -> List[StudyPartner]:\n        from app import schedule_service, status_service  # Avoid circular import\n        \n        user = schedule_service.get_user(user_id)\n        if not user:\n            return []\n        \n        user_schedules = schedule_service.get_user_schedules(user_id)\n        user_courses = set(s.course_code for s in user_schedules)\n        \n        recommendations = []\n        \n        # Find potential study partners\n        for other_user_id, other_user in schedule_service.users.items():\n            if other_user_id == user_id:\n                continue\n            \n            other_schedules = schedule_service.get_user_schedules(other_user_id)\n            other_courses = set(s.course_code for s in other_schedules)\n            \n            shared_classes = list(user_courses.intersection(other_courses))\n            \n            if not shared_classes:\n                continue\n            \n            # Calculate compatibility score\n            score = len(shared_classes) * 20  # Base score for shared classes\n            \n            # Same major bonus\n            if user.major == other_user.major:\n                score += 15\n            \n            # Status compatibility bonus\n            other_status = status_service.get_user_status(other_user_id)\n            if other_status in [StatusType.STUDYING, StatusType.HELP, StatusType.FREE]:\n                score += 10\n            \n            # Generate reason\n            reason = f\"Shares {len(shared_classes)} class{'es' if len(shared_classes) > 1 else ''} with you\"\n            if user.major == other_user.major:\n                reason += f\"; Same major ({user.major})\"\n            if other_status == StatusType.HELP:\n                reason += \"; Available to help\"\n            elif other_status == StatusType.STUDYING:\n                reason += \"; Currently studying\"\n            \n            # Find current/next class for other user\n            now = datetime.now()\n            current_day = DayType(now.strftime('%A').lower())\n            current_time = now.strftime('%H:%M')\n            \n            current_class = None\n            next_class = None\n            \n            for schedule in other_schedules:\n                if schedule.day == current_day:\n                    if schedule.start_time <= current_time <= schedule.end_time:\n                        current_class = f\"{schedule.course_code}\"\n                        break\n            \n            if not current_class:\n                today_schedules = [s for s in other_schedules if s.day == current_day]\n                future_schedules = [s for s in today_schedules if s.start_time > current_time]\n                if future_schedules:\n                    next_schedule = min(future_schedules, key=lambda x: x.start_time)\n                    next_class = f\"{next_schedule.course_code} @ {status_service._format_time(next_schedule.start_time)}\"\n            \n            partner = StudyPartner(\n                id=other_user.id,\n                username=other_user.username,\n                major=other_user.major,\n                avatar=other_user.avatar,\n                score=score,\n                shared_classes=shared_classes,\n                current_class=current_class,\n                next_class=next_class,\n                reason=reason\n            )\n            \n            recommendations.append(partner)\n        \n        # Sort by score (highest first) and return top 5\n        recommendations.sort(key=lambda x: x.score, reverse=True)\n        return recommendations[:5]\n\nclass ICSParser:\n    def __init__(self):\n        pass\n    \n    def parse_ics_file(self, file, user_id: str) -> List[Schedule]:\n        \"\"\"Parse uploaded .ics file and extract weekly schedules\"\"\"\n        try:\n            from icalendar import Calendar\n            import pytz\n            \n            # Read file content\n            file_content = file.read()\n            if isinstance(file_content, bytes):\n                file_content = file_content.decode('utf-8', errors='ignore')\n            \n            # Parse calendar\n            cal = Calendar.from_ical(file_content)\n            schedules = []\n            \n            for component in cal.walk():\n                if component.name == \"VEVENT\":\n                    # Extract event details\n                    summary = str(component.get('summary', ''))\n                    dtstart = component.get('dtstart')\n                    dtend = component.get('dtend')\n                    location = str(component.get('location', ''))\n                    rrule = component.get('rrule')\n                    \n                    if not dtstart or not dtend:\n                        continue\n                    \n                    # Convert to local timezone if needed\n                    start_dt = dtstart.dt\n                    end_dt = dtend.dt\n                    \n                    # Handle both datetime and date objects\n                    if hasattr(start_dt, 'hour'):\n                        start_time = start_dt.strftime('%H:%M')\n                        end_time = end_dt.strftime('%H:%M')\n                        initial_day_name = start_dt.strftime('%A').lower()\n                    else:\n                        # All-day event, skip\n                        continue\n                    \n                    # Extract course code and name from summary\n                    course_code, course_name = self._parse_course_summary(summary)\n                    \n                    # Check for recurring pattern (RRULE)\n                    recurring_days = []\n                    if rrule:\n                        # Parse RRULE to extract BYDAY values\n                        recurring_days = self._parse_rrule_days(rrule)\n                    \n                    # If no RRULE or no BYDAY found, use the initial day\n                    if not recurring_days:\n                        try:\n                            day = DayType(initial_day_name)\n                            schedule = Schedule(\n                                id=str(uuid.uuid4()),\n                                user_id=user_id,\n                                course_code=course_code,\n                                course_name=course_name,\n                                day=day,\n                                start_time=start_time,\n                                end_time=end_time,\n                                location=location\n                            )\n                            schedules.append(schedule)\n                        except ValueError:\n                            continue  # Skip invalid days\n                    else:\n                        # Create schedule for each recurring day\n                        for day_name in recurring_days:\n                            try:\n                                day = DayType(day_name)\n                                schedule = Schedule(\n                                    id=str(uuid.uuid4()),\n                                    user_id=user_id,\n                                    course_code=course_code,\n                                    course_name=course_name,\n                                    day=day,\n                                    start_time=start_time,\n                                    end_time=end_time,\n                                    location=location\n                                )\n                                schedules.append(schedule)\n                            except ValueError:\n                                continue  # Skip invalid days\n            \n            return schedules\n            \n        except Exception as e:\n            raise ValueError(f\"Failed to parse calendar file: {str(e)}\")\n    \n    def _parse_course_summary(self, summary: str) -> tuple[str, str]:\n        \"\"\"Extract course code and name from event summary\"\"\"\n        if not summary:\n            return \"UNKNOWN\", \"Unknown Course\"\n        \n        # Normalize full-width colons to ASCII colons\n        normalized_summary = summary.replace('：：', '::').replace('：', ':')\n        \n        # Try to match patterns with double colons and 5-digit codes: \"Course Name :: 12345 1\"\n        match = re.search(r'^(.+?)\\s*::\\s*(\\d{5})', normalized_summary.strip())\n        if match:\n            name = match.group(1).strip()\n            code = match.group(2).strip()\n            return code, name\n        \n        # Try to match patterns like \"Course Name :: CODE123 D\" (:: separator format)\n        match = re.match(r'^(.+?)\\s*::\\s*(.+)$', normalized_summary.strip())\n        if match:\n            name = match.group(1).strip()\n            code = match.group(2).strip()\n            return code, name\n        \n        # Try to match patterns like \"CS 151 - Introduction to Computer Science\"\n        match = re.match(r'^([A-Z]{2,4}\\s*\\d{3})\\s*[-:]?\\s*(.*)$', summary, re.IGNORECASE)\n        if match:\n            code = match.group(1).upper()\n            name = match.group(2).strip() or code\n            return code, name\n        \n        # Try to match patterns like \"Introduction to Computer Science (CS151)\"\n        match = re.search(r'\\(([A-Z]{2,4}\\s*\\d{3})\\)', summary, re.IGNORECASE)\n        if match:\n            code = match.group(1).upper()\n            name = summary.replace(f\"({match.group(1)})\", \"\").strip()\n            return code, name\n        \n        # Default: use first few words as code, full summary as name\n        words = summary.split()\n        if len(words) >= 2:\n            potential_code = f\"{words[0]} {words[1]}\".upper()\n            if re.match(r'^[A-Z]{2,4}\\s+\\d{3}$', potential_code):\n                return potential_code, summary\n        \n        return summary[:10].upper(), summary\n    \n    def _parse_rrule_days(self, rrule) -> List[str]:\n        \"\"\"Parse RRULE to extract BYDAY values and return list of day names\"\"\"\n        if not rrule:\n            return []\n        \n        # Mapping of ICS BYDAY abbreviations to full day names\n        day_mapping = {\n            'MO': 'monday',\n            'TU': 'tuesday', \n            'WE': 'wednesday',\n            'TH': 'thursday',\n            'FR': 'friday',\n            'SA': 'saturday',\n            'SU': 'sunday'\n        }\n        \n        days = []\n        \n        try:\n            # Handle different possible RRULE formats\n            if hasattr(rrule, 'get'):\n                # rrule is a dict-like object\n                byday = rrule.get('BYDAY')\n            elif hasattr(rrule, 'to_ical'):\n                # rrule is an icalendar object, convert to string and parse\n                rrule_str = rrule.to_ical().decode('utf-8') if hasattr(rrule.to_ical(), 'decode') else str(rrule.to_ical())\n                byday = self._extract_byday_from_string(rrule_str)\n            else:\n                # rrule is already a string\n                rrule_str = str(rrule)\n                byday = self._extract_byday_from_string(rrule_str)\n            \n            if byday:\n                # Handle both single values and lists\n                if isinstance(byday, list):\n                    for day_code in byday:\n                        day_code = str(day_code).strip().upper()\n                        # Remove any numeric prefixes (like \"1MO\" -> \"MO\")\n                        day_code = re.sub(r'^\\d+', '', day_code)\n                        if day_code in day_mapping:\n                            days.append(day_mapping[day_code])\n                else:\n                    # Single value or comma-separated string\n                    day_codes = str(byday).split(',')\n                    for day_code in day_codes:\n                        day_code = day_code.strip().upper()\n                        # Remove any numeric prefixes (like \"1MO\" -> \"MO\")\n                        day_code = re.sub(r'^\\d+', '', day_code)\n                        if day_code in day_mapping:\n                            days.append(day_mapping[day_code])\n            \n        except Exception as e:\n            # If parsing fails, return empty list to fall back to initial day\n            pass\n        \n        return days\n    \n    def _extract_byday_from_string(self, rrule_str: str) -> Optional[str]:\n        \"\"\"Extract BYDAY value from RRULE string\"\"\"\n        # Look for BYDAY=... pattern\n        match = re.search(r'BYDAY=([^;]+)', rrule_str.upper())\n        return match.group(1) if match else None","size_bytes":17587},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \".5625rem\", /* 9px */\n        md: \".375rem\", /* 6px */\n        sm: \".1875rem\", /* 3px */\n      },\n      colors: {\n        // Flat / base colors (regular buttons)\n        background: \"hsl(var(--background) / <alpha-value>)\",\n        foreground: \"hsl(var(--foreground) / <alpha-value>)\",\n        border: \"hsl(var(--border) / <alpha-value>)\",\n        input: \"hsl(var(--input) / <alpha-value>)\",\n        card: {\n          DEFAULT: \"hsl(var(--card) / <alpha-value>)\",\n          foreground: \"hsl(var(--card-foreground) / <alpha-value>)\",\n          border: \"hsl(var(--card-border) / <alpha-value>)\",\n        },\n        popover: {\n          DEFAULT: \"hsl(var(--popover) / <alpha-value>)\",\n          foreground: \"hsl(var(--popover-foreground) / <alpha-value>)\",\n          border: \"hsl(var(--popover-border) / <alpha-value>)\",\n        },\n        primary: {\n          DEFAULT: \"hsl(var(--primary) / <alpha-value>)\",\n          foreground: \"hsl(var(--primary-foreground) / <alpha-value>)\",\n          border: \"var(--primary-border)\",\n        },\n        secondary: {\n          DEFAULT: \"hsl(var(--secondary) / <alpha-value>)\",\n          foreground: \"hsl(var(--secondary-foreground) / <alpha-value>)\",\n          border: \"var(--secondary-border)\",\n        },\n        muted: {\n          DEFAULT: \"hsl(var(--muted) / <alpha-value>)\",\n          foreground: \"hsl(var(--muted-foreground) / <alpha-value>)\",\n          border: \"var(--muted-border)\",\n        },\n        accent: {\n          DEFAULT: \"hsl(var(--accent) / <alpha-value>)\",\n          foreground: \"hsl(var(--accent-foreground) / <alpha-value>)\",\n          border: \"var(--accent-border)\",\n        },\n        destructive: {\n          DEFAULT: \"hsl(var(--destructive) / <alpha-value>)\",\n          foreground: \"hsl(var(--destructive-foreground) / <alpha-value>)\",\n          border: \"var(--destructive-border)\",\n        },\n        ring: \"hsl(var(--ring) / <alpha-value>)\",\n        chart: {\n          \"1\": \"hsl(var(--chart-1) / <alpha-value>)\",\n          \"2\": \"hsl(var(--chart-2) / <alpha-value>)\",\n          \"3\": \"hsl(var(--chart-3) / <alpha-value>)\",\n          \"4\": \"hsl(var(--chart-4) / <alpha-value>)\",\n          \"5\": \"hsl(var(--chart-5) / <alpha-value>)\",\n        },\n        sidebar: {\n          ring: \"hsl(var(--sidebar-ring) / <alpha-value>)\",\n          DEFAULT: \"hsl(var(--sidebar) / <alpha-value>)\",\n          foreground: \"hsl(var(--sidebar-foreground) / <alpha-value>)\",\n          border: \"hsl(var(--sidebar-border) / <alpha-value>)\",\n        },\n        \"sidebar-primary\": {\n          DEFAULT: \"hsl(var(--sidebar-primary) / <alpha-value>)\",\n          foreground: \"hsl(var(--sidebar-primary-foreground) / <alpha-value>)\",\n          border: \"var(--sidebar-primary-border)\",\n        },\n        \"sidebar-accent\": {\n          DEFAULT: \"hsl(var(--sidebar-accent) / <alpha-value>)\",\n          foreground: \"hsl(var(--sidebar-accent-foreground) / <alpha-value>)\",\n          border: \"var(--sidebar-accent-border)\"\n        },\n        status: {\n          studying: \"hsl(var(--chart-1))\", // Green\n          free: \"hsl(var(--chart-2))\", // Light blue\n          help: \"hsl(var(--chart-3))\", // Orange\n          busy: \"hsl(var(--destructive))\", // Red\n          tired: \"hsl(var(--chart-4))\", // Purple\n          social: \"hsl(var(--chart-5))\", // Pink\n        },\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: { height: \"0\" },\n          to: { height: \"var(--radix-accordion-content-height)\" },\n        },\n        \"accordion-up\": {\n          from: { height: \"var(--radix-accordion-content-height)\" },\n          to: { height: \"0\" },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":4186},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":971},"server/db.ts":{"content":"import { Pool, neonConfig } from '@neondatabase/serverless';\nimport { drizzle } from 'drizzle-orm/neon-serverless';\nimport ws from \"ws\";\nimport * as schema from \"@shared/schema\";\n\nneonConfig.webSocketConstructor = ws;\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\n    \"DATABASE_URL must be set. Did you forget to provision a database?\",\n  );\n}\n\nexport const pool = new Pool({ connectionString: process.env.DATABASE_URL });\nexport const db = drizzle({ client: pool, schema });\n","size_bytes":483},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport session from \"express-session\";\nimport cookieParser from \"cookie-parser\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\nimport { SECRET } from \"./config\";\n\nconst app = express();\n\n// Session configuration to match Flask\napp.use(cookieParser());\n\napp.use(session({\n  secret: SECRET,\n  resave: false,\n  saveUninitialized: false,\n  name: 'session', // Match Flask's default session cookie name\n  cookie: {\n    secure: false, // Set to true in production with HTTPS\n    httpOnly: true,\n    maxAge: 24 * 60 * 60 * 1000 // 24 hours\n  }\n}));\n\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    console.error('Server error:', err);\n    res.status(status).json({ message });\n    // REMOVED dangerous throw err - this was crashing the server\n  });\n\n  // Add a middleware to ensure API routes are handled before Vite\n  app.use('/api/*', (req, res, next) => {\n    // If we get here, it means the API route wasn't found\n    // This should not happen if routes are properly registered\n    console.error('API route not found:', req.method, req.originalUrl);\n    res.status(404).json({ error: 'API endpoint not found' });\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":3005},"server/routes.ts":{"content":"import type { Express, Request, Response, NextFunction } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport multer from \"multer\";\nimport ical from \"ical\";\nimport { WebSocketServer, WebSocket } from \"ws\";\nimport cookieParser from \"cookie-parser\";\nimport { storage } from \"./storage\";\nimport { SECRET } from \"./config\";\nimport { \n  insertScheduleSchema, \n  insertUserSchema, \n  insertChatSchema,\n  insertMessageSchema,\n  registerUserSchema,\n  loginUserSchema,\n  updateUserProfileSchema,\n  addFriendSchema,\n  searchUsersSchema,\n  type InsertSchedule,\n  type RegisterUser,\n  type LoginUser,\n  type WebSocketMessage\n} from \"@shared/schema\";\n\n// Extend Express session to include user_id\ndeclare module 'express-session' {\n  interface SessionData {\n    user_id: string;\n  }\n}\n\n// Authentication middleware to validate session and extract authenticated userId\nfunction requireAuth(req: Request, res: Response, next: NextFunction) {\n  if (!req.session?.user_id) {\n    logWebSocket('warn', 'Unauthenticated API request attempt', {\n      path: req.path,\n      method: req.method,\n      ip: req.ip\n    });\n    return res.status(401).json({ error: 'Authentication required - please log in' });\n  }\n  \n  // Attach authenticated userId to request for easy access\n  (req as any).authenticatedUserId = req.session.user_id;\n  next();\n}\n\n// Function to validate session from WebSocket cookies and extract userId\nfunction validateWebSocketSession(request: any): string | null {\n  try {\n    const cookies = request.headers.cookie;\n    if (!cookies) {\n      logWebSocket('warn', 'No cookies found in WebSocket connection');\n      return null;\n    }\n    \n    // Parse cookies to find session cookie\n    const cookieObj: any = {};\n    cookies.split(';').forEach((cookie: string) => {\n      const parts = cookie.trim().split('=');\n      if (parts.length >= 2) {\n        const name = parts[0];\n        const value = parts.slice(1).join('='); // Handle values with = signs\n        cookieObj[name] = decodeURIComponent(value);\n      }\n    });\n    \n    // Look for common session cookie names\n    const sessionCookie = cookieObj['session'] || cookieObj['connect.sid'] || cookieObj['express:sess'];\n    \n    if (!sessionCookie) {\n      logWebSocket('warn', 'No session cookie found in WebSocket connection', {\n        availableCookies: Object.keys(cookieObj)\n      });\n      return null;\n    }\n    \n    // SIMPLIFIED SESSION VALIDATION:\n    // In production, you would properly decode and verify the session signature\n    // For now, we'll use a simplified approach where we check if the cookie contains user_id data\n    try {\n      // Try to extract user_id from session cookie (this is a simplified approach)\n      // Real implementation would properly decrypt/verify the signed session cookie\n      \n      // For this demo, we'll implement a basic validation by checking if there's a valid session structure\n      // Since we can't easily decode signed cookies without the exact same configuration,\n      // we'll implement a different approach using a header-based validation\n      \n      return null; // Will require additional implementation for full session decoding\n    } catch (error) {\n      logWebSocket('warn', 'Failed to parse session cookie', error);\n      return null;\n    }\n  } catch (error) {\n    logWebSocket('error', 'Error validating WebSocket session', error);\n    return null;\n  }\n}\n\n// Alternative: Use a simple token-based authentication for WebSocket\n// This creates a more secure approach until full session integration is complete\ninterface AuthToken {\n  userId: string;\n  timestamp: number;\n  signature: string;\n}\n\nfunction generateAuthToken(userId: string): string {\n  const crypto = require('crypto');\n  const timestamp = Date.now();\n  const data = `${userId}:${timestamp}`;\n  \n  // Use HMAC-SHA256 for secure signatures with unified secret\n  const signature = crypto.createHmac('sha256', SECRET).update(data).digest('hex');\n  \n  return Buffer.from(JSON.stringify({ userId, timestamp, signature })).toString('base64');\n}\n\nfunction validateAuthToken(token: string): string | null {\n  try {\n    const decoded = JSON.parse(Buffer.from(token, 'base64').toString());\n    const { userId, timestamp, signature } = decoded as AuthToken;\n    \n    // Check if token is expired (24 hours)\n    if (Date.now() - timestamp > 24 * 60 * 60 * 1000) {\n      return null;\n    }\n    \n    // Verify HMAC-SHA256 signature with unified secret\n    const crypto = require('crypto');\n    const expectedData = `${userId}:${timestamp}`;\n    const expectedSignature = crypto.createHmac('sha256', SECRET).update(expectedData).digest('hex');\n    \n    if (signature !== expectedSignature) {\n      return null;\n    }\n    \n    return userId;\n  } catch (error) {\n    return null;\n  }\n}\n\nconst upload = multer({\n  storage: multer.memoryStorage(),\n  limits: {\n    fileSize: 5 * 1024 * 1024, // 5MB limit\n  },\n  fileFilter: (req, file, cb) => {\n    if (file.mimetype === 'text/calendar' || file.originalname.endsWith('.ics')) {\n      cb(null, true);\n    } else {\n      cb(new Error('Only .ics files are allowed'));\n    }\n  }\n});\n\n// Helper function to extract day from date\nfunction getDayFromDate(date: Date): string {\n  const days = ['sunday', 'monday', 'tuesday', 'wednesday', 'thursday', 'friday', 'saturday'];\n  return days[date.getDay()];\n}\n\n// Helper function to format time to HH:MM\nfunction formatTime(date: Date): string {\n  return date.toTimeString().slice(0, 5);\n}\n\n// Helper function to parse ICS file\nfunction parseICSFile(buffer: Buffer): InsertSchedule[] {\n  const icsData = ical.parseICS(buffer.toString());\n  const schedules: InsertSchedule[] = [];\n\n  Object.values(icsData).forEach((event: any) => {\n    if (event.type === 'VEVENT' && event.start && event.end && event.summary) {\n      const startDate = new Date(event.start);\n      const endDate = new Date(event.end);\n      \n      // Extract course code and name from summary\n      const summary = event.summary as string;\n      let courseCode = '';\n      let courseName = summary;\n      \n      // Try to extract course code after \"::\" (e.g., \"Course Name::15122\")\n      const colonMatch = summary.match(/^(.+?)::(.+)$/);\n      if (colonMatch) {\n        const possibleName = colonMatch[1].trim();\n        const possibleCode = colonMatch[2].trim();\n        \n        // Check if the part after :: looks like a course code\n        // Patterns supported:\n        // - \"15122\" (numbers only)\n        // - \"15122A\" (numbers + letter)\n        // - \"15122 A\" (numbers + space + letter(s))\n        // - \"CS 151\" (letters + space + numbers)\n        // - \"CS 151A\" (letters + space + numbers + letter)\n        if (/^\\d+[A-Z]?$/.test(possibleCode) || \n            /^\\d+\\s+[A-Z]+$/.test(possibleCode) ||\n            /^[A-Z]{2,4}\\s*\\d{3}[A-Z]?$/.test(possibleCode)) {\n          \n          // Extract just the course number part (remove section letters)\n          const codeMatch = possibleCode.match(/^(\\d+)/);\n          if (codeMatch) {\n            courseCode = codeMatch[1]; // Just the numeric part like \"10301\"\n          } else {\n            courseCode = possibleCode; // Fallback to full code\n          }\n          courseName = possibleName;\n        }\n      } else {\n        // Try to extract course code pattern (e.g., \"CS 151 - Intro to Programming\")\n        const codeMatch = summary.match(/^([A-Z]{2,4}\\s*\\d{3}[A-Z]?)/);\n        if (codeMatch) {\n          courseCode = codeMatch[1].trim();\n          courseName = summary.replace(codeMatch[0], '').replace(/^[\\s\\-]+/, '').trim();\n        }\n      }\n      \n      if (!courseName) {\n        courseName = summary;\n      }\n\n      const schedule: InsertSchedule = {\n        courseCode: courseCode || 'TBD',\n        courseName: courseName,\n        day: getDayFromDate(startDate) as any,\n        startTime: formatTime(startDate),\n        endTime: formatTime(endDate),\n        location: event.location || null\n      };\n\n      schedules.push(schedule);\n    }\n  });\n\n  return schedules;\n}\n\n// WebSocket connection management\ninterface ConnectedUser {\n  userId: string;\n  websocket: WebSocket;\n  connectedAt: Date;\n  lastActivity: Date;\n}\n\nconst connectedUsers = new Map<string, ConnectedUser>();\n\n// Enhanced logging utility\nfunction logWebSocket(level: 'info' | 'warn' | 'error', message: string, data?: any) {\n  const timestamp = new Date().toISOString();\n  const prefix = `[${timestamp}] [WebSocket ${level.toUpperCase()}]`;\n  if (data) {\n    console.log(`${prefix} ${message}`, data);\n  } else {\n    console.log(`${prefix} ${message}`);\n  }\n}\n\n// Broadcast message to specific user\nfunction sendToUser(userId: string, message: WebSocketMessage) {\n  const user = connectedUsers.get(userId);\n  if (user && user.websocket.readyState === WebSocket.OPEN) {\n    try {\n      user.websocket.send(JSON.stringify(message));\n      user.lastActivity = new Date();\n      logWebSocket('info', `Message sent to user ${userId}`, { type: message.type });\n    } catch (error) {\n      logWebSocket('error', `Failed to send message to user ${userId}`, error);\n      // Remove dead connection\n      connectedUsers.delete(userId);\n    }\n  } else {\n    logWebSocket('warn', `User ${userId} not connected or websocket not open`);\n  }\n}\n\n// Broadcast message to multiple users\nfunction broadcastToUsers(userIds: string[], message: WebSocketMessage) {\n  userIds.forEach(userId => sendToUser(userId, message));\n}\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Health check endpoint for HEAD /api requests\n  app.head('/api', (req, res) => {\n    res.status(200).end();\n  });\n  \n  app.get('/api', (req, res) => {\n    res.json({ \n      status: 'ok', \n      message: 'SlotSync API is running',\n      timestamp: new Date().toISOString()\n    });\n  });\n\n  // Authentication routes\n  \n  // Register new user\n  app.post('/api/auth/register', async (req, res) => {\n    try {\n      const validatedData = registerUserSchema.parse(req.body);\n      \n      // Register user through storage layer\n      const user = await storage.registerUser(validatedData);\n      \n      // Set session\n      req.session.user_id = user.id;\n      \n      res.json({\n        user,\n        message: 'Registration successful'\n      });\n    } catch (error: any) {\n      console.error('Registration error:', error);\n      \n      if (error.message === 'Username already exists') {\n        return res.status(409).json({ error: 'Username already exists' });\n      }\n      \n      res.status(400).json({ \n        error: error.message || 'Registration failed'\n      });\n    }\n  });\n\n  // Login user\n  app.post('/api/auth/login', async (req, res) => {\n    try {\n      const validatedData = loginUserSchema.parse(req.body);\n      \n      // Authenticate user through storage layer\n      const user = await storage.authenticateUser(validatedData.username, validatedData.password);\n      \n      if (!user) {\n        return res.status(401).json({ error: 'Invalid username or password' });\n      }\n      \n      // Set session\n      req.session.user_id = user.id;\n      \n      res.json({\n        user,\n        message: 'Login successful'\n      });\n    } catch (error: any) {\n      console.error('Login error:', error);\n      res.status(400).json({ \n        error: error.message || 'Login failed'\n      });\n    }\n  });\n\n  // Logout user\n  app.post('/api/auth/logout', async (req, res) => {\n    try {\n      if (req.session) {\n        req.session.destroy((err) => {\n          if (err) {\n            console.error('Logout error:', err);\n            return res.status(500).json({ error: 'Logout failed' });\n          }\n          \n          res.clearCookie('session');\n          res.json({ message: 'Logged out successfully' });\n        });\n      } else {\n        res.json({ message: 'No active session' });\n      }\n    } catch (error: any) {\n      console.error('Logout error:', error);\n      res.status(500).json({ error: 'Logout failed' });\n    }\n  });\n\n  // Get current user\n  app.get('/api/auth/me', requireAuth, async (req, res) => {\n    try {\n      const authenticatedUserId = (req as any).authenticatedUserId;\n      \n      const user = await storage.getUserById(authenticatedUserId);\n      \n      if (!user) {\n        return res.status(404).json({ error: 'User not found' });\n      }\n      \n      res.json({ user });\n    } catch (error: any) {\n      console.error('Get current user error:', error);\n      res.status(500).json({ error: 'Failed to get user information' });\n    }\n  });\n\n  // SECURITY: Generate WebSocket authentication token endpoint\n  app.post('/api/auth/ws-token', requireAuth, async (req, res) => {\n    try {\n      const authenticatedUserId = (req as any).authenticatedUserId;\n      \n      // Generate secure token for WebSocket authentication\n      const token = generateAuthToken(authenticatedUserId);\n      \n      logWebSocket('info', 'WebSocket token generated', {\n        userId: authenticatedUserId,\n        tokenExpiry: '24 hours'\n      });\n      \n      res.json({ \n        token, \n        userId: authenticatedUserId,\n        expiresIn: 24 * 60 * 60 * 1000 // 24 hours in milliseconds\n      });\n    } catch (error: any) {\n      logWebSocket('error', 'Failed to generate WebSocket token', error);\n      res.status(500).json({ error: 'Failed to generate authentication token' });\n    }\n  });\n\n  // Schedule CRUD routes\n  \n  // Get user's schedules\n  app.get('/api/schedules/:userId', async (req, res) => {\n    try {\n      const { userId } = req.params;\n      const schedules = await storage.getSchedulesByUserId(userId);\n      res.json(schedules);\n    } catch (error: any) {\n      res.status(500).json({ error: error.message });\n    }\n  });\n\n  // Create a new schedule\n  app.post('/api/schedules/:userId', async (req, res) => {\n    try {\n      const { userId } = req.params;\n      const validatedData = insertScheduleSchema.parse(req.body);\n      const schedule = await storage.createSchedule(validatedData, userId);\n      res.json(schedule);\n    } catch (error: any) {\n      res.status(400).json({ error: error.message });\n    }\n  });\n\n  // Delete a schedule\n  app.delete('/api/schedules/:userId/:scheduleId', async (req, res) => {\n    try {\n      const { userId, scheduleId } = req.params;\n      const success = await storage.deleteSchedule(scheduleId, userId);\n      if (success) {\n        res.json({ success: true });\n      } else {\n        res.status(404).json({ error: 'Schedule not found' });\n      }\n    } catch (error: any) {\n      res.status(500).json({ error: error.message });\n    }\n  });\n\n  // Upload and parse ICS file\n  app.post('/api/schedules/:userId/upload-ics', upload.single('icsFile'), async (req, res) => {\n    try {\n      const { userId } = req.params;\n      \n      if (!req.file) {\n        return res.status(400).json({ error: 'No file uploaded' });\n      }\n\n      // Parse the ICS file\n      const schedules = parseICSFile(req.file.buffer);\n      \n      if (schedules.length === 0) {\n        return res.status(400).json({ error: 'No valid events found in ICS file' });\n      }\n\n      // Validate all schedules\n      const validatedSchedules = schedules.map(schedule => insertScheduleSchema.parse(schedule));\n      \n      // Create multiple schedules\n      const createdSchedules = await storage.createMultipleSchedules(validatedSchedules, userId);\n      \n      res.json({ \n        success: true, \n        message: `Successfully imported ${createdSchedules.length} courses`,\n        schedules: createdSchedules \n      });\n    } catch (error: any) {\n      console.error('ICS upload error:', error);\n      res.status(400).json({ error: error.message });\n    }\n  });\n\n  // User management routes\n  app.post('/api/users', async (req, res) => {\n    try {\n      const user = await storage.createUser(req.body);\n      res.json(user);\n    } catch (error: any) {\n      res.status(400).json({ error: error.message });\n    }\n  });\n\n  // Search users (MUST be before /api/users/:userId to avoid route conflict)\n  app.get('/api/users/search', requireAuth, async (req, res) => {\n    try {\n      const authenticatedUserId = (req as any).authenticatedUserId;\n      \n      console.log('Search users request:', { query: req.query, authenticatedUserId });\n      \n      // Validate query parameters with Zod\n      const validation = searchUsersSchema.safeParse(req.query);\n      if (!validation.success) {\n        console.log('Search validation failed:', validation.error.issues);\n        return res.status(400).json({ \n          error: 'Invalid search parameters',\n          details: validation.error.issues\n        });\n      }\n      \n      const { q: query, limit: searchLimit } = validation.data;\n      console.log('Search params validated:', { query, limit: searchLimit });\n      \n      const searchResults = await storage.searchUsers(query, authenticatedUserId, searchLimit);\n      console.log('Search results:', searchResults.length, 'users found');\n      \n      res.json(searchResults);\n    } catch (error: any) {\n      console.error('Search users error:', error);\n      res.status(500).json({ error: error.message });\n    }\n  });\n\n  app.get('/api/users/:userId', async (req, res) => {\n    try {\n      const { userId } = req.params;\n      const user = await storage.getUser(userId);\n      if (user) {\n        res.json(user);\n      } else {\n        res.status(404).json({ error: 'User not found' });\n      }\n    } catch (error: any) {\n      res.status(500).json({ error: error.message });\n    }\n  });\n\n  app.put('/api/users/:userId', requireAuth, async (req, res) => {\n    try {\n      const { userId } = req.params;\n      const authenticatedUserId = (req as any).authenticatedUserId;\n      \n      // SECURITY: Users can only update their own profile\n      if (userId !== authenticatedUserId) {\n        logWebSocket('error', 'Unauthorized profile update attempt', {\n          authenticatedUserId,\n          requestedUserId: userId\n        });\n        return res.status(403).json({ error: 'Cannot update other users\\' profiles' });\n      }\n      \n      const updateData = req.body;\n      \n      // SECURITY: Use safe update schema that excludes password and other sensitive fields\n      // This prevents password updates through the general profile update endpoint\n      const validatedData = updateUserProfileSchema.parse(updateData);\n      \n      const updatedUser = await storage.updateUser(userId, validatedData);\n      \n      if (updatedUser) {\n        res.json(updatedUser);\n      } else {\n        res.status(404).json({ error: 'User not found' });\n      }\n    } catch (error: any) {\n      res.status(400).json({ error: error.message });\n    }\n  });\n\n  // Chat management routes\n  \n  // Get user's chats - SECURITY FIXED\n  app.get('/api/chats/:userId', requireAuth, async (req, res) => {\n    try {\n      const { userId } = req.params;\n      const authenticatedUserId = (req as any).authenticatedUserId;\n      \n      // SECURITY: Users can only access their own chats\n      if (userId !== authenticatedUserId) {\n        logWebSocket('error', 'Unauthorized chat access attempt', {\n          authenticatedUserId,\n          requestedUserId: userId\n        });\n        return res.status(403).json({ error: 'Cannot access other users\\' chats' });\n      }\n      \n      const chats = await storage.getChatsByUserId(authenticatedUserId);\n      res.json(chats);\n    } catch (error: any) {\n      res.status(500).json({ error: error.message });\n    }\n  });\n\n  // Create or get chat between two users - SECURITY FIXED\n  app.post('/api/chats', requireAuth, async (req, res) => {\n    try {\n      const authenticatedUserId = (req as any).authenticatedUserId;\n      \n      // Parse and validate chat data\n      const chatData = insertChatSchema.parse(req.body);\n      \n      // SECURITY: Ensure authenticated user is one of the participants\n      if (chatData.user1Id !== authenticatedUserId && chatData.user2Id !== authenticatedUserId) {\n        logWebSocket('error', 'Unauthorized chat creation attempt', {\n          authenticatedUserId,\n          requestedUser1Id: chatData.user1Id,\n          requestedUser2Id: chatData.user2Id\n        });\n        return res.status(403).json({ error: 'Can only create chats involving yourself' });\n      }\n      \n      // Check if chat already exists between these users\n      const existingChat = await storage.getChatBetweenUsers(chatData.user1Id, chatData.user2Id);\n      \n      if (existingChat) {\n        res.json(existingChat);\n      } else {\n        const newChat = await storage.createChat(chatData);\n        logWebSocket('info', 'New chat created', {\n          chatId: newChat.id,\n          user1Id: chatData.user1Id,\n          user2Id: chatData.user2Id,\n          createdBy: authenticatedUserId\n        });\n        res.json(newChat);\n      }\n    } catch (error: any) {\n      res.status(400).json({ error: error.message });\n    }\n  });\n\n  // Get messages for a specific chat - SECURITY FIXED\n  app.get('/api/chats/:chatId/messages', requireAuth, async (req, res) => {\n    try {\n      const { chatId } = req.params;\n      const authenticatedUserId = (req as any).authenticatedUserId;\n      const { limit = '50', offset = '0' } = req.query;\n      \n      // SECURITY: Verify the authenticated user is authorized to view messages in this chat\n      const isAuthorized = await storage.isUserInChat(chatId, authenticatedUserId);\n      if (!isAuthorized) {\n        logWebSocket('error', 'Unauthorized chat messages access attempt', {\n          authenticatedUserId,\n          chatId\n        });\n        return res.status(403).json({ error: 'User not authorized to view messages in this chat' });\n      }\n      \n      const messages = await storage.getMessagesByChatId(\n        chatId, \n        parseInt(limit as string), \n        parseInt(offset as string)\n      );\n      res.json(messages);\n    } catch (error: any) {\n      res.status(500).json({ error: error.message });\n    }\n  });\n\n  // Send message via HTTP (alternative to WebSocket) - SECURITY FIXED\n  app.post('/api/chats/:chatId/messages', requireAuth, async (req, res) => {\n    try {\n      const { chatId } = req.params;\n      const authenticatedUserId = (req as any).authenticatedUserId;\n      \n      // SECURITY: COMPLETELY IGNORE req.body.senderId - use authenticated user from session\n      const messageData = insertMessageSchema.parse({\n        chatId,\n        senderId: authenticatedUserId, // Use authenticated userId, NOT from client\n        content: req.body.content,\n        messageType: req.body.messageType || 'text'\n      });\n      \n      // SECURITY: Verify the AUTHENTICATED user is authorized to send messages in this chat\n      const isAuthorized = await storage.isUserInChat(chatId, authenticatedUserId);\n      if (!isAuthorized) {\n        logWebSocket('error', 'Unauthorized chat message attempt', {\n          authenticatedUserId,\n          chatId\n        });\n        return res.status(403).json({ error: 'User not authorized to send messages in this chat' });\n      }\n      \n      const message = await storage.createMessage(messageData);\n      \n      // Get the message with sender info\n      const messagesWithSender = await storage.getMessagesByChatId(chatId, 1, 0);\n      const messageWithSender = messagesWithSender.find(m => m.id === message.id);\n      \n      if (messageWithSender) {\n        // Broadcast via WebSocket if users are connected\n        const chat = await storage.getChat(chatId);\n        if (chat) {\n          const otherUserId = chat.user1Id === authenticatedUserId ? chat.user2Id : chat.user1Id;\n          broadcastToUsers([authenticatedUserId, otherUserId], {\n            type: 'message',\n            data: messageWithSender\n          });\n        }\n        \n        logWebSocket('info', 'Message sent via HTTP', {\n          senderId: authenticatedUserId,\n          chatId,\n          messageId: message.id\n        });\n        \n        res.json(messageWithSender);\n      } else {\n        res.json(message);\n      }\n    } catch (error: any) {\n      logWebSocket('error', 'HTTP message send error', error);\n      res.status(400).json({ error: error.message });\n    }\n  });\n\n  // Mark messages as read - SECURITY FIXED\n  app.post('/api/messages/:messageId/read', requireAuth, async (req, res) => {\n    try {\n      const { messageId } = req.params;\n      const authenticatedUserId = (req as any).authenticatedUserId;\n      \n      // SECURITY: IGNORE req.body.userId, use authenticated user instead\n      const success = await storage.markMessageAsRead(messageId, authenticatedUserId);\n      \n      if (success) {\n        logWebSocket('info', 'Message marked as read', {\n          messageId,\n          userId: authenticatedUserId\n        });\n        res.json({ success: true });\n      } else {\n        res.status(404).json({ error: 'Message not found or already read' });\n      }\n    } catch (error: any) {\n      res.status(400).json({ error: error.message });\n    }\n  });\n\n  // Get unread message count for a chat - SECURITY FIXED\n  app.get('/api/chats/:chatId/unread/:userId', requireAuth, async (req, res) => {\n    try {\n      const { chatId, userId } = req.params;\n      const authenticatedUserId = (req as any).authenticatedUserId;\n      \n      // SECURITY: Users can only check unread counts for themselves\n      if (userId !== authenticatedUserId) {\n        logWebSocket('error', 'Unauthorized unread count access attempt', {\n          authenticatedUserId,\n          requestedUserId: userId,\n          chatId\n        });\n        return res.status(403).json({ error: 'Cannot check unread counts for other users' });\n      }\n      \n      // SECURITY: Verify user is authorized in this chat\n      const isAuthorized = await storage.isUserInChat(chatId, authenticatedUserId);\n      if (!isAuthorized) {\n        return res.status(403).json({ error: 'User not authorized to access this chat' });\n      }\n      \n      const count = await storage.getUnreadMessagesCount(chatId, authenticatedUserId);\n      res.json({ count });\n    } catch (error: any) {\n      res.status(500).json({ error: error.message });\n    }\n  });\n\n  // Status and recommendation endpoints\n  \n  // Get current user status information\n  app.get('/api/status', requireAuth, async (req, res) => {\n    try {\n      const authenticatedUserId = (req as any).authenticatedUserId;\n      \n      // Get user's friends\n      const friends = await storage.getFriendsByUserId(authenticatedUserId);\n      const friendIds = friends.map(friendship => \n        friendship.userId1 === authenticatedUserId ? friendship.userId2 : friendship.userId1\n      );\n      \n      // Include only friends, not the authenticated user themselves\n      const userIds = friendIds;\n      \n      // Get current time info\n      const now = new Date();\n      const currentDay = now.toLocaleDateString('en-US', { weekday: 'long' }).toLowerCase();\n      const currentTime = now.toTimeString().slice(0, 5);\n      \n      const in_class = [];\n      const free = [];\n      \n      // Process each user (self + friends)\n      for (const userId of userIds) {\n        try {\n          const user = await storage.getUser(userId);\n          if (!user) continue;\n          \n          const userStatus = await storage.getUserStatus(userId);\n          const schedules = await storage.getSchedulesByUserId(userId);\n          \n          // Check if user is currently in class\n          let currentClass = null;\n          let nextClass = null;\n          \n          // Find current class\n          for (const schedule of schedules) {\n            if (schedule.days.includes(currentDay) && \n                schedule.startTime <= currentTime && \n                schedule.endTime >= currentTime) {\n              currentClass = `${schedule.courseCode}: ${schedule.courseName}`;\n              break;\n            }\n          }\n          \n          // Find next class today\n          const todaySchedules = schedules.filter(s => s.days.includes(currentDay));\n          const futureSchedules = todaySchedules.filter(s => s.startTime > currentTime);\n          if (futureSchedules.length > 0) {\n            const nextSchedule = futureSchedules.sort((a, b) => a.startTime.localeCompare(b.startTime))[0];\n            nextClass = `${nextSchedule.courseCode} @ ${nextSchedule.startTime}`;\n          }\n          \n          // Create status board user object\n          const statusUser = {\n            id: user.id,\n            username: user.username,\n            fullName: user.fullName,\n            major: user.major,\n            avatar: user.avatar,\n            manual_status: userStatus?.status || 'free',\n            current_class: currentClass,\n            next_class: nextClass,\n            custom_message: userStatus?.message || null\n          };\n          \n          // Categorize based on manual status: \"in_class\" status -> in_class, all others -> free/available\n          const userManualStatus = userStatus?.status || 'free';\n          if (userManualStatus === 'in_class') {\n            in_class.push(statusUser);\n          } else {\n            free.push(statusUser);\n          }\n        } catch (userError) {\n          console.error(`Error processing user ${userId}:`, userError);\n          // Continue with other users even if one fails\n        }\n      }\n      \n      const statusData = {\n        now: now.toISOString(),\n        in_class,\n        free\n      };\n      \n      res.json(statusData);\n    } catch (error: any) {\n      console.error('Get status error:', error);\n      res.status(500).json({ error: error.message });\n    }\n  });\n\n  // Get study partner recommendations\n  app.get('/api/recommendations/:userId', requireAuth, async (req, res) => {\n    try {\n      const { userId } = req.params;\n      const authenticatedUserId = (req as any).authenticatedUserId;\n      \n      // SECURITY: Users can only get their own recommendations\n      if (userId !== authenticatedUserId) {\n        return res.status(403).json({ error: 'Cannot access other users\\' recommendations' });\n      }\n      \n      // Get smart recommendations using the new algorithm\n      const recommendations = await storage.getStudyPartnerRecommendations(userId, 10);\n      \n      console.log(`Generated ${recommendations.length} recommendations for user ${userId}`);\n      \n      res.json(recommendations);\n    } catch (error: any) {\n      console.error('Get recommendations error:', error);\n      res.status(500).json({ error: error.message });\n    }\n  });\n\n  // Friends API Endpoints\n  \n  // Add friend\n  app.post('/api/friends', requireAuth, async (req, res) => {\n    try {\n      const authenticatedUserId = (req as any).authenticatedUserId;\n      \n      // Validate request body with Zod\n      const validation = addFriendSchema.safeParse(req.body);\n      if (!validation.success) {\n        return res.status(400).json({ \n          error: 'Invalid friend data',\n          details: validation.error.issues\n        });\n      }\n      \n      const { friendId } = validation.data;\n      \n      if (friendId === authenticatedUserId) {\n        return res.status(400).json({ error: 'Cannot add yourself as a friend' });\n      }\n      \n      const newFriendship = await storage.addFriend(authenticatedUserId, friendId);\n      \n      res.json({\n        message: 'Friend added successfully',\n        friendship: newFriendship\n      });\n    } catch (error: any) {\n      console.error('Add friend error:', error);\n      if (error.message === 'Friendship already exists') {\n        return res.status(409).json({ error: error.message });\n      }\n      res.status(500).json({ error: error.message });\n    }\n  });\n\n  // Get user's friends\n  app.get('/api/friends/:userId', requireAuth, async (req, res) => {\n    try {\n      const { userId } = req.params;\n      const authenticatedUserId = (req as any).authenticatedUserId;\n      \n      // SECURITY: Users can only get their own friends list\n      if (userId !== authenticatedUserId) {\n        return res.status(403).json({ error: 'Cannot access other users\\' friends list' });\n      }\n      \n      const friends = await storage.getFriends(userId);\n      \n      res.json(friends);\n    } catch (error: any) {\n      console.error('Get friends error:', error);\n      res.status(500).json({ error: error.message });\n    }\n  });\n\n  // Remove friend\n  app.delete('/api/friends/:friendId', requireAuth, async (req, res) => {\n    try {\n      const { friendId } = req.params;\n      const authenticatedUserId = (req as any).authenticatedUserId;\n      \n      if (!friendId) {\n        return res.status(400).json({ error: 'Friend ID is required' });\n      }\n      \n      if (friendId === authenticatedUserId) {\n        return res.status(400).json({ error: 'Cannot remove yourself as a friend' });\n      }\n      \n      const success = await storage.removeFriend(authenticatedUserId, friendId);\n      \n      if (!success) {\n        return res.status(404).json({ error: 'Friendship not found' });\n      }\n      \n      res.json({\n        message: 'Friend removed successfully'\n      });\n    } catch (error: any) {\n      console.error('Remove friend error:', error);\n      res.status(500).json({ error: error.message });\n    }\n  });\n\n  // Get pending friend requests\n  app.get('/api/friends/requests', requireAuth, async (req, res) => {\n    try {\n      const authenticatedUserId = (req as any).authenticatedUserId;\n      \n      const pendingRequests = await storage.getPendingFriendRequests(authenticatedUserId);\n      \n      res.json(pendingRequests);\n    } catch (error: any) {\n      console.error('Get pending friend requests error:', error);\n      res.status(500).json({ error: error.message });\n    }\n  });\n\n  // Accept friend request\n  app.put('/api/friends/requests/:requestId/accept', requireAuth, async (req, res) => {\n    try {\n      const { requestId } = req.params;\n      const authenticatedUserId = (req as any).authenticatedUserId;\n      \n      if (!requestId) {\n        return res.status(400).json({ error: 'Request ID is required' });\n      }\n      \n      const success = await storage.acceptFriendRequest(requestId, authenticatedUserId);\n      \n      if (!success) {\n        return res.status(404).json({ error: 'Friend request not found or already processed' });\n      }\n      \n      res.json({\n        message: 'Friend request accepted successfully'\n      });\n    } catch (error: any) {\n      console.error('Accept friend request error:', error);\n      res.status(500).json({ error: error.message });\n    }\n  });\n\n  // Reject friend request\n  app.put('/api/friends/requests/:requestId/reject', requireAuth, async (req, res) => {\n    try {\n      const { requestId } = req.params;\n      const authenticatedUserId = (req as any).authenticatedUserId;\n      \n      if (!requestId) {\n        return res.status(400).json({ error: 'Request ID is required' });\n      }\n      \n      const success = await storage.rejectFriendRequest(requestId, authenticatedUserId);\n      \n      if (!success) {\n        return res.status(404).json({ error: 'Friend request not found' });\n      }\n      \n      res.json({\n        message: 'Friend request rejected successfully'\n      });\n    } catch (error: any) {\n      console.error('Reject friend request error:', error);\n      res.status(500).json({ error: error.message });\n    }\n  });\n\n  // Update user manual status\n  app.put('/api/status/:userId', requireAuth, async (req, res) => {\n    try {\n      const { userId } = req.params;\n      const authenticatedUserId = (req as any).authenticatedUserId;\n      \n      // SECURITY: Users can only update their own status\n      if (userId !== authenticatedUserId) {\n        return res.status(403).json({ error: 'Cannot update other users\\' status' });\n      }\n      \n      const { status, message } = req.body;\n      \n      // Validate status against allowed values\n      const validStatuses = [\"studying\", \"free\", \"in_class\", \"busy\", \"tired\", \"social\"];\n      if (!validStatuses.includes(status)) {\n        return res.status(400).json({ error: 'Invalid status value' });\n      }\n      \n      // Store status update in database\n      await storage.updateUserStatus(userId, status, message);\n      \n      console.log('Status updated for user', userId, ':', status, message ? `with message: \"${message}\"` : '');\n      \n      res.json({ \n        success: true, \n        status, \n        message: message || null,\n        updated_at: new Date().toISOString()\n      });\n    } catch (error: any) {\n      console.error('Update status error:', error);\n      res.status(400).json({ error: error.message });\n    }\n  });\n\n  // Test data insertion endpoint (for development/testing)\n  // SECURITY: Protected with authentication and environment checks\n  app.post('/api/test-data/insert', requireAuth, async (req, res) => {\n    try {\n      // SECURITY: Disable in production environment\n      if (process.env.NODE_ENV === 'production') {\n        logWebSocket('warn', 'Test data insert endpoint blocked in production', {\n          userId: (req as any).authenticatedUserId,\n          ip: req.ip\n        });\n        return res.status(403).json({ \n          error: 'Test data endpoints are disabled in production' \n        });\n      }\n      \n      const authenticatedUserId = (req as any).authenticatedUserId;\n      \n      // Import the test data insertion function\n      const { insertTestData } = await import('./test-data');\n      \n      await insertTestData();\n      \n      logWebSocket('info', 'Test data inserted successfully', {\n        userId: authenticatedUserId,\n        action: 'insert_test_data'\n      });\n      \n      res.json({\n        success: true,\n        message: 'Test data inserted successfully'\n      });\n    } catch (error: any) {\n      console.error('Test data insertion error:', error);\n      res.status(500).json({ \n        error: error.message,\n        message: 'Failed to insert test data'\n      });\n    }\n  });\n\n  // Clear test data endpoint (for cleanup)\n  // SECURITY: Protected with authentication and environment checks\n  app.delete('/api/test-data/clear', requireAuth, async (req, res) => {\n    try {\n      // SECURITY: Disable in production environment\n      if (process.env.NODE_ENV === 'production') {\n        logWebSocket('warn', 'Test data clear endpoint blocked in production', {\n          userId: (req as any).authenticatedUserId,\n          ip: req.ip\n        });\n        return res.status(403).json({ \n          error: 'Test data endpoints are disabled in production' \n        });\n      }\n      \n      const authenticatedUserId = (req as any).authenticatedUserId;\n      \n      const { clearTestData } = await import('./test-data');\n      \n      await clearTestData();\n      \n      logWebSocket('info', 'Test data cleared successfully', {\n        userId: authenticatedUserId,\n        action: 'clear_test_data'\n      });\n      \n      res.json({\n        success: true,\n        message: 'Test data cleared successfully'\n      });\n    } catch (error: any) {\n      console.error('Test data clearing error:', error);\n      res.status(500).json({ \n        error: error.message,\n        message: 'Failed to clear test data'\n      });\n    }\n  });\n\n  const httpServer = createServer(app);\n\n  // Setup WebSocket server on /ws path\n  const wss = new WebSocketServer({ \n    server: httpServer, \n    path: '/ws'\n  });\n\n  wss.on('connection', (ws, request) => {\n    const connectionId = Math.random().toString(36).substring(7);\n    logWebSocket('info', `New WebSocket connection established`, { connectionId, origin: request.headers.origin });\n    \n    let userId: string | null = null;\n    let isAuthenticated = false;\n\n    ws.on('message', async (data) => {\n      let message: WebSocketMessage | undefined;\n      try {\n        message = JSON.parse(data.toString()) as WebSocketMessage;\n        \n        if (!message || !message.type) {\n          logWebSocket('error', 'Invalid message format - missing type', { message });\n          return;\n        }\n        \n        switch (message.type) {\n          case 'auth':\n            // SECURITY CRITICAL: FIXED WebSocket Authentication Vulnerability\n            // NO LONGER trust client-provided userId - validate session/token instead\n            \n            let authenticatedUserId: string | null = null;\n            \n            // Method 1: Try session-based authentication from cookies\n            authenticatedUserId = validateWebSocketSession(request);\n            \n            // Method 2: If no session, try token-based authentication\n            if (!authenticatedUserId && message.data?.token) {\n              authenticatedUserId = validateAuthToken(message.data.token);\n              if (authenticatedUserId) {\n                logWebSocket('info', 'WebSocket authenticated via token', {\n                  userId: authenticatedUserId,\n                  connectionId\n                });\n              }\n            }\n            \n            // Method 3: For development/demo - validate against session store\n            // This is a fallback that still requires the user to exist and have valid session\n            if (!authenticatedUserId && message.data?.userId) {\n              const requestedUserId = message.data.userId;\n              \n              // SECURITY: Still check if user exists, but this is not sufficient alone\n              const userExists = await storage.getUser(requestedUserId);\n              \n              if (!userExists) {\n                logWebSocket('error', `WebSocket authentication failed - user does not exist`, {\n                  requestedUserId,\n                  connectionId\n                });\n                ws.send(JSON.stringify({\n                  type: 'error',\n                  data: { message: 'Authentication failed - user not found' }\n                }));\n                ws.close(4001, 'Authentication failed');\n                return;\n              }\n              \n              // TEMPORARY: For demo purposes, we'll allow this but log it as a security warning\n              logWebSocket('warn', 'WebSocket using fallback authentication - SECURITY RISK IN PRODUCTION', {\n                requestedUserId,\n                connectionId,\n                warningMessage: 'This should be replaced with proper session/token validation'\n              });\n              \n              authenticatedUserId = requestedUserId;\n            }\n            \n            // Final validation - must have authenticated userId\n            if (!authenticatedUserId) {\n              logWebSocket('error', 'WebSocket authentication failed - no valid session or token', {\n                connectionId,\n                hasSessionCookies: !!request.headers.cookie,\n                hasToken: !!message.data?.token,\n                hasUserId: !!message.data?.userId\n              });\n              ws.send(JSON.stringify({\n                type: 'error',\n                data: { message: 'Authentication required - please log in with valid session or token' }\n              }));\n              ws.close(4001, 'Authentication required');\n              return;\n            }\n            \n            // Verify the authenticated user actually exists\n            const userExists = await storage.getUser(authenticatedUserId);\n            if (!userExists) {\n              logWebSocket('error', `WebSocket authenticated user does not exist in database`, {\n                authenticatedUserId,\n                connectionId\n              });\n              ws.send(JSON.stringify({\n                type: 'error',\n                data: { message: 'Authentication failed - user not found' }\n              }));\n              ws.close(4001, 'Authentication failed');\n              return;\n            }\n            \n            // SUCCESS: Set the authenticated user ID (NOT from client, from validation)\n            userId = authenticatedUserId;\n            isAuthenticated = true;\n            \n            // Remove any existing connection for this user\n            const existingConnection = connectedUsers.get(userId);\n            if (existingConnection && existingConnection.websocket !== ws) {\n              logWebSocket('info', `Replacing existing connection for user ${userId}`);\n              try {\n                existingConnection.websocket.close(1000, 'New connection established');\n              } catch (error) {\n                logWebSocket('warn', `Failed to close existing connection for user ${userId}`, error);\n              }\n            }\n            \n            const now = new Date();\n            connectedUsers.set(userId, { \n              userId, \n              websocket: ws, \n              connectedAt: now,\n              lastActivity: now\n            });\n            \n            logWebSocket('info', `User ${userId} successfully authenticated via WebSocket`, {\n              totalConnections: connectedUsers.size,\n              username: userExists.username\n            });\n            \n            // Notify user they're online\n            sendToUser(userId, {\n              type: 'user_online',\n              data: { status: 'connected', userId: userId }\n            });\n            break;\n\n          case 'message':\n            if (!userId || !isAuthenticated) {\n              logWebSocket('warn', 'Unauthenticated message attempt');\n              ws.send(JSON.stringify({ \n                type: 'error', \n                data: { message: 'User not authenticated' } \n              }));\n              return;\n            }\n\n            // Validate and create message\n            const messageData = insertMessageSchema.parse(message.data);\n            \n            // SECURITY: Verify the authenticated user matches the senderId\n            if (messageData.senderId !== userId) {\n              logWebSocket('error', `Sender ID mismatch`, {\n                authenticatedUserId: userId,\n                claimedSenderId: messageData.senderId,\n                chatId: messageData.chatId\n              });\n              ws.send(JSON.stringify({ \n                type: 'error', \n                data: { message: 'Sender ID mismatch - authentication required' } \n              }));\n              return;\n            }\n            \n            // SECURITY: Verify the user is authorized to send messages in this chat\n            const isAuthorized = await storage.isUserInChat(messageData.chatId, userId);\n            if (!isAuthorized) {\n              logWebSocket('error', `Unauthorized chat access attempt`, {\n                userId,\n                chatId: messageData.chatId\n              });\n              ws.send(JSON.stringify({ \n                type: 'error', \n                data: { message: 'User not authorized to send messages in this chat' } \n              }));\n              return;\n            }\n            \n            const createdMessage = await storage.createMessage(messageData);\n            \n            // Get chat to find the other user\n            const chat = await storage.getChat(messageData.chatId);\n            if (chat) {\n              const otherUserId = chat.user1Id === userId ? chat.user2Id : chat.user1Id;\n              \n              // Get sender info for the message\n              const sender = await storage.getUser(userId);\n              \n              // Send message to both users\n              const messageWithSender = {\n                ...createdMessage,\n                sender: {\n                  id: userId,\n                  username: sender?.username || 'Unknown User',\n                  avatar: sender?.avatar || null\n                }\n              };\n\n              logWebSocket('info', `Broadcasting message to users`, {\n                senderId: userId,\n                recipientId: otherUserId,\n                chatId: messageData.chatId,\n                messageId: createdMessage.id\n              });\n              \n              broadcastToUsers([userId, otherUserId], {\n                type: 'message',\n                data: messageWithSender\n              });\n            } else {\n              logWebSocket('error', `Chat not found for message broadcast`, {\n                chatId: messageData.chatId\n              });\n            }\n            break;\n\n          case 'typing':\n            if (userId && message.data.chatId) {\n              // SECURITY: Verify the user is authorized to send typing indicators in this chat\n              const isAuthorized = await storage.isUserInChat(message.data.chatId, userId);\n              if (!isAuthorized) {\n                ws.send(JSON.stringify({ \n                  type: 'error', \n                  data: { message: 'User not authorized to send typing indicators in this chat' } \n                }));\n                return;\n              }\n              \n              const chat = await storage.getChat(message.data.chatId);\n              if (chat) {\n                const otherUserId = chat.user1Id === userId ? chat.user2Id : chat.user1Id;\n                sendToUser(otherUserId, {\n                  type: 'typing',\n                  data: { userId, isTyping: message.data.isTyping }\n                });\n              }\n            }\n            break;\n\n          case 'read_receipt':\n            if (userId && message.data.messageId && message.data.chatId) {\n              // SECURITY: Verify the user is authorized to mark messages as read in this chat\n              const isAuthorized = await storage.isUserInChat(message.data.chatId, userId);\n              if (!isAuthorized) {\n                ws.send(JSON.stringify({ \n                  type: 'error', \n                  data: { message: 'User not authorized to mark messages as read in this chat' } \n                }));\n                return;\n              }\n              \n              await storage.markMessageAsRead(message.data.messageId, userId);\n              \n              // Get message to find sender\n              const messages = await storage.getMessagesByChatId(message.data.chatId, 1);\n              if (messages.length > 0) {\n                const messageToMark = messages.find(m => m.id === message?.data?.messageId);\n                if (messageToMark) {\n                  sendToUser(messageToMark.senderId, {\n                    type: 'read_receipt',\n                    data: { messageId: message?.data?.messageId, readBy: userId }\n                  });\n                }\n              }\n            }\n            break;\n\n          default:\n            console.log('Unknown message type:', message?.type || 'undefined');\n        }\n      } catch (error: any) {\n        logWebSocket('error', `WebSocket message processing error for user ${userId || 'anonymous'}`, {\n          error: error.message,\n          messageType: message?.type,\n          stack: error.stack\n        });\n        \n        try {\n          ws.send(JSON.stringify({ \n            type: 'error', \n            data: { message: 'Invalid message format or processing error' } \n          }));\n        } catch (sendError) {\n          logWebSocket('error', `Failed to send error message to user ${userId || 'anonymous'}`, sendError);\n        }\n      }\n    });\n\n    ws.on('close', (code, reason) => {\n      if (userId) {\n        const connection = connectedUsers.get(userId);\n        const sessionDuration = connection ? Date.now() - connection.connectedAt.getTime() : 0;\n        \n        connectedUsers.delete(userId);\n        \n        logWebSocket('info', `User ${userId} disconnected from WebSocket`, {\n          code,\n          reason: reason.toString(),\n          sessionDuration: `${Math.round(sessionDuration / 1000)}s`,\n          totalConnections: connectedUsers.size\n        });\n        \n        // Notify other users that this user went offline (optional - can be optimized)\n        // Only notify users in active chats to reduce noise\n        connectedUsers.forEach((connectedUser, connectedUserId) => {\n          if (connectedUserId !== userId) {\n            sendToUser(connectedUserId, {\n              type: 'user_offline',\n              data: { userId }\n            });\n          }\n        });\n      } else {\n        logWebSocket('info', `Anonymous connection closed`, { code, reason: reason.toString() });\n      }\n    });\n\n    ws.on('error', (error) => {\n      logWebSocket('error', `WebSocket error for user ${userId || 'anonymous'}`, {\n        error: error.message,\n        stack: error.stack\n      });\n      \n      // Clean up connection on error\n      if (userId) {\n        connectedUsers.delete(userId);\n      }\n    });\n    \n    // Handle connection ping/pong for keep-alive\n    ws.on('pong', () => {\n      if (userId) {\n        const connection = connectedUsers.get(userId);\n        if (connection) {\n          connection.lastActivity = new Date();\n        }\n      }\n    });\n  });\n\n  return httpServer;\n}\n","size_bytes":52371},"server/storage.ts":{"content":"import { \n  type User, \n  type InsertUser, \n  type Schedule, \n  type InsertSchedule,\n  type Chat,\n  type InsertChat,\n  type Message,\n  type InsertMessage,\n  type Friend,\n  type InsertFriend,\n  type ChatWithLastMessage,\n  type MessageWithSender,\n  type RegisterUser,\n  type LoginUser,\n  type PublicUser,\n  type SearchUser,\n  type FriendWithUser,\n  type StudyPartner,\n  users,\n  schedules,\n  chats,\n  messages,\n  friends,\n  userStatus\n} from \"@shared/schema\";\nimport { eq, and, or, desc, asc, isNull, sql } from \"drizzle-orm\";\nimport { randomUUID } from \"crypto\";\nimport bcrypt from \"bcrypt\";\nimport { db } from \"./db\";\n\n// modify the interface with any CRUD methods\n// you might need\n\nexport interface IStorage {\n  getUser(id: string): Promise<User | undefined>;\n  getUserByUsername(username: string): Promise<User | undefined>;\n  createUser(user: InsertUser): Promise<User>;\n  updateUser(id: string, user: Partial<Omit<InsertUser, 'password'>>): Promise<User | undefined>;\n  \n  // Authentication methods\n  registerUser(data: RegisterUser): Promise<PublicUser>;\n  authenticateUser(username: string, password: string): Promise<PublicUser | null>;\n  getUserById(id: string): Promise<PublicUser | undefined>;\n  \n  // Schedule methods\n  getSchedulesByUserId(userId: string): Promise<Schedule[]>;\n  createSchedule(schedule: InsertSchedule, userId: string): Promise<Schedule>;\n  deleteSchedule(scheduleId: string, userId: string): Promise<boolean>;\n  createMultipleSchedules(schedules: InsertSchedule[], userId: string): Promise<Schedule[]>;\n  \n  // Chat methods\n  createChat(chat: InsertChat): Promise<Chat>;\n  getChat(chatId: string): Promise<Chat | undefined>;\n  getChatBetweenUsers(user1Id: string, user2Id: string): Promise<Chat | undefined>;\n  getChatsByUserId(userId: string): Promise<ChatWithLastMessage[]>;\n  updateChatLastMessage(chatId: string): Promise<void>;\n  isUserInChat(chatId: string, userId: string): Promise<boolean>;\n  \n  // Message methods\n  createMessage(message: InsertMessage): Promise<Message>;\n  getMessagesByChatId(chatId: string, limit?: number, offset?: number): Promise<MessageWithSender[]>;\n  markMessageAsRead(messageId: string, userId: string): Promise<boolean>;\n  getUnreadMessagesCount(chatId: string, userId: string): Promise<number>;\n  \n  // Friends methods\n  searchUsers(query: string, currentUserId: string, limit?: number): Promise<SearchUser[]>;\n  addFriend(userId: string, friendId: string): Promise<Friend>;\n  removeFriend(userId: string, friendId: string): Promise<boolean>;\n  getFriends(userId: string): Promise<FriendWithUser[]>;\n  getFriendsByUserId(userId: string): Promise<Friend[]>;\n  areFriends(userId: string, friendId: string): Promise<boolean>;\n  acceptFriendRequest(requestId: string, authenticatedUserId: string): Promise<boolean>;\n  rejectFriendRequest(requestId: string, authenticatedUserId: string): Promise<boolean>;\n  getPendingFriendRequests(userId: string): Promise<PendingFriendRequest[]>;\n  getUserStatus(userId: string): Promise<{ status: string; message?: string | null } | null>;\n  updateUserStatus(userId: string, status: string, message?: string): Promise<void>;\n  \n  // Recommendation methods\n  getStudyPartnerRecommendations(userId: string, limit?: number): Promise<StudyPartner[]>;\n}\n\nexport class MemStorage implements IStorage {\n  private users: Map<string, User>;\n  private schedules: Map<string, Schedule>;\n  private chats: Map<string, Chat>;\n  private messages: Map<string, Message>;\n  private friends: Map<string, Friend>;\n  private userStatuses: Map<string, any>;\n\n  constructor() {\n    this.users = new Map();\n    this.schedules = new Map();\n    this.chats = new Map();\n    this.messages = new Map();\n    this.friends = new Map();\n    this.userStatuses = new Map();\n  }\n\n  async getUser(id: string): Promise<User | undefined> {\n    return this.users.get(id);\n  }\n\n  async getUserByUsername(username: string): Promise<User | undefined> {\n    return Array.from(this.users.values()).find(\n      (user) => user.username === username,\n    );\n  }\n\n  async createUser(insertUser: InsertUser): Promise<User> {\n    const id = randomUUID();\n    const user: User = { \n      ...insertUser, \n      id,\n      fullName: insertUser.fullName ?? null, // Handle undefined by converting to null\n      avatar: insertUser.avatar ?? null, // Handle undefined by converting to null\n      dorm: insertUser.dorm ?? null,\n      college: insertUser.college ?? null,\n      gender: insertUser.gender ?? null,\n      bio: insertUser.bio ?? null\n    };\n    this.users.set(id, user);\n    return user;\n  }\n\n  async updateUser(id: string, updateData: Partial<Omit<InsertUser, 'password'>>): Promise<User | undefined> {\n    const existingUser = this.users.get(id);\n    if (!existingUser) {\n      return undefined;\n    }\n    \n    // SECURITY: Explicitly reject any password field in update data\n    if ('password' in updateData) {\n      throw new Error('Password updates are not allowed through this method. Use a dedicated password change endpoint.');\n    }\n    \n    const updatedUser: User = {\n      ...existingUser,\n      ...updateData,\n      // Handle optional fields with proper null support for clearing\n      fullName: updateData.hasOwnProperty('fullName') ? (updateData.fullName ?? null) : existingUser.fullName,\n      avatar: updateData.hasOwnProperty('avatar') ? (updateData.avatar ?? null) : existingUser.avatar,\n      dorm: updateData.hasOwnProperty('dorm') ? (updateData.dorm ?? null) : existingUser.dorm,\n      college: updateData.hasOwnProperty('college') ? (updateData.college ?? null) : existingUser.college,\n      gender: updateData.hasOwnProperty('gender') ? (updateData.gender ?? null) : existingUser.gender,\n      bio: updateData.hasOwnProperty('bio') ? (updateData.bio ?? null) : existingUser.bio\n    };\n    \n    this.users.set(id, updatedUser);\n    return updatedUser;\n  }\n\n  async getSchedulesByUserId(userId: string): Promise<Schedule[]> {\n    return Array.from(this.schedules.values()).filter(\n      (schedule) => schedule.userId === userId\n    );\n  }\n\n  async createSchedule(insertSchedule: InsertSchedule, userId: string): Promise<Schedule> {\n    const id = randomUUID();\n    const schedule: Schedule = {\n      ...insertSchedule,\n      id,\n      userId,\n      location: insertSchedule.location ?? null // Handle undefined by converting to null\n    };\n    this.schedules.set(id, schedule);\n    return schedule;\n  }\n\n  async deleteSchedule(scheduleId: string, userId: string): Promise<boolean> {\n    const schedule = this.schedules.get(scheduleId);\n    if (schedule && schedule.userId === userId) {\n      this.schedules.delete(scheduleId);\n      return true;\n    }\n    return false;\n  }\n\n  async createMultipleSchedules(insertSchedules: InsertSchedule[], userId: string): Promise<Schedule[]> {\n    const schedules: Schedule[] = [];\n    for (const insertSchedule of insertSchedules) {\n      const id = randomUUID();\n      const schedule: Schedule = {\n        ...insertSchedule,\n        id,\n        userId,\n        location: insertSchedule.location ?? null // Handle undefined by converting to null\n      };\n      this.schedules.set(id, schedule);\n      schedules.push(schedule);\n    }\n    return schedules;\n  }\n\n  // Chat methods implementation\n  async createChat(insertChat: InsertChat): Promise<Chat> {\n    const id = randomUUID();\n    const now = new Date();\n    const chat: Chat = {\n      ...insertChat,\n      id,\n      createdAt: now,\n      lastMessageAt: now,\n    };\n    this.chats.set(id, chat);\n    return chat;\n  }\n\n  async getChat(chatId: string): Promise<Chat | undefined> {\n    return this.chats.get(chatId);\n  }\n\n  async getChatBetweenUsers(user1Id: string, user2Id: string): Promise<Chat | undefined> {\n    return Array.from(this.chats.values()).find(\n      (chat) => \n        (chat.user1Id === user1Id && chat.user2Id === user2Id) ||\n        (chat.user1Id === user2Id && chat.user2Id === user1Id)\n    );\n  }\n\n  async getChatsByUserId(userId: string): Promise<ChatWithLastMessage[]> {\n    const userChats = Array.from(this.chats.values()).filter(\n      (chat) => chat.user1Id === userId || chat.user2Id === userId\n    );\n\n    const chatsWithDetails: ChatWithLastMessage[] = [];\n    \n    for (const chat of userChats) {\n      const otherUserId = chat.user1Id === userId ? chat.user2Id : chat.user1Id;\n      const otherUser = this.users.get(otherUserId);\n      \n      if (!otherUser) continue;\n      \n      // Get last message for this chat\n      const chatMessages = Array.from(this.messages.values())\n        .filter(msg => msg.chatId === chat.id)\n        .sort((a, b) => new Date(b.sentAt!).getTime() - new Date(a.sentAt!).getTime());\n      \n      const lastMessage = chatMessages[0];\n      \n      // Count unread messages\n      const unreadCount = chatMessages.filter(\n        msg => msg.senderId !== userId && !msg.readAt\n      ).length;\n\n      chatsWithDetails.push({\n        ...chat,\n        lastMessage,\n        otherUser: {\n          id: otherUser.id,\n          username: otherUser.username,\n          avatar: otherUser.avatar,\n        },\n        unreadCount,\n      });\n    }\n\n    // Sort by last message time\n    return chatsWithDetails.sort((a, b) => {\n      const aTime = a.lastMessage?.sentAt || a.createdAt;\n      const bTime = b.lastMessage?.sentAt || b.createdAt;\n      return new Date(bTime!).getTime() - new Date(aTime!).getTime();\n    });\n  }\n\n  async updateChatLastMessage(chatId: string): Promise<void> {\n    const chat = this.chats.get(chatId);\n    if (chat) {\n      chat.lastMessageAt = new Date();\n      this.chats.set(chatId, chat);\n    }\n  }\n\n  // Message methods implementation\n  async createMessage(insertMessage: InsertMessage): Promise<Message> {\n    const id = randomUUID();\n    const now = new Date();\n    const message: Message = {\n      ...insertMessage,\n      id,\n      sentAt: now,\n      readAt: null,\n    };\n    this.messages.set(id, message);\n    \n    // Update chat's last message timestamp\n    await this.updateChatLastMessage(insertMessage.chatId);\n    \n    return message;\n  }\n\n  async getMessagesByChatId(chatId: string, limit = 50, offset = 0): Promise<MessageWithSender[]> {\n    const chatMessages = Array.from(this.messages.values())\n      .filter(msg => msg.chatId === chatId)\n      .sort((a, b) => new Date(a.sentAt!).getTime() - new Date(b.sentAt!).getTime())\n      .slice(offset, offset + limit);\n\n    const messagesWithSender: MessageWithSender[] = [];\n    \n    for (const message of chatMessages) {\n      const sender = this.users.get(message.senderId);\n      if (sender) {\n        messagesWithSender.push({\n          ...message,\n          sender: {\n            id: sender.id,\n            username: sender.username,\n            avatar: sender.avatar,\n          },\n        });\n      }\n    }\n    \n    return messagesWithSender;\n  }\n\n  async markMessageAsRead(messageId: string, userId: string): Promise<boolean> {\n    const message = this.messages.get(messageId);\n    if (message && message.senderId !== userId && !message.readAt) {\n      message.readAt = new Date();\n      this.messages.set(messageId, message);\n      return true;\n    }\n    return false;\n  }\n\n  async getUnreadMessagesCount(chatId: string, userId: string): Promise<number> {\n    return Array.from(this.messages.values()).filter(\n      msg => msg.chatId === chatId && msg.senderId !== userId && !msg.readAt\n    ).length;\n  }\n\n  async isUserInChat(chatId: string, userId: string): Promise<boolean> {\n    const chat = this.chats.get(chatId);\n    return chat ? (chat.user1Id === userId || chat.user2Id === userId) : false;\n  }\n\n  // Authentication methods (stub implementations for MemStorage)\n  async registerUser(data: RegisterUser): Promise<PublicUser> {\n    const user = await this.createUser({\n      username: data.username,\n      password: data.password,\n      major: data.major,\n      avatar: null,\n      dorm: null,\n      college: null,\n      gender: undefined,\n      bio: null,\n    });\n    const { password, ...publicUser } = user;\n    return publicUser as PublicUser;\n  }\n\n  async authenticateUser(username: string, password: string): Promise<PublicUser | null> {\n    const user = await this.getUserByUsername(username);\n    if (!user || user.password !== password) {\n      return null;\n    }\n    const { password: _, ...publicUser } = user;\n    return publicUser as PublicUser;\n  }\n\n  async getUserById(id: string): Promise<PublicUser | undefined> {\n    const user = await this.getUser(id);\n    if (!user) return undefined;\n    const { password, ...publicUser } = user;\n    return publicUser as PublicUser;\n  }\n\n  // Friends methods implementation for MemStorage\n  async searchUsers(query: string, currentUserId: string, limit = 20): Promise<SearchUser[]> {\n    const queryLower = query.toLowerCase();\n    const results: SearchUser[] = [];\n    \n    for (const user of Array.from(this.users.values())) {\n      if (user.id === currentUserId) continue;\n      \n      // Search by username, fullName, or major\n      if (user.username.toLowerCase().includes(queryLower) || \n          (user.fullName && user.fullName.toLowerCase().includes(queryLower)) ||\n          user.major.toLowerCase().includes(queryLower)) {\n        \n        // Check if already friends\n        const isFriend = await this.areFriends(currentUserId, user.id);\n        \n        // Get shared classes (stub - would need schedules comparison)\n        const sharedClasses: string[] = [];\n        \n        results.push({\n          id: user.id,\n          username: user.username,\n          fullName: user.fullName,\n          major: user.major,\n          dorm: user.dorm,\n          college: user.college,\n          bio: user.bio,\n          avatar: user.avatar,\n          isFriend,\n          sharedClasses\n        });\n        \n        if (results.length >= limit) break;\n      }\n    }\n    \n    return results;\n  }\n\n  async addFriend(userId: string, friendId: string): Promise<Friend> {\n    // Check if already friends or pending request exists\n    const existingFriendship = await this.areFriends(userId, friendId);\n    if (existingFriendship) {\n      throw new Error('Users are already friends');\n    }\n    \n    // Check if pending request already exists\n    const existingRequest = await this.getPendingFriendRequest(userId, friendId);\n    if (existingRequest) {\n      throw new Error('Friend request already pending');\n    }\n    \n    const id = randomUUID();\n    const now = new Date();\n    const friend: Friend = {\n      id,\n      userId,\n      friendId,\n      createdAt: now,\n      status: 'pending' // Changed from 'confirmed' to 'pending'\n    };\n    \n    this.friends.set(id, friend);\n    return friend;\n  }\n\n  async removeFriend(userId: string, friendId: string): Promise<boolean> {\n    for (const [id, friend] of Array.from(this.friends.entries())) {\n      if ((friend.userId === userId && friend.friendId === friendId) ||\n          (friend.userId === friendId && friend.friendId === userId)) {\n        this.friends.delete(id);\n        return true;\n      }\n    }\n    return false;\n  }\n\n  async getFriends(userId: string): Promise<FriendWithUser[]> {\n    const userFriends: FriendWithUser[] = [];\n    \n    for (const friend of Array.from(this.friends.values())) {\n      let otherUserId: string | null = null;\n      \n      if (friend.userId === userId) {\n        otherUserId = friend.friendId;\n      } else if (friend.friendId === userId) {\n        otherUserId = friend.userId;\n      }\n      \n      if (otherUserId) {\n        const otherUser = this.users.get(otherUserId);\n        if (otherUser) {\n          const { password, ...publicUser } = otherUser;\n          userFriends.push({\n            id: friend.id,\n            userId: friend.userId,\n            friendId: friend.friendId,\n            createdAt: friend.createdAt,\n            status: friend.status,\n            friend: publicUser as PublicUser\n          });\n        }\n      }\n    }\n    \n    return userFriends;\n  }\n\n  async areFriends(userId: string, friendId: string): Promise<boolean> {\n    for (const friend of Array.from(this.friends.values())) {\n      if (((friend.userId === userId && friend.friendId === friendId) ||\n          (friend.userId === friendId && friend.friendId === userId)) &&\n          friend.status === 'confirmed') { // Only confirmed friendships count\n        return true;\n      }\n    }\n    return false;\n  }\n\n  // Helper method to check if a pending friend request exists\n  async getPendingFriendRequest(fromUserId: string, toUserId: string): Promise<Friend | null> {\n    for (const friend of Array.from(this.friends.values())) {\n      if (friend.userId === fromUserId && friend.friendId === toUserId && friend.status === 'pending') {\n        return friend;\n      }\n    }\n    return null;\n  }\n\n  // Accept a friend request\n  async acceptFriendRequest(requestId: string, authenticatedUserId: string): Promise<boolean> {\n    const request = this.friends.get(requestId);\n    if (!request || request.status !== 'pending') {\n      return false;\n    }\n\n    // Only the friend (recipient) can accept the request\n    if (request.friendId !== authenticatedUserId) {\n      return false;\n    }\n\n    // Update the request to confirmed\n    request.status = 'confirmed';\n    this.friends.set(requestId, request);\n\n    // Create the reciprocal friendship\n    const reciprocalId = randomUUID();\n    const reciprocalFriendship: Friend = {\n      id: reciprocalId,\n      userId: request.friendId,\n      friendId: request.userId,\n      createdAt: new Date(),\n      status: 'confirmed'\n    };\n    \n    this.friends.set(reciprocalId, reciprocalFriendship);\n    return true;\n  }\n\n  // Reject a friend request\n  async rejectFriendRequest(requestId: string, authenticatedUserId: string): Promise<boolean> {\n    const request = this.friends.get(requestId);\n    if (!request || request.status !== 'pending') {\n      return false;\n    }\n\n    // Only the friend (recipient) can reject the request\n    if (request.friendId !== authenticatedUserId) {\n      return false;\n    }\n\n    // Remove the pending request\n    this.friends.delete(requestId);\n    return true;\n  }\n\n  // Get all pending friend requests for a user\n  async getPendingFriendRequests(userId: string): Promise<PendingFriendRequest[]> {\n    const pendingRequests: PendingFriendRequest[] = [];\n    \n    for (const friend of Array.from(this.friends.values())) {\n      if (friend.friendId === userId && friend.status === 'pending') {\n        const requester = await this.getUser(friend.userId);\n        if (requester) {\n          pendingRequests.push({\n            ...friend,\n            requester: {\n              id: requester.id,\n              username: requester.username,\n              fullName: requester.fullName,\n              major: requester.major,\n              avatar: requester.avatar,\n              dorm: requester.dorm,\n              college: requester.college,\n              bio: requester.bio,\n              grade: requester.grade,\n              hobbies: requester.hobbies\n            }\n          });\n        }\n      }\n    }\n    \n    return pendingRequests;\n  }\n\n  async getFriendsByUserId(userId: string): Promise<Friend[]> {\n    return Array.from(this.friends.values()).filter(friend => \n      friend.userId === userId || friend.friendId === userId\n    );\n  }\n\n  async getUserStatus(userId: string): Promise<{ status: string; message?: string | null } | null> {\n    const status = Array.from(this.userStatuses.values()).find((s: any) => s.userId === userId);\n    if (!status) return null;\n    return {\n      status: status.manualStatus,\n      message: status.message || null\n    };\n  }\n\n  async updateUserStatus(userId: string, status: string, message?: string): Promise<void> {\n    const statusId = randomUUID();\n    const statusData = {\n      id: statusId,\n      userId,\n      manualStatus: status,\n      message: message || null,\n      lastUpdated: new Date()\n    };\n    this.userStatuses.set(userId, statusData);\n  }\n\n  // Helper function to extract hobbies from bio text\n  private extractHobbies(bio: string | null): string[] {\n    if (!bio) return [];\n    \n    // Simple keyword extraction for hobbies/interests\n    const hobbyKeywords = [\n      'reading', 'gaming', 'music', 'sports', 'basketball', 'football', 'soccer', \n      'tennis', 'swimming', 'running', 'hiking', 'cooking', 'photography', 'art',\n      'coding', 'programming', 'chess', 'guitar', 'piano', 'movies', 'travel',\n      'dancing', 'singing', 'writing', 'drawing', 'cycling', 'yoga', 'gym',\n      'anime', 'manga', 'books', 'science', 'research', 'technology', 'AI',\n      'machine learning', 'data science'\n    ];\n    \n    const bioLower = bio.toLowerCase();\n    return hobbyKeywords.filter(hobby => bioLower.includes(hobby));\n  }\n\n  // Helper function to calculate major similarity score\n  private calculateMajorSimilarity(major1: string, major2: string): number {\n    if (major1 === major2) return 1.0;\n    \n    // Define major similarity groups\n    const majorGroups = [\n      ['computer science', 'cs', 'software engineering', 'mathematics', 'math', 'engineering', 'physics'],\n      ['economics', 'business', 'finance', 'psychology', 'management', 'marketing'],\n      ['english', 'art', 'history', 'philosophy', 'literature', 'languages', 'liberal arts'],\n      ['biology', 'chemistry', 'medicine', 'pre-med', 'biochemistry', 'neuroscience'],\n      ['political science', 'international relations', 'law', 'public policy']\n    ];\n    \n    const major1Lower = major1.toLowerCase();\n    const major2Lower = major2.toLowerCase();\n    \n    // Find which groups each major belongs to\n    let group1 = -1, group2 = -1;\n    \n    for (let i = 0; i < majorGroups.length; i++) {\n      if (majorGroups[i].some(m => major1Lower.includes(m))) group1 = i;\n      if (majorGroups[i].some(m => major2Lower.includes(m))) group2 = i;\n    }\n    \n    // Calculate similarity based on group membership\n    if (group1 === group2 && group1 !== -1) return 0.8; // Same group\n    if (group1 !== -1 && group2 !== -1) return 0.3; // Different groups\n    return 0.1; // No group match\n  }\n\n  // Smart recommendation algorithm implementation\n  async getStudyPartnerRecommendations(userId: string, limit = 10): Promise<StudyPartner[]> {\n    try {\n      // Import the new match algorithm\n      const { getStudyPartners } = await import('./matchAlgorithm');\n      \n      console.log(`[MemStorage] Using new match algorithm for user ${userId}`);\n      \n      // Prepare snapshot data structure for MemStorage\n      const currentUser = this.users.get(userId);\n      if (!currentUser) return [];\n\n      // Build users map\n      const usersMap = new Map();\n      for (const [id, user] of this.users.entries()) {\n        usersMap.set(id, user);\n      }\n\n      // Build schedules map\n      const schedulesMap = new Map();\n      for (const [id] of this.users.entries()) {\n        const userSchedules = Array.from(this.schedules.values()).filter(\n          schedule => schedule.userId === id\n        );\n        schedulesMap.set(id, userSchedules);\n      }\n\n      // Build statuses map  \n      const statusesMap = new Map();\n      for (const [id] of this.users.entries()) {\n        const userStatus = this.userStatuses.get(id);\n        statusesMap.set(id, userStatus || { status: 'free', message: null });\n      }\n\n      // Prepare snapshot\n      const snapshot = {\n        users: usersMap,\n        schedules: schedulesMap,\n        statuses: statusesMap\n      };\n\n      // Call the new algorithm\n      const recommendations = await getStudyPartners(snapshot, userId, new Date(), limit);\n      \n      // Filter out friends from recommendations\n      const filteredRecommendations = [];\n      for (const rec of recommendations) {\n        const areFriends = await this.areFriends(userId, rec.id);\n        if (!areFriends) {\n          filteredRecommendations.push(rec);\n        }\n      }\n\n      console.log(`[MemStorage] Generated ${filteredRecommendations.length} recommendations using new algorithm for user ${userId}`);\n      return filteredRecommendations;\n\n    } catch (error) {\n      console.error('[MemStorage] Error in getStudyPartnerRecommendations:', error);\n      return [];\n    }\n  }\n}\n\nexport class PostgreSQLStorage implements IStorage {\n  // User methods\n  async getUser(id: string): Promise<User | undefined> {\n    const result = await db.select().from(users).where(eq(users.id, id)).limit(1);\n    return result[0];\n  }\n\n  async getUserByUsername(username: string): Promise<User | undefined> {\n    const result = await db.select().from(users).where(eq(users.username, username)).limit(1);\n    return result[0];\n  }\n\n  async createUser(insertUser: InsertUser): Promise<User> {\n    const result = await db.insert(users).values(insertUser).returning();\n    return result[0];\n  }\n\n  async updateUser(id: string, updateData: Partial<Omit<InsertUser, 'password'>>): Promise<User | undefined> {\n    // SECURITY: Explicitly reject any password field in update data\n    if ('password' in updateData) {\n      throw new Error('Password updates are not allowed through this method. Use a dedicated password change endpoint.');\n    }\n    \n    const result = await db.update(users)\n      .set(updateData)\n      .where(eq(users.id, id))\n      .returning();\n    return result[0];\n  }\n\n  // Authentication methods\n  async registerUser(data: RegisterUser): Promise<PublicUser> {\n    // Check if username already exists\n    const existingUser = await this.getUserByUsername(data.username);\n    if (existingUser) {\n      throw new Error('Username already exists');\n    }\n\n    // Hash password\n    const saltRounds = 12;\n    const hashedPassword = await bcrypt.hash(data.password, saltRounds);\n\n    // Create user\n    const insertData: InsertUser = {\n      username: data.username,\n      password: hashedPassword,\n      fullName: data.fullName || null,\n      major: data.major,\n      avatar: null,\n      dorm: null,\n      college: null,\n      gender: undefined,\n      bio: null,\n    };\n\n    const result = await db.insert(users).values(insertData).returning();\n    const user = result[0];\n\n    // Return user without password\n    const { password, ...publicUser } = user;\n    return publicUser as PublicUser;\n  }\n\n  async authenticateUser(username: string, password: string): Promise<PublicUser | null> {\n    // Get user by username\n    const user = await this.getUserByUsername(username);\n    if (!user) {\n      return null;\n    }\n\n    // Verify password\n    const isPasswordValid = await bcrypt.compare(password, user.password);\n    if (!isPasswordValid) {\n      return null;\n    }\n\n    // Return user without password\n    const { password: _, ...publicUser } = user;\n    return publicUser as PublicUser;\n  }\n\n  async getUserById(id: string): Promise<PublicUser | undefined> {\n    const user = await this.getUser(id);\n    if (!user) {\n      return undefined;\n    }\n\n    // Return user without password\n    const { password, ...publicUser } = user;\n    return publicUser as PublicUser;\n  }\n\n  // Schedule methods\n  async getSchedulesByUserId(userId: string): Promise<Schedule[]> {\n    return await db.select().from(schedules).where(eq(schedules.userId, userId));\n  }\n\n  async createSchedule(insertSchedule: InsertSchedule, userId: string): Promise<Schedule> {\n    const result = await db.insert(schedules).values({\n      ...insertSchedule,\n      userId\n    }).returning();\n    return result[0];\n  }\n\n  async deleteSchedule(scheduleId: string, userId: string): Promise<boolean> {\n    const result = await db.delete(schedules)\n      .where(and(eq(schedules.id, scheduleId), eq(schedules.userId, userId)))\n      .returning();\n    return result.length > 0;\n  }\n\n  async createMultipleSchedules(insertSchedules: InsertSchedule[], userId: string): Promise<Schedule[]> {\n    const schedulesToInsert = insertSchedules.map(schedule => ({\n      ...schedule,\n      userId\n    }));\n    \n    return await db.insert(schedules).values(schedulesToInsert).returning();\n  }\n\n  // Chat methods\n  async createChat(insertChat: InsertChat): Promise<Chat> {\n    const result = await db.insert(chats).values(insertChat).returning();\n    return result[0];\n  }\n\n  async getChat(chatId: string): Promise<Chat | undefined> {\n    const result = await db.select().from(chats).where(eq(chats.id, chatId)).limit(1);\n    return result[0];\n  }\n\n  async getChatBetweenUsers(user1Id: string, user2Id: string): Promise<Chat | undefined> {\n    const result = await db.select().from(chats).where(\n      or(\n        and(eq(chats.user1Id, user1Id), eq(chats.user2Id, user2Id)),\n        and(eq(chats.user1Id, user2Id), eq(chats.user2Id, user1Id))\n      )\n    ).limit(1);\n    return result[0];\n  }\n\n  async getChatsByUserId(userId: string): Promise<ChatWithLastMessage[]> {\n    // Get all chats for the user\n    const userChats = await db.select().from(chats).where(\n      or(eq(chats.user1Id, userId), eq(chats.user2Id, userId))\n    );\n\n    const chatsWithDetails: ChatWithLastMessage[] = [];\n    \n    for (const chat of userChats) {\n      const otherUserId = chat.user1Id === userId ? chat.user2Id : chat.user1Id;\n      \n      // Get other user info\n      const otherUser = await db.select({\n        id: users.id,\n        username: users.username,\n        avatar: users.avatar\n      }).from(users).where(eq(users.id, otherUserId)).limit(1);\n      \n      if (otherUser.length === 0) continue;\n      \n      // Get last message for this chat\n      const lastMessage = await db.select().from(messages)\n        .where(eq(messages.chatId, chat.id))\n        .orderBy(desc(messages.sentAt))\n        .limit(1);\n      \n      // Count unread messages\n      const unreadCountResult = await db.select().from(messages)\n        .where(\n          and(\n            eq(messages.chatId, chat.id),\n            eq(messages.senderId, otherUserId), // Messages from other user\n            isNull(messages.readAt) // Not read\n          )\n        );\n      \n      chatsWithDetails.push({\n        ...chat,\n        lastMessage: lastMessage[0],\n        otherUser: otherUser[0],\n        unreadCount: unreadCountResult.length,\n      });\n    }\n\n    // Sort by last message time\n    return chatsWithDetails.sort((a, b) => {\n      const aTime = a.lastMessage?.sentAt || a.createdAt;\n      const bTime = b.lastMessage?.sentAt || b.createdAt;\n      return new Date(bTime!).getTime() - new Date(aTime!).getTime();\n    });\n  }\n\n  async updateChatLastMessage(chatId: string): Promise<void> {\n    await db.update(chats)\n      .set({ lastMessageAt: new Date() })\n      .where(eq(chats.id, chatId));\n  }\n\n  async isUserInChat(chatId: string, userId: string): Promise<boolean> {\n    const result = await db.select().from(chats).where(\n      and(\n        eq(chats.id, chatId),\n        or(eq(chats.user1Id, userId), eq(chats.user2Id, userId))\n      )\n    ).limit(1);\n    return result.length > 0;\n  }\n\n  // Message methods\n  async createMessage(insertMessage: InsertMessage): Promise<Message> {\n    const result = await db.insert(messages).values(insertMessage).returning();\n    \n    // Update chat's last message timestamp\n    await this.updateChatLastMessage(insertMessage.chatId);\n    \n    return result[0];\n  }\n\n  async getMessagesByChatId(chatId: string, limit = 50, offset = 0): Promise<MessageWithSender[]> {\n    const messagesWithSender = await db.select({\n      id: messages.id,\n      chatId: messages.chatId,\n      senderId: messages.senderId,\n      content: messages.content,\n      messageType: messages.messageType,\n      sentAt: messages.sentAt,\n      readAt: messages.readAt,\n      sender: {\n        id: users.id,\n        username: users.username,\n        avatar: users.avatar\n      }\n    })\n    .from(messages)\n    .innerJoin(users, eq(messages.senderId, users.id))\n    .where(eq(messages.chatId, chatId))\n    .orderBy(asc(messages.sentAt))\n    .limit(limit)\n    .offset(offset);\n\n    return messagesWithSender;\n  }\n\n  async markMessageAsRead(messageId: string, userId: string): Promise<boolean> {\n    // Only allow marking messages as read if the user is not the sender and message is not already read\n    const result = await db.update(messages)\n      .set({ readAt: new Date() })\n      .where(\n        and(\n          eq(messages.id, messageId),\n          // Note: We don't check senderId here because we want to allow marking any message as read\n          // The business logic should handle this in the API layer\n        )\n      )\n      .returning();\n    \n    return result.length > 0;\n  }\n\n  async getUnreadMessagesCount(chatId: string, userId: string): Promise<number> {\n    const result = await db.select().from(messages).where(\n      and(\n        eq(messages.chatId, chatId),\n        // Messages from other users (not from current user)\n        // We'll need to check this at the API level or join with chat to get other user\n        isNull(messages.readAt)\n      )\n    );\n    \n    // Filter out messages from the current user\n    return result.filter(msg => msg.senderId !== userId).length;\n  }\n\n  // Friends methods implementation\n  async searchUsers(query: string, currentUserId: string, limit = 10): Promise<SearchUser[]> {\n    const searchResults = await db.select({\n      id: users.id,\n      username: users.username,\n      fullName: users.fullName,\n      major: users.major,\n      avatar: users.avatar,\n      dorm: users.dorm,\n      college: users.college,\n      bio: users.bio\n    })\n    .from(users)\n    .where(\n      and(\n        // Exclude current user\n        // Use proper SQL function for ILIKE - search username, fullName, and major\n        sql`LOWER(${users.username}) LIKE ${'%' + query.toLowerCase() + '%'} OR LOWER(${users.fullName}) LIKE ${'%' + query.toLowerCase() + '%'} OR LOWER(${users.major}) LIKE ${'%' + query.toLowerCase() + '%'}`,\n        sql`${users.id} != ${currentUserId}`\n      )\n    )\n    .limit(limit);\n\n    // For each user, check if they're already a friend and get shared classes\n    const searchUsersWithDetails: SearchUser[] = [];\n    \n    for (const user of searchResults) {\n      // Check if they're already friends\n      const isFriend = await this.areFriends(currentUserId, user.id);\n      \n      // Get shared classes (simplified for now)\n      const currentUserSchedules = await db.select().from(schedules).where(eq(schedules.userId, currentUserId));\n      const otherUserSchedules = await db.select().from(schedules).where(eq(schedules.userId, user.id));\n      \n      const sharedClasses = currentUserSchedules\n        .filter(current => otherUserSchedules.some(other => other.courseCode === current.courseCode))\n        .map(schedule => schedule.courseCode);\n\n      searchUsersWithDetails.push({\n        ...user,\n        isFriend,\n        sharedClasses\n      });\n    }\n\n    return searchUsersWithDetails;\n  }\n\n  async addFriend(userId: string, friendId: string): Promise<Friend> {\n    // Check if friendship already exists\n    const existingFriendship = await db.select().from(friends).where(\n      or(\n        and(eq(friends.userId, userId), eq(friends.friendId, friendId)),\n        and(eq(friends.userId, friendId), eq(friends.friendId, userId))\n      )\n    );\n\n    if (existingFriendship.length > 0) {\n      throw new Error('Friendship already exists');\n    }\n\n    // Create the friendship\n    const [newFriendship] = await db.insert(friends)\n      .values({\n        userId,\n        friendId,\n        status: 'confirmed'\n      })\n      .returning();\n\n    return newFriendship;\n  }\n\n  async removeFriend(userId: string, friendId: string): Promise<boolean> {\n    const result = await db.delete(friends).where(\n      or(\n        and(eq(friends.userId, userId), eq(friends.friendId, friendId)),\n        and(eq(friends.userId, friendId), eq(friends.friendId, userId))\n      )\n    );\n\n    return (result.rowCount ?? 0) > 0;\n  }\n\n  async getFriends(userId: string): Promise<FriendWithUser[]> {\n    const userFriends = await db.select({\n      id: friends.id,\n      userId: friends.userId,\n      friendId: friends.friendId,\n      createdAt: friends.createdAt,\n      status: friends.status,\n      friend: {\n        id: users.id,\n        username: users.username,\n        major: users.major,\n        avatar: users.avatar,\n        dorm: users.dorm,\n        college: users.college,\n        bio: users.bio\n      }\n    })\n    .from(friends)\n    .innerJoin(users, \n      or(\n        // If current user is userId, get friendId's details\n        and(eq(friends.userId, userId), eq(users.id, friends.friendId)),\n        // If current user is friendId, get userId's details\n        and(eq(friends.friendId, userId), eq(users.id, friends.userId))\n      )\n    )\n    .where(\n      or(\n        eq(friends.userId, userId),\n        eq(friends.friendId, userId)\n      )\n    );\n\n    return userFriends;\n  }\n\n  async getFriendsByUserId(userId: string): Promise<Friend[]> {\n    const result = await db.select().from(friends).where(\n      or(\n        eq(friends.userId, userId),\n        eq(friends.friendId, userId)\n      )\n    );\n    return result;\n  }\n\n  async getUserStatus(userId: string): Promise<{ status: string; message?: string | null } | null> {\n    const result = await db.select().from(userStatus).where(eq(userStatus.userId, userId)).limit(1);\n    if (result.length === 0) {\n      return null;\n    }\n    return {\n      status: result[0].manualStatus,\n      message: result[0].message\n    };\n  }\n\n  async updateUserStatus(userId: string, status: string, message?: string): Promise<void> {\n    // Check if user status record exists\n    const existing = await db.select().from(userStatus).where(eq(userStatus.userId, userId)).limit(1);\n    \n    if (existing.length > 0) {\n      // Update existing record\n      await db.update(userStatus)\n        .set({ \n          manualStatus: status, \n          message: message || null, \n          lastUpdated: sql`now()` \n        })\n        .where(eq(userStatus.userId, userId));\n    } else {\n      // Create new record\n      await db.insert(userStatus)\n        .values({\n          userId,\n          manualStatus: status,\n          message: message || null\n        });\n    }\n  }\n\n  async areFriends(userId: string, friendId: string): Promise<boolean> {\n    const result = await db.select().from(friends).where(\n      or(\n        and(eq(friends.userId, userId), eq(friends.friendId, friendId)),\n        and(eq(friends.userId, friendId), eq(friends.friendId, userId))\n      )\n    );\n\n    return result.length > 0;\n  }\n\n  // Accept a friend request (PostgreSQL implementation)\n  async acceptFriendRequest(requestId: string, authenticatedUserId: string): Promise<boolean> {\n    try {\n      // Get the friend request\n      const result = await db.select().from(friends).where(eq(friends.id, requestId)).limit(1);\n      const request = result[0];\n      \n      if (!request || request.status !== 'pending') {\n        return false;\n      }\n\n      // Only the friend (recipient) can accept the request\n      if (request.friendId !== authenticatedUserId) {\n        return false;\n      }\n\n      // Update the request to confirmed\n      await db.update(friends)\n        .set({ status: 'confirmed' })\n        .where(eq(friends.id, requestId));\n\n      // Create the reciprocal friendship\n      await db.insert(friends).values({\n        userId: request.friendId,\n        friendId: request.userId,\n        status: 'confirmed'\n      });\n      \n      return true;\n    } catch (error) {\n      console.error('Error accepting friend request:', error);\n      return false;\n    }\n  }\n\n  // Reject a friend request (PostgreSQL implementation)\n  async rejectFriendRequest(requestId: string, authenticatedUserId: string): Promise<boolean> {\n    try {\n      // Get the friend request\n      const result = await db.select().from(friends).where(eq(friends.id, requestId)).limit(1);\n      const request = result[0];\n      \n      if (!request || request.status !== 'pending') {\n        return false;\n      }\n\n      // Only the friend (recipient) can reject the request\n      if (request.friendId !== authenticatedUserId) {\n        return false;\n      }\n\n      // Remove the pending request\n      await db.delete(friends).where(eq(friends.id, requestId));\n      \n      return true;\n    } catch (error) {\n      console.error('Error rejecting friend request:', error);\n      return false;\n    }\n  }\n\n  // Get all pending friend requests for a user (PostgreSQL implementation)\n  async getPendingFriendRequests(userId: string): Promise<PendingFriendRequest[]> {\n    try {\n      const result = await db.select({\n        id: friends.id,\n        userId: friends.userId,\n        friendId: friends.friendId,\n        createdAt: friends.createdAt,\n        status: friends.status,\n        requester: {\n          id: users.id,\n          username: users.username,\n          fullName: users.fullName,\n          major: users.major,\n          avatar: users.avatar,\n          dorm: users.dorm,\n          college: users.college,\n          bio: users.bio,\n          grade: users.grade\n        }\n      })\n      .from(friends)\n      .innerJoin(users, eq(friends.userId, users.id))\n      .where(\n        and(\n          eq(friends.friendId, userId),\n          eq(friends.status, 'pending')\n        )\n      );\n      \n      return result.map(row => ({\n        id: row.id,\n        userId: row.userId,\n        friendId: row.friendId,\n        createdAt: row.createdAt,\n        status: row.status,\n        requester: {\n          ...row.requester,\n          hobbies: null // Add hobbies field\n        }\n      }));\n    } catch (error) {\n      console.error('Error getting pending friend requests:', error);\n      return [];\n    }\n  }\n\n  // Helper function to extract hobbies from bio text\n  private extractHobbies(bio: string | null): string[] {\n    if (!bio) return [];\n    \n    // Simple keyword extraction for hobbies/interests\n    const hobbyKeywords = [\n      'reading', 'gaming', 'music', 'sports', 'basketball', 'football', 'soccer', \n      'tennis', 'swimming', 'running', 'hiking', 'cooking', 'photography', 'art',\n      'coding', 'programming', 'chess', 'guitar', 'piano', 'movies', 'travel',\n      'dancing', 'singing', 'writing', 'drawing', 'cycling', 'yoga', 'gym',\n      'anime', 'manga', 'books', 'science', 'research', 'technology', 'AI',\n      'machine learning', 'data science'\n    ];\n    \n    const bioLower = bio.toLowerCase();\n    return hobbyKeywords.filter(hobby => bioLower.includes(hobby));\n  }\n\n  // Helper function to calculate major similarity score\n  private calculateMajorSimilarity(major1: string, major2: string): number {\n    if (major1 === major2) return 1.0;\n    \n    // Define major similarity groups\n    const majorGroups = [\n      ['computer science', 'cs', 'software engineering', 'mathematics', 'math', 'engineering', 'physics'],\n      ['economics', 'business', 'finance', 'psychology', 'management', 'marketing'],\n      ['english', 'art', 'history', 'philosophy', 'literature', 'languages', 'liberal arts'],\n      ['biology', 'chemistry', 'medicine', 'pre-med', 'biochemistry', 'neuroscience'],\n      ['political science', 'international relations', 'law', 'public policy']\n    ];\n    \n    const major1Lower = major1.toLowerCase();\n    const major2Lower = major2.toLowerCase();\n    \n    // Find which groups each major belongs to\n    let group1 = -1, group2 = -1;\n    \n    for (let i = 0; i < majorGroups.length; i++) {\n      if (majorGroups[i].some(m => major1Lower.includes(m))) group1 = i;\n      if (majorGroups[i].some(m => major2Lower.includes(m))) group2 = i;\n    }\n    \n    // Calculate similarity based on group membership\n    if (group1 === group2 && group1 !== -1) return 0.8; // Same group\n    if (group1 !== -1 && group2 !== -1) return 0.3; // Different groups\n    return 0.1; // No group match\n  }\n\n  // Smart recommendation algorithm implementation for PostgreSQL\n  async getStudyPartnerRecommendations(userId: string, limit = 10): Promise<StudyPartner[]> {\n    try {\n      // Import the new match algorithm\n      const { getStudyPartners } = await import('./matchAlgorithm');\n      \n      // Prepare snapshot data structure\n      const currentUser = await this.getUser(userId);\n      if (!currentUser) return [];\n\n      // Get all users\n      const allUsers = await db.select().from(users);\n      const usersMap = new Map();\n      for (const user of allUsers) {\n        usersMap.set(user.id, user);\n      }\n\n      // Get all schedules\n      const schedulesMap = new Map();\n      for (const user of allUsers) {\n        const userSchedules = await this.getSchedulesByUserId(user.id);\n        schedulesMap.set(user.id, userSchedules);\n      }\n\n      // Get all statuses  \n      const statusesMap = new Map();\n      for (const user of allUsers) {\n        try {\n          const userStatus = await this.getUserStatus(user.id);\n          statusesMap.set(user.id, userStatus);\n        } catch (error) {\n          // Default status if not found\n          statusesMap.set(user.id, { status: 'free', message: null });\n        }\n      }\n\n      // Prepare snapshot\n      const snapshot = {\n        users: usersMap,\n        schedules: schedulesMap,\n        statuses: statusesMap\n      };\n\n      // Call the new algorithm\n      const recommendations = await getStudyPartners(snapshot, userId, new Date(), limit);\n      \n      // Filter out friends from recommendations\n      const filteredRecommendations = [];\n      for (const rec of recommendations) {\n        const areFriends = await this.areFriends(userId, rec.id);\n        if (!areFriends) {\n          filteredRecommendations.push(rec);\n        }\n      }\n\n      console.log(`Generated ${filteredRecommendations.length} recommendations using new algorithm for user ${userId}`);\n      return filteredRecommendations;\n\n    } catch (error) {\n      console.error('Error in getStudyPartnerRecommendations:', error);\n      return [];\n    }\n  }\n}\n\nexport const storage = new PostgreSQLStorage();\n","size_bytes":45554},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { sql } from \"drizzle-orm\";\nimport { pgTable, text, varchar, jsonb, timestamp } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\n// Users table\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  username: text(\"username\").notNull().unique(),\n  password: text(\"password\").notNull(),\n  fullName: text(\"full_name\"), // Optional field for complete name display\n  major: text(\"major\").notNull(),\n  grade: text(\"grade\"), // freshman, sophomore, junior, senior, graduate, phd\n  avatar: text(\"avatar\"),\n  dorm: text(\"dorm\"),\n  college: text(\"college\"),\n  gender: text(\"gender\"),\n  bio: text(\"bio\"),\n});\n\n// Schedules table\nexport const schedules = pgTable(\"schedules\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull().references(() => users.id),\n  courseCode: text(\"course_code\").notNull(),\n  courseName: text(\"course_name\").notNull(),\n  days: text(\"days\").array().notNull(), // array of days: [\"monday\", \"tuesday\", \"wednesday\"]\n  startTime: text(\"start_time\").notNull(), // HH:MM format\n  endTime: text(\"end_time\").notNull(), // HH:MM format\n  location: text(\"location\"),\n});\n\n// User status table\nexport const userStatus = pgTable(\"user_status\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull().references(() => users.id),\n  manualStatus: text(\"manual_status\").notNull(), // studying, free, in_class, busy, tired, social\n  message: text(\"message\"), // optional custom status message\n  lastUpdated: timestamp(\"last_updated\").defaultNow(),\n});\n\n// Chats table - stores chat sessions between two users\nexport const chats = pgTable(\"chats\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  user1Id: varchar(\"user1_id\").notNull().references(() => users.id),\n  user2Id: varchar(\"user2_id\").notNull().references(() => users.id),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  lastMessageAt: timestamp(\"last_message_at\").defaultNow(),\n});\n\n// Messages table - stores individual messages within chats\nexport const messages = pgTable(\"messages\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  chatId: varchar(\"chat_id\").notNull().references(() => chats.id),\n  senderId: varchar(\"sender_id\").notNull().references(() => users.id),\n  content: text(\"content\").notNull(),\n  messageType: text(\"message_type\").notNull().default(\"text\"), // text, system\n  sentAt: timestamp(\"sent_at\").defaultNow(),\n  readAt: timestamp(\"read_at\"),\n});\n\n// Friends table - stores friendship/partner relationships\nexport const friends = pgTable(\"friends\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull().references(() => users.id),\n  friendId: varchar(\"friend_id\").notNull().references(() => users.id),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  status: text(\"status\").notNull().default(\"pending\"), // confirmed, pending, blocked\n});\n\n// Status enum for validation\nexport const statusEnum = z.enum([\"studying\", \"free\", \"in_class\", \"busy\", \"tired\", \"social\"]);\n\n// Day enum for validation\nexport const dayEnum = z.enum([\"monday\", \"tuesday\", \"wednesday\", \"thursday\", \"friday\", \"saturday\", \"sunday\"]);\n\n// Gender enum for validation\nexport const genderEnum = z.enum([\"male\", \"female\", \"other\", \"prefer_not_to_say\"]);\n\n// Grade enum for validation\nexport const gradeEnum = z.enum([\"freshman\", \"sophomore\", \"junior\", \"senior\", \"graduate\", \"phd\"]);\n\n// Message type enum for validation\nexport const messageTypeEnum = z.enum([\"text\", \"system\"]);\n\n// Friend status enum for validation\nexport const friendStatusEnum = z.enum([\"confirmed\", \"pending\", \"blocked\"]);\n\n// Schemas\nexport const insertUserSchema = createInsertSchema(users).pick({\n  username: true,\n  password: true,\n  fullName: true,\n  major: true,\n  grade: true,\n  avatar: true,\n  dorm: true,\n  college: true,\n  gender: true,\n  bio: true,\n}).extend({\n  password: z.string().min(8, \"Password must be at least 8 characters\").regex(\n    /^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)/,\n    \"Password must contain at least one lowercase letter, one uppercase letter, and one number\"\n  ),\n  fullName: z.preprocess(\n    (v) => (v === '' ? null : v), \n    z.string().trim().min(1).nullable()\n  ).optional(),\n  gender: genderEnum.optional(),\n  grade: gradeEnum.optional(),\n});\n\n// Authentication-specific schemas\nexport const registerUserSchema = insertUserSchema.pick({\n  username: true,\n  password: true,\n  fullName: true,\n  major: true,\n}).extend({\n  confirmPassword: z.string().min(8),\n}).refine(data => data.password === data.confirmPassword, {\n  message: \"Passwords must match\",\n  path: [\"confirmPassword\"],\n});\n\nexport const loginUserSchema = z.object({\n  username: z.string().min(1, \"Username is required\"),\n  password: z.string().min(1, \"Password is required\"),\n});\n\nexport const updateUserProfileSchema = insertUserSchema.pick({\n  fullName: true,\n  major: true,\n  avatar: true,\n  dorm: true,\n  college: true,\n  gender: true,\n  bio: true,\n}).partial();\n\nexport const insertScheduleSchema = createInsertSchema(schedules).pick({\n  courseCode: true,\n  courseName: true,\n  days: true,\n  startTime: true,\n  endTime: true,\n  location: true,\n}).extend({\n  days: z.array(dayEnum).min(1, \"At least one day must be selected\"),\n  startTime: z.string().regex(/^\\d{2}:\\d{2}$/, \"Time must be in HH:MM format\"),\n  endTime: z.string().regex(/^\\d{2}:\\d{2}$/, \"Time must be in HH:MM format\"),\n});\n\nexport const insertStatusSchema = createInsertSchema(userStatus).pick({\n  manualStatus: true,\n}).extend({\n  manualStatus: statusEnum,\n});\n\nexport const insertChatSchema = createInsertSchema(chats).pick({\n  user1Id: true,\n  user2Id: true,\n});\n\nexport const insertMessageSchema = createInsertSchema(messages).pick({\n  chatId: true,\n  senderId: true,\n  content: true,\n  messageType: true,\n}).extend({\n  messageType: messageTypeEnum.default(\"text\"),\n  content: z.string().min(1).max(1000),\n});\n\nexport const insertFriendSchema = createInsertSchema(friends).pick({\n  userId: true,\n  friendId: true,\n  status: true,\n}).extend({\n  status: friendStatusEnum.default(\"pending\"),\n});\n\n// Friends API validation schemas\nexport const addFriendSchema = z.object({\n  friendId: z.string().min(1, \"Friend ID is required\"),\n});\n\nexport const searchUsersSchema = z.object({\n  q: z.string().min(2, \"Search query must be at least 2 characters\"),\n  limit: z.string().optional().transform(val => val ? parseInt(val, 10) : 10),\n});\n\n// Types\nexport type InsertUser = z.infer<typeof insertUserSchema>;\nexport type User = typeof users.$inferSelect;\n\n// Authentication types\nexport type RegisterUser = z.infer<typeof registerUserSchema>;\nexport type LoginUser = z.infer<typeof loginUserSchema>;\nexport type UpdateUserProfile = z.infer<typeof updateUserProfileSchema>;\n\n// Auth response types\nexport type AuthResponse = {\n  user: Omit<User, 'password'>;\n  message: string;\n};\n\nexport type PublicUser = Omit<User, 'password'>;\n\nexport type InsertSchedule = z.infer<typeof insertScheduleSchema>;\nexport type Schedule = typeof schedules.$inferSelect;\n\nexport type InsertStatus = z.infer<typeof insertStatusSchema>;\nexport type UserStatusType = typeof userStatus.$inferSelect;\n\nexport type InsertChat = z.infer<typeof insertChatSchema>;\nexport type Chat = typeof chats.$inferSelect;\n\nexport type InsertMessage = z.infer<typeof insertMessageSchema>;\nexport type Message = typeof messages.$inferSelect;\n\nexport type InsertFriend = z.infer<typeof insertFriendSchema>;\nexport type Friend = typeof friends.$inferSelect;\n\n// API response types\nexport type StudyPartner = {\n  id: string;\n  username: string;\n  fullName?: string | null;\n  major: string;\n  grade?: string | null;\n  bio?: string | null;\n  avatar: string | null;\n  score: number;\n  shared_classes: string[];\n  current_class?: string;\n  next_class?: string;\n  reason: string;\n};\n\nexport type CurrentStatusResponse = {\n  now: string;\n  in_class: Array<{\n    id: string;\n    username: string;\n    fullName?: string | null;\n    major: string;\n    avatar: string | null;\n    current_class: string;\n    manual_status: string;\n  }>;\n  free: Array<{\n    id: string;\n    username: string;\n    fullName?: string | null;\n    major: string;\n    avatar: string | null;\n    next_class?: string;\n    manual_status: string;\n  }>;\n};\n\n// Chat API response types\nexport type ChatWithLastMessage = Chat & {\n  lastMessage?: Message;\n  otherUser: {\n    id: string;\n    username: string;\n    fullName?: string | null;\n    avatar: string | null;\n  };\n  unreadCount: number;\n};\n\nexport type MessageWithSender = Message & {\n  sender: {\n    id: string;\n    username: string;\n    fullName?: string | null;\n    avatar: string | null;\n  };\n};\n\n// WebSocket message types\nexport type WebSocketMessage = {\n  type: 'auth' | 'message' | 'typing' | 'read_receipt' | 'user_online' | 'user_offline' | 'error';\n  data: any;\n};\n\n// Search and friends API response types\nexport type SearchUser = {\n  id: string;\n  username: string;\n  fullName?: string | null;\n  major: string;\n  avatar: string | null;\n  dorm: string | null;\n  college: string | null;\n  bio: string | null;\n  isFriend: boolean;\n  sharedClasses: string[];\n};\n\nexport type FriendWithUser = Friend & {\n  friend: {\n    id: string;\n    username: string;\n    fullName?: string | null;\n    major: string;\n    avatar: string | null;\n    dorm: string | null;\n    college: string | null;\n    bio: string | null;\n  };\n};\n\n// Type for pending friend requests with requester info\nexport type PendingFriendRequest = Friend & {\n  requester: {\n    id: string;\n    username: string;\n    fullName?: string | null;\n    major: string;\n    avatar: string | null;\n    dorm: string | null;\n    college: string | null;\n    bio: string | null;\n    grade?: string | null;\n    hobbies?: string | null;\n  };\n};\n","size_bytes":9864},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { AuthProvider } from \"@/contexts/AuthContext\";\nimport Home from \"@/pages/Home\";\nimport Profile from \"@/pages/Profile\";\nimport Partners from \"@/pages/Partners\";\nimport Notifications from \"@/pages/Notifications\";\nimport Login from \"@/pages/Login\";\nimport Register from \"@/pages/Register\";\nimport NotFound from \"@/pages/not-found\";\n\nfunction Router() {\n  return (\n    <Switch>\n      <Route path=\"/\" component={Home} />\n      <Route path=\"/profile\" component={Profile} />\n      <Route path=\"/partners\" component={Partners} />\n      <Route path=\"/notifications\" component={Notifications} />\n      <Route path=\"/login\" component={Login} />\n      <Route path=\"/register\" component={Register} />\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <AuthProvider>\n        <TooltipProvider>\n          <Toaster />\n          <Router />\n        </TooltipProvider>\n      </AuthProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":1284},"client/src/index.css":{"content":"@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n/* LIGHT MODE */\n:root {\n  --button-outline: rgba(0,0,0, .10);\n  --badge-outline: rgba(0,0,0, .05);\n\n  /* Automatic computation of border around primary / danger buttons */\n  --opaque-button-border-intensity: -8; /* In terms of percentages */\n\n  /* Backgrounds applied on top of other backgrounds when hovered/active */\n  --elevate-1: rgba(0,0,0, .03);\n  --elevate-2: rgba(0,0,0, .08);\n\n  --background: 0 0% 98%;\n\n  --foreground: 220 15% 25%;\n\n  --border: 0 0% 90%;\n\n  --card: 0 0% 100%;\n\n  --card-foreground: 220 15% 25%;\n\n  --card-border: 0 0% 94%;\n\n  --sidebar: 0 0% 96%;\n\n  --sidebar-foreground: 220 15% 25%;\n\n  --sidebar-border: 0 0% 92%;\n\n  --sidebar-primary: 355 85% 55%;\n\n  --sidebar-primary-foreground: 0 0% 100%;\n\n  --sidebar-accent: 0 0% 94%;\n\n  --sidebar-accent-foreground: 220 15% 25%;\n\n  --sidebar-ring: 355 85% 55%;\n\n  --popover: 0 0% 99%;\n\n  --popover-foreground: 220 15% 25%;\n\n  --popover-border: 0 0% 93%;\n\n  --primary: 355 85% 55%;\n\n  --primary-foreground: 0 0% 100%;\n\n  --secondary: 0 0% 94%;\n\n  --secondary-foreground: 220 15% 25%;\n\n  --muted: 0 0% 95%;\n\n  --muted-foreground: 220 15% 50%;\n\n  --accent: 355 20% 96%;\n\n  --accent-foreground: 220 15% 25%;\n\n  --destructive: 0 80% 60%;\n\n  --destructive-foreground: 0 0% 100%;\n\n  --input: 0 0% 85%;\n  --ring: 355 85% 55%;\n  --chart-1: 120 70% 50%;\n  --chart-2: 200 90% 60%;\n  --chart-3: 30 100% 60%;\n  --chart-4: 280 60% 65%;\n  --chart-5: 320 70% 55%;\n\n  --font-sans: Inter, sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: Menlo, monospace;\n  --radius: .5rem; /* 8px */\n  --shadow-2xs: 0px 1px 2px 0px hsl(0 0% 0% / 0.05);\n  --shadow-xs: 0px 1px 2px 0px hsl(0 0% 0% / 0.05);\n  --shadow-sm: 0px 1px 3px 0px hsl(0 0% 0% / 0.1), 0px 1px 2px -1px hsl(0 0% 0% / 0.1);\n  --shadow: 0px 1px 3px 0px hsl(0 0% 0% / 0.1), 0px 1px 2px -1px hsl(0 0% 0% / 0.1);\n  --shadow-md: 0px 4px 6px -1px hsl(0 0% 0% / 0.1), 0px 2px 4px -2px hsl(0 0% 0% / 0.1);\n  --shadow-lg: 0px 10px 15px -3px hsl(0 0% 0% / 0.1), 0px 4px 6px -4px hsl(0 0% 0% / 0.1);\n  --shadow-xl: 0px 20px 25px -5px hsl(0 0% 0% / 0.1), 0px 8px 10px -6px hsl(0 0% 0% / 0.1);\n  --shadow-2xl: 0px 25px 50px -12px hsl(0 0% 0% / 0.25);\n  --tracking-normal: 0em;\n  --spacing: 0.25rem;\n\n  /* Automatically computed borders - intensity can be controlled by the user by the --opaque-button-border-intensity setting */\n\n  /* Fallback for older browsers */\n  --sidebar-primary-border: hsl(var(--sidebar-primary));\n  --sidebar-primary-border: hsl(from hsl(var(--sidebar-primary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --sidebar-accent-border: hsl(var(--sidebar-accent));\n  --sidebar-accent-border: hsl(from hsl(var(--sidebar-accent)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --primary-border: hsl(var(--primary));\n  --primary-border: hsl(from hsl(var(--primary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --secondary-border: hsl(var(--secondary));\n  --secondary-border: hsl(from hsl(var(--secondary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --muted-border: hsl(var(--muted));\n  --muted-border: hsl(from hsl(var(--muted)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --accent-border: hsl(var(--accent));\n  --accent-border: hsl(from hsl(var(--accent)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --destructive-border: hsl(var(--destructive));\n  --destructive-border: hsl(from hsl(var(--destructive)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n}\n\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n  }\n}\n\n/**\n * Using the elevate system.\n * Automatic contrast adjustment.\n *\n * <element className=\"hover-elevate\" />\n * <element className=\"active-elevate-2\" />\n *\n * // Using the tailwind utility when a data attribute is \"on\"\n * <element className=\"toggle-elevate data-[state=on]:toggle-elevated\" />\n * // Or manually controlling the toggle state\n * <element className=\"toggle-elevate toggle-elevated\" />\n *\n * Elevation systems have to handle many states.\n * - not-hovered, vs. hovered vs. active  (three mutually exclusive states)\n * - toggled or not\n * - focused or not (this is not handled with these utilities)\n *\n * Even without handling focused or not, this is six possible combinations that\n * need to be distinguished from eachother visually.\n */\n@layer utilities {\n\n  /* Hide ugly search cancel button in Chrome until we can style it properly */\n  input[type=\"search\"]::-webkit-search-cancel-button {\n    @apply hidden;\n  }\n\n  /* Placeholder styling for contentEditable div */\n  [contenteditable][data-placeholder]:empty::before {\n    content: attr(data-placeholder);\n    color: hsl(var(--muted-foreground));\n    pointer-events: none;\n  }\n\n  /* .no-default-hover-elevate/no-default-active-elevate is an escape hatch so consumers of\n   * buttons/badges can remove the automatic brightness adjustment on interactions\n   * and program their own. */\n  .no-default-hover-elevate {}\n\n  .no-default-active-elevate {}\n\n\n  /**\n   * Toggleable backgrounds go behind the content. Hoverable/active goes on top.\n   * This way they can stack/compound. Both will overlap the parent's borders!\n   * So borders will be automatically adjusted both on toggle, and hover/active,\n   * and they will be compounded.\n   */\n  .toggle-elevate::before,\n  .toggle-elevate-2::before {\n    content: \"\";\n    pointer-events: none;\n    position: absolute;\n    inset: 0px;\n    /*border-radius: inherit;   match rounded corners */\n    border-radius: inherit;\n    z-index: -1;\n    /* sits behind content but above backdrop */\n  }\n\n  .toggle-elevate.toggle-elevated::before {\n    background-color: var(--elevate-2);\n  }\n\n  /* If there's a 1px border, adjust the inset so that it covers that parent's border */\n  .border.toggle-elevate::before {\n    inset: -1px;\n  }\n\n  /* Does not work on elements with overflow:hidden! */\n  .hover-elevate:not(.no-default-hover-elevate),\n  .active-elevate:not(.no-default-active-elevate),\n  .hover-elevate-2:not(.no-default-hover-elevate),\n  .active-elevate-2:not(.no-default-active-elevate) {\n    position: relative;\n    z-index: 0;\n  }\n\n  .hover-elevate:not(.no-default-hover-elevate)::after,\n  .active-elevate:not(.no-default-active-elevate)::after,\n  .hover-elevate-2:not(.no-default-hover-elevate)::after,\n  .active-elevate-2:not(.no-default-active-elevate)::after {\n    content: \"\";\n    pointer-events: none;\n    position: absolute;\n    inset: 0px;\n    /*border-radius: inherit;   match rounded corners */\n    border-radius: inherit;\n    z-index: 999;\n    /* sits in front of content */\n  }\n\n  .hover-elevate:hover:not(.no-default-hover-elevate)::after,\n  .active-elevate:active:not(.no-default-active-elevate)::after {\n    background-color: var(--elevate-1);\n  }\n\n  .hover-elevate-2:hover:not(.no-default-hover-elevate)::after,\n  .active-elevate-2:active:not(.no-default-active-elevate)::after {\n    background-color: var(--elevate-2);\n  }\n\n  /* If there's a 1px border, adjust the inset so that it covers that parent's border */\n  .border.hover-elevate:not(.no-hover-interaction-elevate)::after,\n  .border.active-elevate:not(.no-active-interaction-elevate)::after,\n  .border.hover-elevate-2:not(.no-hover-interaction-elevate)::after,\n  .border.active-elevate-2:not(.no-active-interaction-elevate)::after,\n  .border.hover-elevate:not(.no-hover-interaction-elevate)::after {\n    inset: -1px;\n  }\n}","size_bytes":7727},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/components/Header.tsx":{"content":"import { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Link, useLocation } from \"wouter\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport StatusIndicator from \"./StatusIndicator\";\nimport { useAuth } from \"@/contexts/AuthContext\";\nimport { PublicUser, PendingFriendRequest } from \"@shared/schema\";\nimport { Bell } from \"lucide-react\";\nimport logoImage from \"@assets/logo_1757730069515.png\";\n\ntype StatusType = \"studying\" | \"free\" | \"in_class\" | \"busy\" | \"tired\" | \"social\";\n\ninterface HeaderProps {\n  userStatus?: StatusType;\n}\n\nexport default function Header({ userStatus = \"free\" }: HeaderProps) {\n  const { user, isAuthenticated, logout } = useAuth();\n  const [, setLocation] = useLocation();\n\n  // Fetch pending friend requests for notification count\n  const { data: pendingRequests } = useQuery<PendingFriendRequest[]>({\n    queryKey: ['/api/friends/requests'],\n    enabled: isAuthenticated && !!user,\n  });\n\n  const pendingCount = pendingRequests?.length || 0;\n\n  const userInitials = user?.username\n    .split(\" \")\n    .map(n => n[0])\n    .join(\"\")\n    .toUpperCase();\n\n  return (\n    <header className=\"sticky top-0 z-50 w-full border-b bg-red-600/95 backdrop-blur supports-[backdrop-filter]:bg-red-600/60 text-white border-red-700/50\">\n      <div className=\"container mx-auto px-3 sm:px-6 lg:px-8\">\n        <div className=\"flex h-14 sm:h-16 items-center justify-between\">\n          {/* Logo */}\n          <div className=\"flex items-center gap-2\">\n            <img src={logoImage} alt=\"SlotSync Logo\" className=\"h-7 w-7 sm:h-8 sm:w-8\" />\n            <h1 className=\"text-base sm:text-lg font-semibold text-white\">SlotSync</h1>\n          </div>\n\n          {/* User section */}\n          <div className=\"flex items-center gap-2 sm:gap-4\">\n            {isAuthenticated && user ? (\n              <div className=\"flex items-center gap-2 sm:gap-3\">\n                {/* User status */}\n                <StatusIndicator status={userStatus} size=\"sm\" />\n                \n                {/* Notifications */}\n                <Link href=\"/notifications\" data-testid=\"link-notifications\">\n                  <div className=\"relative hover-elevate rounded-lg p-2 -m-2 cursor-pointer\">\n                    <Bell className=\"h-5 w-5 text-white\" />\n                    {pendingCount > 0 && (\n                      <Badge \n                        variant=\"destructive\" \n                        className=\"absolute -top-1 -right-1 h-5 w-5 p-0 flex items-center justify-center text-xs font-semibold min-w-[20px]\"\n                      >\n                        {pendingCount > 9 ? '9+' : pendingCount}\n                      </Badge>\n                    )}\n                  </div>\n                </Link>\n                \n                {/* User info */}\n                <Link href=\"/profile\" data-testid=\"link-profile\">\n                  <div className=\"flex items-center gap-2 hover-elevate rounded-lg p-1 -m-1 cursor-pointer\">\n                    <Avatar className=\"h-7 w-7 sm:h-8 sm:w-8\">\n                      {user.avatar && <AvatarImage src={user.avatar} alt={user.username} />}\n                      <AvatarFallback className=\"text-xs\">{userInitials}</AvatarFallback>\n                    </Avatar>\n                    \n                    <div className=\"hidden sm:block\">\n                      <p className=\"text-sm font-medium text-white\">{user.username}</p>\n                      <p className=\"text-xs text-red-100\">{user.major}</p>\n                    </div>\n                  </div>\n                </Link>\n              </div>\n            ) : null}\n          </div>\n        </div>\n      </div>\n    </header>\n  );\n}","size_bytes":3752},"client/src/components/ScheduleForm.tsx":{"content":"import { useState, useRef } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { insertScheduleSchema, InsertSchedule, Schedule, dayEnum } from \"@shared/schema\";\nimport { Plus, X, Clock, Upload, Calendar } from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { extractCourseCode, getCourseColor, formatCourseName } from \"@/utils/courseUtils\";\n\ninterface ScheduleFormProps {\n  schedules: Schedule[];\n  onAddSchedule: (schedule: InsertSchedule) => void;\n  onRemoveSchedule?: (scheduleId: string) => void;\n  onUploadICS?: (schedules: Schedule[]) => void;\n  userId?: string;\n}\n\nconst days = [\n  { value: \"monday\" as const, label: \"Monday\" },\n  { value: \"tuesday\" as const, label: \"Tuesday\" },\n  { value: \"wednesday\" as const, label: \"Wednesday\" },\n  { value: \"thursday\" as const, label: \"Thursday\" },\n  { value: \"friday\" as const, label: \"Friday\" },\n  { value: \"saturday\" as const, label: \"Saturday\" },\n  { value: \"sunday\" as const, label: \"Sunday\" },\n];\n\nexport default function ScheduleForm({ schedules, onAddSchedule, onRemoveSchedule, onUploadICS, userId }: ScheduleFormProps) {\n  const [isFormOpen, setIsFormOpen] = useState(false);\n  const [isEventFormOpen, setIsEventFormOpen] = useState(false);\n  const [isUploading, setIsUploading] = useState(false);\n  const fileInputRef = useRef<HTMLInputElement>(null);\n  const { toast } = useToast();\n  \n  const form = useForm<InsertSchedule>({\n    resolver: zodResolver(insertScheduleSchema),\n    defaultValues: {\n      courseCode: \"\",\n      courseName: \"\",\n      days: [],\n      startTime: \"\",\n      endTime: \"\",\n      location: \"\",\n    },\n  });\n\n  const eventForm = useForm<InsertSchedule>({\n    resolver: zodResolver(insertScheduleSchema),\n    defaultValues: {\n      courseCode: \"EVENT\",\n      courseName: \"\",\n      days: [],\n      startTime: \"\",\n      endTime: \"\",\n      location: \"\",\n    },\n  });\n\n  const onSubmit = (data: InsertSchedule) => {\n    onAddSchedule(data);\n    form.reset();\n    setIsFormOpen(false);\n    console.log('Schedule added:', data);\n  };\n\n  const onEventSubmit = (data: InsertSchedule) => {\n    // Mark this as an event by prefixing course code with \"EVENT-\"\n    const eventData = { ...data, courseCode: `EVENT-${data.courseName.replace(/\\s+/g, '-').toUpperCase()}` };\n    onAddSchedule(eventData);\n    eventForm.reset();\n    setIsEventFormOpen(false);\n    console.log('Event added:', eventData);\n  };\n\n  const formatTime = (time: string) => {\n    const [hours, minutes] = time.split(':');\n    const hour = parseInt(hours);\n    const ampm = hour >= 12 ? 'PM' : 'AM';\n    const displayHour = hour === 0 ? 12 : hour > 12 ? hour - 12 : hour;\n    return `${displayHour}:${minutes} ${ampm}`;\n  };\n\n  const handleFileUpload = async (event: React.ChangeEvent<HTMLInputElement>) => {\n    const file = event.target.files?.[0];\n    if (!file || !userId) return;\n\n    if (!file.name.endsWith('.ics')) {\n      toast({\n        title: \"Invalid file type\",\n        description: \"Please select a .ics calendar file\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    setIsUploading(true);\n    const formData = new FormData();\n    formData.append('icsFile', file);\n\n    try {\n      const response = await fetch(`/api/schedules/${userId}/upload-ics`, {\n        method: 'POST',\n        body: formData,\n      });\n\n      const result = await response.json();\n\n      if (response.ok) {\n        toast({\n          title: \"Success!\",\n          description: result.message,\n        });\n        if (onUploadICS && result.schedules) {\n          onUploadICS(result.schedules);\n        }\n      } else {\n        toast({\n          title: \"Upload failed\",\n          description: result.error || \"Failed to upload file\",\n          variant: \"destructive\",\n        });\n      }\n    } catch (error) {\n      toast({\n        title: \"Error\",\n        description: \"An error occurred while uploading the file\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setIsUploading(false);\n      if (fileInputRef.current) {\n        fileInputRef.current.value = '';\n      }\n    }\n  };\n\n  const handleUploadClick = () => {\n    fileInputRef.current?.click();\n  };\n\n  return (\n    <Card>\n      <CardHeader>\n        <CardTitle className=\"flex flex-col sm:flex-row sm:items-center sm:justify-between gap-3 sm:gap-0\">\n          <div className=\"flex items-center gap-2\">\n            <Clock className=\"h-4 w-4 sm:h-5 sm:w-5\" />\n            <span className=\"text-base sm:text-lg\">My Schedule</span>\n          </div>\n          <div className=\"flex flex-col xs:flex-row gap-2\">\n            <Button \n              size=\"sm\" \n              variant=\"outline\"\n              onClick={handleUploadClick}\n              disabled={isUploading || !userId}\n              data-testid=\"upload-ics-button\"\n              className=\"w-full xs:w-auto text-xs sm:text-sm min-h-[40px] sm:min-h-[32px]\"\n            >\n              <Upload className=\"h-3 w-3 sm:h-4 sm:w-4 mr-1\" />\n              {isUploading ? \"Uploading...\" : \"Import ICS\"}\n            </Button>\n            <Button \n              size=\"sm\" \n              onClick={() => setIsFormOpen(!isFormOpen)}\n              data-testid=\"add-schedule-button\"\n              className=\"w-full xs:w-auto text-xs sm:text-sm min-h-[40px] sm:min-h-[32px] px-2 sm:px-3\"\n            >\n              <Plus className=\"h-3 w-3 sm:h-4 sm:w-4 mr-1\" />\n              Add Course\n            </Button>\n            <Button \n              size=\"sm\" \n              variant=\"outline\"\n              onClick={() => setIsEventFormOpen(!isEventFormOpen)}\n              data-testid=\"add-event-button\"\n              className=\"w-full xs:w-auto text-xs sm:text-sm min-h-[40px] sm:min-h-[32px] px-2 sm:px-3\"\n            >\n              <Plus className=\"h-3 w-3 sm:h-4 sm:w-4 mr-1\" />\n              Add Event\n            </Button>\n          </div>\n        </CardTitle>\n      </CardHeader>\n      \n      <CardContent className=\"space-y-3 sm:space-y-4\">\n        {/* Hidden file input */}\n        <input\n          ref={fileInputRef}\n          type=\"file\"\n          accept=\".ics\"\n          onChange={handleFileUpload}\n          style={{ display: 'none' }}\n          data-testid=\"file-input-ics\"\n        />\n        \n        {/* Schedule List */}\n        <div className=\"space-y-2\">\n          {schedules.length === 0 ? (\n            <p className=\"text-sm text-muted-foreground text-center py-4\">\n              No courses added yet. Add your first course to get started!\n            </p>\n          ) : (\n            schedules.map((schedule) => (\n              <div \n                key={schedule.id} \n                className=\"flex flex-col sm:flex-row sm:items-center justify-between p-3 bg-accent/50 rounded-md gap-2 sm:gap-0\"\n                data-testid={`schedule-item-${schedule.id}`}\n              >\n                <div className=\"flex-1\">\n                  <div className=\"flex flex-wrap items-center gap-2\">\n                    {(() => {\n                      // 优先使用已解析的courseCode，然后尝试从courseName提取，最后使用备用值\n                      const courseCode = schedule.courseCode || extractCourseCode(schedule.courseName) || \"N/A\";\n                      const colorClass = getCourseColor(courseCode);\n                      return (\n                        <Badge \n                          variant=\"outline\" \n                          className={`text-xs font-semibold ${colorClass}`}\n                        >\n                          {courseCode}\n                        </Badge>\n                      );\n                    })()}\n                    <span className=\"font-medium text-sm\">{formatCourseName(schedule.courseName)}</span>\n                  </div>\n                  <p className=\"text-xs text-muted-foreground mt-1\">\n                    {schedule.days.map(day => day.charAt(0).toUpperCase() + day.slice(1)).join(\", \")} • {formatTime(schedule.startTime)} - {formatTime(schedule.endTime)}\n                    {schedule.location && ` • ${schedule.location}`}\n                  </p>\n                </div>\n                {onRemoveSchedule && (\n                  <Button\n                    size=\"sm\"\n                    variant=\"ghost\"\n                    onClick={() => onRemoveSchedule(schedule.id)}\n                    data-testid={`remove-schedule-${schedule.id}`}\n                    className=\"self-end sm:self-center min-h-[36px] min-w-[36px]\"\n                  >\n                    <X className=\"h-4 w-4\" />\n                  </Button>\n                )}\n              </div>\n            ))\n          )}\n        </div>\n\n        {/* Add Course Form */}\n        {isFormOpen && (\n          <Card>\n            <CardContent className=\"p-3 sm:p-4\">\n              <Form {...form}>\n                <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-3 sm:space-y-4\">\n                  <div className=\"grid grid-cols-1 sm:grid-cols-2 gap-3 sm:gap-4\">\n                    <FormField\n                      control={form.control}\n                      name=\"courseCode\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Course Code</FormLabel>\n                          <FormControl>\n                            <Input \n                              placeholder=\"CS 151\" \n                              {...field} \n                              data-testid=\"input-course-code\"\n                            />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                    \n                    <FormField\n                      control={form.control}\n                      name=\"courseName\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Course Name</FormLabel>\n                          <FormControl>\n                            <Input \n                              placeholder=\"Intro to CS\" \n                              {...field}\n                              data-testid=\"input-course-name\"\n                            />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                  </div>\n\n                  <FormField\n                    control={form.control}\n                    name=\"days\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel className=\"flex items-center gap-2\">\n                          <Calendar className=\"h-4 w-4\" />\n                          Days (Select multiple)\n                        </FormLabel>\n                        <div className=\"grid grid-cols-2 sm:grid-cols-3 gap-2 pt-2\" data-testid=\"days-selection\">\n                          {days.map((day) => (\n                            <div key={day.value} className=\"flex items-center space-x-2\">\n                              <Checkbox\n                                id={day.value}\n                                checked={field.value?.includes(day.value) || false}\n                                onCheckedChange={(checked) => {\n                                  const currentValue = field.value || [];\n                                  if (checked) {\n                                    field.onChange([...currentValue, day.value]);\n                                  } else {\n                                    field.onChange(currentValue.filter((v) => v !== day.value));\n                                  }\n                                }}\n                                data-testid={`checkbox-${day.value}`}\n                              />\n                              <label \n                                htmlFor={day.value}\n                                className=\"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n                              >\n                                {day.label}\n                              </label>\n                            </div>\n                          ))}\n                        </div>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  <div className=\"grid grid-cols-1 sm:grid-cols-2 gap-3 sm:gap-4\">\n                    <FormField\n                      control={form.control}\n                      name=\"startTime\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Start Time</FormLabel>\n                          <FormControl>\n                            <Input \n                              type=\"time\" \n                              {...field}\n                              data-testid=\"input-start-time\"\n                            />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                    \n                    <FormField\n                      control={form.control}\n                      name=\"endTime\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>End Time</FormLabel>\n                          <FormControl>\n                            <Input \n                              type=\"time\" \n                              {...field}\n                              data-testid=\"input-end-time\"\n                            />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                  </div>\n\n                  <FormField\n                    control={form.control}\n                    name=\"location\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Location (Optional)</FormLabel>\n                        <FormControl>\n                          <Input \n                            placeholder=\"UC Building, Room 101\" \n                            {...field}\n                            value={field.value || \"\"}\n                            data-testid=\"input-location\"\n                          />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  <div className=\"flex flex-col xs:flex-row gap-2\">\n                    <Button \n                      type=\"submit\" \n                      size=\"sm\"\n                      data-testid=\"submit-schedule\"\n                      className=\"w-full xs:w-auto text-xs sm:text-sm min-h-[40px] sm:min-h-[32px]\"\n                    >\n                      Add Course\n                    </Button>\n                    <Button \n                      type=\"button\" \n                      variant=\"outline\" \n                      size=\"sm\"\n                      onClick={() => setIsFormOpen(false)}\n                      data-testid=\"cancel-schedule\"\n                      className=\"w-full xs:w-auto text-xs sm:text-sm min-h-[40px] sm:min-h-[32px]\"\n                    >\n                      Cancel\n                    </Button>\n                  </div>\n                </form>\n              </Form>\n            </CardContent>\n          </Card>\n        )}\n\n        {/* Event Form */}\n        {isEventFormOpen && (\n          <Card className=\"mt-4\">\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <Calendar className=\"h-4 w-4 sm:h-5 sm:w-5\" />\n                <span className=\"text-base sm:text-lg\">Add New Event</span>\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <Form {...eventForm}>\n                <form onSubmit={eventForm.handleSubmit(onEventSubmit)} className=\"space-y-3 sm:space-y-4\">\n                  <FormField\n                    control={eventForm.control}\n                    name=\"courseName\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Event Name</FormLabel>\n                        <FormControl>\n                          <Input \n                            placeholder=\"Study Group, Meeting, etc.\" \n                            {...field}\n                            data-testid=\"input-event-name\"\n                          />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  <FormField\n                    control={eventForm.control}\n                    name=\"days\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Days</FormLabel>\n                        <div className=\"grid grid-cols-2 sm:grid-cols-4 gap-2\">\n                          {days.map((day) => (\n                            <div key={day.value} className=\"flex items-center space-x-2\">\n                              <Checkbox\n                                id={`event-${day.value}`}\n                                checked={field.value?.includes(day.value as any) || false}\n                                onCheckedChange={(checked) => {\n                                  const currentValue = field.value || [];\n                                  if (checked) {\n                                    field.onChange([...currentValue, day.value]);\n                                  } else {\n                                    field.onChange(currentValue.filter((v) => v !== day.value));\n                                  }\n                                }}\n                                data-testid={`event-checkbox-${day.value}`}\n                              />\n                              <label \n                                htmlFor={`event-${day.value}`}\n                                className=\"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n                              >\n                                {day.label}\n                              </label>\n                            </div>\n                          ))}\n                        </div>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  <div className=\"grid grid-cols-1 sm:grid-cols-2 gap-3 sm:gap-4\">\n                    <FormField\n                      control={eventForm.control}\n                      name=\"startTime\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Start Time</FormLabel>\n                          <FormControl>\n                            <Input \n                              type=\"time\" \n                              {...field}\n                              data-testid=\"input-event-start-time\"\n                            />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                    \n                    <FormField\n                      control={eventForm.control}\n                      name=\"endTime\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>End Time</FormLabel>\n                          <FormControl>\n                            <Input \n                              type=\"time\" \n                              {...field}\n                              data-testid=\"input-event-end-time\"\n                            />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                  </div>\n\n                  <FormField\n                    control={eventForm.control}\n                    name=\"location\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Location (Optional)</FormLabel>\n                        <FormControl>\n                          <Input \n                            placeholder=\"Library, Coffee Shop, etc.\" \n                            {...field}\n                            value={field.value || \"\"}\n                            data-testid=\"input-event-location\"\n                          />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  <div className=\"flex flex-col xs:flex-row gap-2\">\n                    <Button \n                      type=\"submit\" \n                      size=\"sm\"\n                      data-testid=\"submit-event\"\n                      className=\"w-full xs:w-auto text-xs sm:text-sm min-h-[40px] sm:min-h-[32px]\"\n                    >\n                      <Plus className=\"h-3 w-3 sm:h-4 sm:w-4 mr-1\" />\n                      Add Event\n                    </Button>\n                    <Button \n                      type=\"button\"\n                      variant=\"outline\" \n                      size=\"sm\"\n                      onClick={() => setIsEventFormOpen(false)}\n                      data-testid=\"cancel-event\"\n                      className=\"w-full xs:w-auto text-xs sm:text-sm min-h-[40px] sm:min-h-[32px]\"\n                    >\n                      <X className=\"h-3 w-3 sm:h-4 sm:w-4 mr-1\" />\n                      Cancel\n                    </Button>\n                  </div>\n                </form>\n              </Form>\n            </CardContent>\n          </Card>\n        )}\n      </CardContent>\n    </Card>\n  );\n}","size_bytes":22380},"client/src/components/StatusBoard.tsx":{"content":"import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport UserCard from \"./UserCard\";\nimport { CurrentStatusResponse } from \"@shared/schema\";\nimport { Users, Clock, RefreshCw } from \"lucide-react\";\nimport { cn } from \"@/lib/utils\";\n\ninterface StatusBoardProps {\n  statusData: CurrentStatusResponse | null;\n  isLoading?: boolean;\n  onRefresh?: () => void;\n  onUserClick?: (userId: string) => void;\n  className?: string;\n}\n\nexport default function StatusBoard({ \n  statusData, \n  isLoading = false, \n  onRefresh,\n  onUserClick,\n  className \n}: StatusBoardProps) {\n  const formatTime = (isoString: string) => {\n    return new Date(isoString).toLocaleTimeString('en-US', {\n      hour: 'numeric',\n      minute: '2-digit',\n      hour12: true\n    });\n  };\n\n  if (isLoading && !statusData) {\n    return (\n      <div className={cn(\"grid md:grid-cols-2 gap-6\", className)}>\n        <Card>\n          <CardHeader>\n            <div className=\"animate-pulse h-6 bg-muted rounded w-32\"></div>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-3\">\n              {[1, 2, 3].map(i => (\n                <div key={i} className=\"animate-pulse\">\n                  <div className=\"flex items-center gap-3 p-4 bg-muted/50 rounded-md\">\n                    <div className=\"h-10 w-10 bg-muted rounded-full\"></div>\n                    <div className=\"flex-1\">\n                      <div className=\"h-4 bg-muted rounded w-24 mb-2\"></div>\n                      <div className=\"h-3 bg-muted rounded w-16\"></div>\n                    </div>\n                  </div>\n                </div>\n              ))}\n            </div>\n          </CardContent>\n        </Card>\n        <Card>\n          <CardHeader>\n            <div className=\"animate-pulse h-6 bg-muted rounded w-32\"></div>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-3\">\n              {[1, 2, 3].map(i => (\n                <div key={i} className=\"animate-pulse\">\n                  <div className=\"flex items-center gap-3 p-4 bg-muted/50 rounded-md\">\n                    <div className=\"h-10 w-10 bg-muted rounded-full\"></div>\n                    <div className=\"flex-1\">\n                      <div className=\"h-4 bg-muted rounded w-24 mb-2\"></div>\n                      <div className=\"h-3 bg-muted rounded w-16\"></div>\n                    </div>\n                  </div>\n                </div>\n              ))}\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    );\n  }\n\n  return (\n    <div className={cn(\"space-y-3 sm:space-y-4\", className)}>\n      {/* Header with refresh */}\n      <div className=\"flex flex-col sm:flex-row sm:items-center sm:justify-between gap-2 sm:gap-0\">\n        <div className=\"flex items-center gap-2\">\n          <Clock className=\"h-4 w-4 sm:h-5 sm:w-5 text-muted-foreground\" />\n          <span className=\"text-xs sm:text-sm text-muted-foreground\">\n            {statusData ? `Updated at ${formatTime(statusData.now)}` : 'No data'}\n          </span>\n        </div>\n        <Button\n          variant=\"outline\"\n          size=\"sm\"\n          onClick={onRefresh}\n          disabled={isLoading}\n          data-testid=\"refresh-status\"\n          className=\"w-full sm:w-auto text-xs sm:text-sm min-h-[40px] sm:min-h-[32px]\"\n        >\n          <RefreshCw className={cn(\"h-3 w-3 sm:h-4 sm:w-4 mr-2\", isLoading && \"animate-spin\")} />\n          Refresh\n        </Button>\n      </div>\n\n      {/* Status boards */}\n      <div className=\"grid sm:grid-cols-1 md:grid-cols-2 gap-4 sm:gap-6\">\n        {/* In Class */}\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <Users className=\"h-4 w-4 sm:h-5 sm:w-5 text-primary\" />\n              <span className=\"text-base sm:text-lg\">In Class ({statusData?.in_class.length || 0})</span>\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-3\" data-testid=\"in-class-list\">\n              {statusData?.in_class.length === 0 ? (\n                <p className=\"text-sm text-muted-foreground text-center py-8\">\n                  No one is currently in class\n                </p>\n              ) : (\n                statusData?.in_class.map((user) => (\n                  <UserCard\n                    key={user.id}\n                    user={user}\n                    status={user.manual_status as any}\n                    currentClass={user.current_class}\n                    onClick={() => onUserClick?.(user.id)}\n                  />\n                ))\n              )}\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Free */}\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <Users className=\"h-4 w-4 sm:h-5 sm:w-5 text-status-free\" />\n              <span className=\"text-base sm:text-lg\">Available ({statusData?.free.length || 0})</span>\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-3\" data-testid=\"free-list\">\n              {statusData?.free.length === 0 ? (\n                <p className=\"text-sm text-muted-foreground text-center py-8\">\n                  No one is currently available\n                </p>\n              ) : (\n                statusData?.free.map((user) => (\n                  <UserCard\n                    key={user.id}\n                    user={user}\n                    status={user.manual_status as any}\n                    nextClass={user.next_class}\n                    onClick={() => onUserClick?.(user.id)}\n                  />\n                ))\n              )}\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}","size_bytes":5802},"client/src/components/StatusButtons.tsx":{"content":"import { Button } from \"@/components/ui/button\";\nimport { cn } from \"@/lib/utils\";\nimport studyIcon from \"@assets/study_status_1757730011820.png\";\nimport freeIcon from \"@assets/free_status_1757730011817.png\";\nimport inClassIcon from \"@assets/in_class_status_1757730011818.png\";\nimport tiredIcon from \"@assets/tired_status_1757731273641.jpg\";\nimport socialIcon from \"@assets/social_status_1757731273641.jpg\";\nimport busyIcon from \"@assets/busy_status_1757731277664.jpg\";\n\ntype StatusType = \"studying\" | \"free\" | \"in_class\" | \"busy\" | \"tired\" | \"social\";\n\ninterface StatusButtonsProps {\n  currentStatus: StatusType;\n  onStatusChange: (status: StatusType) => void;\n  className?: string;\n}\n\nconst statusConfig: Record<StatusType, { \n  label: string; \n  icon: string;\n  color: string;\n}> = {\n  studying: { label: \"Studying\", icon: studyIcon, color: \"text-status-studying\" },\n  free: { label: \"Free\", icon: freeIcon, color: \"text-status-free\" },\n  in_class: { label: \"In Class\", icon: inClassIcon, color: \"text-status-help\" },\n  busy: { label: \"Busy\", icon: busyIcon, color: \"text-status-busy\" },\n  tired: { label: \"Tired\", icon: tiredIcon, color: \"text-status-tired\" },\n  social: { label: \"Social\", icon: socialIcon, color: \"text-status-social\" },\n};\n\nexport default function StatusButtons({ \n  currentStatus, \n  onStatusChange, \n  className \n}: StatusButtonsProps) {\n  return (\n    <div className={cn(\"grid grid-cols-2 md:grid-cols-3 gap-2\", className)}>\n      {Object.entries(statusConfig).map(([status, config]) => {\n        const isActive = currentStatus === status;\n        \n        return (\n          <Button\n            key={status}\n            variant={isActive ? \"default\" : \"outline\"}\n            size=\"sm\"\n            onClick={() => onStatusChange(status as StatusType)}\n            className={cn(\n              \"flex items-center gap-2 h-auto py-3\",\n              !isActive && \"hover:bg-accent\"\n            )}\n            data-testid={`status-button-${status}`}\n          >\n            <div className=\"flex items-center justify-center w-8 h-8 rounded-full bg-background/20\">\n              <img \n                src={config.icon} \n                alt={config.label}\n                className=\"h-5 w-5 object-contain\" \n              />\n            </div>\n            <span className=\"text-sm font-medium\">{config.label}</span>\n          </Button>\n        );\n      })}\n    </div>\n  );\n}","size_bytes":2390},"client/src/components/StatusIndicator.tsx":{"content":"import { Badge } from \"@/components/ui/badge\";\nimport { cn } from \"@/lib/utils\";\nimport studyIcon from \"@assets/study_status_1757730011820.png\";\nimport freeIcon from \"@assets/free_status_1757730011817.png\";\nimport inClassIcon from \"@assets/in_class_status_1757730011818.png\";\nimport tiredIcon from \"@assets/tired_status_1757731273641.jpg\";\nimport socialIcon from \"@assets/social_status_1757731273641.jpg\";\nimport busyIcon from \"@assets/busy_status_1757731277664.jpg\";\n\ntype StatusType = \"studying\" | \"free\" | \"in_class\" | \"busy\" | \"tired\" | \"social\";\n\ninterface StatusIndicatorProps {\n  status: StatusType;\n  size?: \"sm\" | \"default\" | \"lg\";\n  className?: string;\n  showIcon?: boolean;\n  showLabel?: boolean;\n}\n\nconst statusConfig: Record<StatusType, { \n  label: string; \n  color: string;\n  icon: string;\n}> = {\n  studying: { label: \"Studying\", color: \"bg-status-studying text-white\", icon: studyIcon },\n  free: { label: \"Free\", color: \"bg-status-free text-white\", icon: freeIcon },\n  in_class: { label: \"In Class\", color: \"bg-status-help text-white\", icon: inClassIcon },\n  busy: { label: \"Busy\", color: \"bg-status-busy text-white\", icon: busyIcon },\n  tired: { label: \"Tired\", color: \"bg-status-tired text-white\", icon: tiredIcon },\n  social: { label: \"Social\", color: \"bg-status-social text-white\", icon: socialIcon },\n};\n\nconst sizeConfig = {\n  sm: {\n    badge: \"px-2 py-1 text-xs gap-1\",\n    icon: \"h-3 w-3\",\n  },\n  default: {\n    badge: \"px-3 py-1.5 text-sm gap-1.5\",\n    icon: \"h-4 w-4\",\n  },\n  lg: {\n    badge: \"px-4 py-2 text-base gap-2\",\n    icon: \"h-5 w-5\",\n  },\n};\n\nexport default function StatusIndicator({ \n  status, \n  size = \"default\", \n  className,\n  showIcon = true,\n  showLabel = true\n}: StatusIndicatorProps) {\n  const config = statusConfig[status];\n  const sizeStyles = sizeConfig[size];\n  \n  return (\n    <Badge \n      variant=\"secondary\" \n      className={cn(\n        config.color, \n        sizeStyles.badge,\n        \"flex items-center justify-center\",\n        className\n      )}\n      data-testid={`status-${status}`}\n    >\n      {showIcon && (\n        <img \n          src={config.icon} \n          alt={config.label}\n          className={cn(sizeStyles.icon, \"object-contain\")} \n        />\n      )}\n      {showLabel && (\n        <span className=\"font-medium whitespace-nowrap\">{config.label}</span>\n      )}\n    </Badge>\n  );\n}","size_bytes":2349},"client/src/components/StudyPartnerCard.tsx":{"content":"import { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { StudyPartner } from \"@shared/schema\";\nimport { MessageCircle, Users, GraduationCap, Heart, BookOpen } from \"lucide-react\";\nimport { extractCourseCode, getCourseColor } from \"@/utils/courseUtils\";\n\ninterface StudyPartnerCardProps {\n  partner: StudyPartner;\n  onConnect?: (partnerId: string) => void;\n}\n\nexport default function StudyPartnerCard({ partner, onConnect }: StudyPartnerCardProps) {\n  const initials = partner.username\n    .split(\" \")\n    .map(n => n[0])\n    .join(\"\")\n    .toUpperCase();\n\n  // Extract hobbies from bio (same logic as backend)\n  const extractHobbies = (bio: string | null | undefined): string[] => {\n    if (!bio) return [];\n    \n    const hobbyKeywords = [\n      'reading', 'gaming', 'music', 'sports', 'basketball', 'football', 'soccer', \n      'tennis', 'swimming', 'running', 'hiking', 'cooking', 'photography', 'art',\n      'coding', 'programming', 'chess', 'guitar', 'piano', 'movies', 'travel',\n      'dancing', 'singing', 'writing', 'drawing', 'cycling', 'yoga', 'gym',\n      'anime', 'manga', 'books', 'science', 'research', 'technology', 'AI',\n      'machine learning', 'data science'\n    ];\n    \n    const bioLower = bio.toLowerCase();\n    return hobbyKeywords.filter(hobby => bioLower.includes(hobby));\n  };\n\n  const userHobbies = extractHobbies(partner.bio);\n\n  return (\n    <Card className=\"hover-elevate\" data-testid={`study-partner-${partner.id}`}>\n      <CardContent className=\"p-4\">\n        <div className=\"flex items-start gap-3\">\n          <Avatar className=\"h-12 w-12\">\n            {partner.avatar && <AvatarImage src={partner.avatar} alt={partner.username} />}\n            <AvatarFallback>{initials}</AvatarFallback>\n          </Avatar>\n          \n          <div className=\"flex-1 min-w-0\">\n            <div className=\"flex items-center gap-2\">\n              <h3 className=\"font-semibold text-sm truncate\">{partner.username}</h3>\n            </div>\n            \n            {/* User Info Tags */}\n            <div className=\"flex flex-wrap gap-1 mb-2\">\n              {/* Major Tag */}\n              <Badge variant=\"outline\" className=\"text-xs\">\n                <BookOpen className=\"h-3 w-3 mr-1\" />\n                {partner.major}\n              </Badge>\n              \n              {/* Grade Tag */}\n              {partner.grade && (\n                <Badge variant=\"outline\" className=\"text-xs\">\n                  <GraduationCap className=\"h-3 w-3 mr-1\" />\n                  {partner.grade}\n                </Badge>\n              )}\n              \n              {/* Hobby Tags - show up to 3 */}\n              {userHobbies.slice(0, 3).map((hobby, index) => (\n                <Badge key={index} variant=\"secondary\" className=\"text-xs\">\n                  <Heart className=\"h-3 w-3 mr-1\" />\n                  {hobby}\n                </Badge>\n              ))}\n              \n              {/* Show +X more if there are more hobbies */}\n              {userHobbies.length > 3 && (\n                <Badge variant=\"secondary\" className=\"text-xs\">\n                  +{userHobbies.length - 3} more\n                </Badge>\n              )}\n            </div>\n            \n            {partner.shared_classes.length > 0 && (\n              <div className=\"flex items-center gap-1 mb-2\">\n                <Users className=\"h-3 w-3 text-primary\" />\n                <div className=\"flex flex-wrap gap-1\">\n                  {partner.shared_classes.map((course, index) => {\n                    // 尝试提取5位数字课程代号，如果失败则使用前10个字符作为备用\n                    const courseCode = extractCourseCode(course) || course.substring(0, 10);\n                    const colorClass = getCourseColor(courseCode);\n                    return (\n                      <Badge \n                        key={index} \n                        variant=\"outline\" \n                        className={`text-xs font-semibold ${colorClass}`}\n                      >\n                        {courseCode}\n                      </Badge>\n                    );\n                  })}\n                </div>\n              </div>\n            )}\n            \n            {partner.current_class && (\n              <p className=\"text-xs text-primary font-medium mb-1\">\n                Currently in {partner.current_class}\n              </p>\n            )}\n            \n            {partner.next_class && (\n              <p className=\"text-xs text-muted-foreground mb-2\">\n                Next: {partner.next_class}\n              </p>\n            )}\n            \n            <p className=\"text-xs text-foreground mb-3\">{partner.reason}</p>\n            \n            <Button \n              size=\"sm\" \n              onClick={() => onConnect?.(partner.id)}\n              className=\"w-full\"\n              data-testid={`connect-${partner.id}`}\n            >\n              <MessageCircle className=\"h-3 w-3 mr-1\" />\n              Connect\n            </Button>\n          </div>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}","size_bytes":5198},"client/src/components/StudyPartnerRecommendations.tsx":{"content":"import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport StudyPartnerCard from \"./StudyPartnerCard\";\nimport { StudyPartner } from \"@shared/schema\";\nimport { Users, RefreshCw, Filter } from \"lucide-react\";\nimport { cn } from \"@/lib/utils\";\n\ninterface StudyPartnerRecommendationsProps {\n  recommendations: StudyPartner[];\n  isLoading?: boolean;\n  onRefresh?: () => void;\n  onConnect?: (partnerId: string) => void;\n  className?: string;\n}\n\nexport default function StudyPartnerRecommendations({ \n  recommendations, \n  isLoading = false, \n  onRefresh,\n  onConnect,\n  className \n}: StudyPartnerRecommendationsProps) {\n  return (\n    <Card className={cn(className)} data-testid=\"recommendations-card\">\n      <CardHeader>\n        <CardTitle className=\"flex flex-col sm:flex-row sm:items-center sm:justify-between gap-3 sm:gap-0\">\n          <div className=\"flex items-center gap-2\">\n            <Users className=\"h-4 w-4 sm:h-5 sm:w-5 text-primary\" />\n            <span className=\"text-base sm:text-lg\">Study Partners ({recommendations.length})</span>\n          </div>\n          <Button\n            variant=\"outline\"\n            size=\"sm\"\n            onClick={onRefresh}\n            disabled={isLoading}\n            data-testid=\"refresh-recommendations\"\n            className=\"w-full sm:w-auto text-xs sm:text-sm min-h-[40px] sm:min-h-[32px]\"\n          >\n            <RefreshCw className={cn(\"h-3 w-3 sm:h-4 sm:w-4 mr-2\", isLoading && \"animate-spin\")} />\n            Refresh\n          </Button>\n        </CardTitle>\n      </CardHeader>\n      \n      <CardContent>\n        <div className=\"space-y-3 sm:space-y-4\">\n          {isLoading && recommendations.length === 0 ? (\n            <div className=\"space-y-4\">\n              {[1, 2, 3].map(i => (\n                <div key={i} className=\"animate-pulse\">\n                  <div className=\"flex items-start gap-3 p-4 bg-muted/50 rounded-md\">\n                    <div className=\"h-12 w-12 bg-muted rounded-full\"></div>\n                    <div className=\"flex-1\">\n                      <div className=\"h-4 bg-muted rounded w-32 mb-2\"></div>\n                      <div className=\"h-3 bg-muted rounded w-24 mb-2\"></div>\n                      <div className=\"h-3 bg-muted rounded w-48 mb-3\"></div>\n                      <div className=\"h-8 bg-muted rounded w-full\"></div>\n                    </div>\n                  </div>\n                </div>\n              ))}\n            </div>\n          ) : recommendations.length === 0 ? (\n            <div className=\"text-center py-6 sm:py-8\">\n              <Users className=\"h-10 w-10 sm:h-12 sm:w-12 text-muted-foreground mx-auto mb-3 sm:mb-4\" />\n              <h3 className=\"text-base sm:text-lg font-medium mb-2\">No Study Partners Found</h3>\n              <p className=\"text-xs sm:text-sm text-muted-foreground mb-4 px-4\">\n                Try updating your status or adding more courses to your schedule\n              </p>\n              <Button \n                variant=\"outline\" \n                onClick={onRefresh} \n                data-testid=\"refresh-empty\"\n                className=\"w-full sm:w-auto text-xs sm:text-sm min-h-[40px] sm:min-h-[32px]\"\n              >\n                <RefreshCw className=\"h-3 w-3 sm:h-4 sm:w-4 mr-2\" />\n                Refresh Recommendations\n              </Button>\n            </div>\n          ) : (\n            <div className=\"grid gap-4\">\n              {recommendations.map((partner) => (\n                <StudyPartnerCard\n                  key={partner.id}\n                  partner={partner}\n                  onConnect={onConnect}\n                />\n              ))}\n            </div>\n          )}\n        </div>\n      </CardContent>\n    </Card>\n  );\n}","size_bytes":3756},"client/src/components/UserCard.tsx":{"content":"import { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport StatusIndicator from \"./StatusIndicator\";\nimport { User } from \"@shared/schema\";\nimport { cn } from \"@/lib/utils\";\n\ntype StatusType = \"studying\" | \"free\" | \"in_class\" | \"busy\" | \"tired\" | \"social\";\n\ninterface UserCardProps {\n  user: Pick<User, \"id\" | \"username\" | \"major\" | \"avatar\">;\n  status: StatusType;\n  currentClass?: string;\n  nextClass?: string;\n  onClick?: () => void;\n}\n\nexport default function UserCard({ \n  user, \n  status, \n  currentClass, \n  nextClass, \n  onClick \n}: UserCardProps) {\n  const initials = user.username\n    .split(\" \")\n    .map(n => n[0])\n    .join(\"\")\n    .toUpperCase();\n\n  return (\n    <Card \n      className={cn(\n        \"hover-elevate cursor-pointer transition-all duration-200\",\n        onClick && \"cursor-pointer\"\n      )}\n      onClick={onClick}\n      data-testid={`user-card-${user.id}`}\n    >\n      <CardContent className=\"flex items-center gap-3 p-4\">\n        <Avatar className=\"h-10 w-10\">\n          {user.avatar && <AvatarImage src={user.avatar} alt={user.username} />}\n          <AvatarFallback>{initials}</AvatarFallback>\n        </Avatar>\n        \n        <div className=\"flex-1 min-w-0\">\n          <div className=\"flex items-center gap-2\">\n            <h3 className=\"font-medium text-sm truncate\">{user.username}</h3>\n            <StatusIndicator status={status} size=\"default\" showIcon={true} showLabel={false} />\n          </div>\n          \n          <p className=\"text-xs text-muted-foreground truncate\">{user.major}</p>\n          \n          {currentClass && (\n            <p className=\"text-xs text-primary font-medium truncate\">\n              In {currentClass}\n            </p>\n          )}\n          \n          {nextClass && (\n            <p className=\"text-xs text-muted-foreground truncate\">\n              Next: {nextClass}\n            </p>\n          )}\n        </div>\n      </CardContent>\n    </Card>\n  );\n}","size_bytes":2005},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/Home.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { useAuth } from \"@/contexts/AuthContext\";\nimport Header from \"@/components/Header\";\nimport StatusBoard from \"@/components/StatusBoard\"; \nimport StatusDisplay from \"@/components/StatusDisplay\";\nimport ScheduleForm from \"@/components/ScheduleForm\";\nimport StudyPartnerRecommendations from \"@/components/StudyPartnerRecommendations\";\nimport UserDetailModal from \"@/components/UserDetailModal\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { \n  User, \n  Schedule, \n  InsertSchedule, \n  CurrentStatusResponse, \n  StudyPartner,\n  SearchUser,\n  FriendWithUser\n} from \"@shared/schema\";\nimport { Search, Users, UserPlus, UserX, BookOpen, Plus } from \"lucide-react\";\nimport logoImage from \"@assets/logo_1757730069515.png\";\nimport dashboardIcon from \"@assets/dashboard_icon_1757730011816.png\";\nimport scheduleIcon from \"@assets/schedule_icon_1757730011819.png\";\nimport partnersIcon from \"@assets/partners_icon_1757730011818.png\";\n\ntype StatusType = \"studying\" | \"free\" | \"in_class\" | \"busy\" | \"tired\" | \"social\";\n\nfunction useDebounce(value: string, delay: number) {\n  const [debouncedValue, setDebouncedValue] = useState(value);\n\n  useEffect(() => {\n    const handler = setTimeout(() => {\n      setDebouncedValue(value);\n    }, delay);\n\n    return () => {\n      clearTimeout(handler);\n    };\n  }, [value, delay]);\n\n  return debouncedValue;\n}\n\nexport default function Home() {\n  const { user, isAuthenticated, isLoading } = useAuth();\n  const { toast } = useToast();\n  const [manualStatus, setManualStatus] = useState<StatusType | null>(null);\n  const [manualMessage, setManualMessage] = useState<string | undefined>(undefined);\n  // Remove state since we're using react-query now\n  \n  // User detail modal state\n  const [selectedUser, setSelectedUser] = useState<User | null>(null);\n  const [isModalOpen, setIsModalOpen] = useState(false);\n  \n  // Partner search states\n  const [partnerSearchQuery, setPartnerSearchQuery] = useState(\"\");\n  const [isAddFriendDialogOpen, setIsAddFriendDialogOpen] = useState(false);\n  const [friendUsernameSearch, setFriendUsernameSearch] = useState(\"\");\n  const debouncedPartnerSearch = useDebounce(partnerSearchQuery, 300);\n  const debouncedFriendSearch = useDebounce(friendUsernameSearch, 300);\n\n  // Real API calls for status and recommendations\n  const { data: statusData, isLoading: isStatusLoading, refetch: refetchStatus } = useQuery({\n    queryKey: ['/api/status'],\n    enabled: !!user,\n  });\n\n  const { data: recommendations, isLoading: isRecommendationsLoading, refetch: refetchRecommendations } = useQuery({\n    queryKey: ['/api/recommendations', user?.id],\n    enabled: !!user,\n  });\n\n  const { data: schedules, refetch: refetchSchedules } = useQuery({\n    queryKey: ['/api/schedules', user?.id],\n    enabled: !!user,\n  });\n\n  // Partner search queries\n  const { data: partnerSearchResults = [], isLoading: isPartnerSearching } = useQuery<SearchUser[]>({\n    queryKey: ['/api/users/search', debouncedPartnerSearch],\n    enabled: debouncedPartnerSearch.length >= 2,\n    queryFn: async () => {\n      const res = await fetch(`/api/users/search?q=${encodeURIComponent(debouncedPartnerSearch)}`, {\n        credentials: 'include'\n      });\n      if (!res.ok) {\n        throw new Error(`${res.status}: ${res.statusText}`);\n      }\n      return res.json();\n    }\n  });\n\n  // Search users for dialog\n  const { data: dialogSearchResults = [], isLoading: isDialogSearching } = useQuery<SearchUser[]>({\n    queryKey: ['/api/users/search', 'dialog', debouncedFriendSearch],\n    enabled: debouncedFriendSearch.length >= 1 && isAddFriendDialogOpen,\n    queryFn: async () => {\n      const res = await fetch(`/api/users/search?q=${encodeURIComponent(debouncedFriendSearch)}`, {\n        credentials: 'include'\n      });\n      if (!res.ok) {\n        throw new Error(`${res.status}: ${res.statusText}`);\n      }\n      return res.json();\n    }\n  });\n\n  // Get friends list\n  const { data: friends = [], isLoading: isLoadingFriends } = useQuery<FriendWithUser[]>({\n    queryKey: ['/api/friends', user?.id],\n    enabled: !!user?.id,\n    queryFn: async () => {\n      if (!user?.id) throw new Error('User ID not available');\n      const res = await fetch(`/api/friends/${user.id}`, {\n        credentials: 'include'\n      });\n      if (!res.ok) {\n        throw new Error(`${res.status}: ${res.statusText}`);\n      }\n      return res.json();\n    }\n  });\n\n  // Auto-refresh status every 30 seconds\n  useEffect(() => {\n    if (!user) return;\n\n    const interval = setInterval(() => {\n      handleRefreshStatus();\n    }, 30000);\n\n    return () => clearInterval(interval);\n  }, [user]);\n\n\n  // Status update mutation\n  const statusMutation = useMutation({\n    mutationFn: ({ status, message }: { status: StatusType, message?: string }) => \n      apiRequest('PUT', `/api/status/${user?.id}`, { status, message }),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/status'] });\n    },\n  });\n\n  // Add friend mutation\n  const addFriendMutation = useMutation({\n    mutationFn: async (friendId: string) => {\n      return apiRequest('POST', `/api/friends`, { friendId });\n    },\n    onSuccess: (data, friendId) => {\n      toast({\n        title: \"Friend added successfully\",\n        description: \"They have been added to your friends list.\"\n      });\n      \n      // Close dialog and reset search\n      setIsAddFriendDialogOpen(false);\n      setFriendUsernameSearch(\"\");\n      \n      // Invalidate and refetch queries\n      queryClient.invalidateQueries({ queryKey: ['/api/friends'] });\n      queryClient.invalidateQueries({ queryKey: ['/api/users/search'] });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Failed to add friend\",\n        description: error.message || \"An error occurred while adding the friend.\",\n        variant: \"destructive\"\n      });\n    }\n  });\n\n  // Remove friend mutation\n  const removeFriendMutation = useMutation({\n    mutationFn: async (friendId: string) => {\n      return apiRequest('DELETE', `/api/friends/${friendId}`);\n    },\n    onSuccess: (data, friendId) => {\n      toast({\n        title: \"Friend removed\",\n        description: \"They have been removed from your friends list.\"\n      });\n      \n      // Invalidate and refetch queries\n      queryClient.invalidateQueries({ queryKey: ['/api/friends'] });\n      queryClient.invalidateQueries({ queryKey: ['/api/users/search'] });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Failed to remove friend\",\n        description: error.message || \"An error occurred while removing the friend.\",\n        variant: \"destructive\"\n      });\n    }\n  });\n\n  const handleStatusChange = (newStatus: StatusType, customMessage?: string) => {\n    setManualStatus(newStatus);\n    setManualMessage(customMessage);\n    if (user) {\n      statusMutation.mutate({ status: newStatus, message: customMessage });\n    }\n  };\n\n  // Schedule mutations\n  const addScheduleMutation = useMutation({\n    mutationFn: (newSchedule: InsertSchedule) => \n      apiRequest('POST', `/api/schedules/${user?.id}`, newSchedule),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/schedules', user?.id] });\n      queryClient.invalidateQueries({ queryKey: ['/api/status'] });\n      queryClient.invalidateQueries({ queryKey: ['/api/recommendations', user?.id] });\n    },\n  });\n\n  const handleAddSchedule = (newSchedule: InsertSchedule) => {\n    if (!user) return;\n    addScheduleMutation.mutate(newSchedule);\n  };\n\n  const removeScheduleMutation = useMutation({\n    mutationFn: (scheduleId: string) => \n      apiRequest('DELETE', `/api/schedules/${user?.id}/${scheduleId}`),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/schedules', user?.id] });\n      queryClient.invalidateQueries({ queryKey: ['/api/status'] });\n      queryClient.invalidateQueries({ queryKey: ['/api/recommendations', user?.id] });\n    },\n  });\n\n  const handleRemoveSchedule = (scheduleId: string) => {\n    removeScheduleMutation.mutate(scheduleId);\n  };\n\n  const handleRefreshStatus = () => {\n    refetchStatus();\n  };\n\n  const handleRefreshRecommendations = () => {\n    if (!user) return;\n    refetchRecommendations();\n  };\n\n  const handleAddFriend = (friendId: string) => {\n    addFriendMutation.mutate(friendId);\n  };\n\n  const handleRemoveFriend = (friendId: string) => {\n    removeFriendMutation.mutate(friendId);\n  };\n\n  const isAddingFriend = addFriendMutation.isPending;\n  const isRemovingFriend = removeFriendMutation.isPending;\n\n  const filteredPartnerSearchResults = partnerSearchResults.filter(user => user.id !== user?.id);\n\n  const handleConnect = (partnerId: string) => {\n    console.log('Connecting to partner:', partnerId);\n    \n    // Find the partner in recommendations\n    const partner = (recommendations as StudyPartner[] | undefined)?.find((p: StudyPartner) => p.id === partnerId);\n    \n    if (partner) {\n      // Convert StudyPartner to User object for the modal\n      const partnerUser: User = {\n        id: partner.id,\n        username: partner.username,\n        password: '', // Not needed for modal display\n        fullName: partner.fullName || null,\n        major: partner.major,\n        avatar: partner.avatar,\n        dorm: null, // Not available in StudyPartner\n        college: null,\n        gender: null,\n        bio: null,\n      };\n      \n      setSelectedUser(partnerUser);\n      setIsModalOpen(true);\n    } else {\n      console.error('Partner not found:', partnerId);\n      // Could show a toast notification here\n    }\n  };\n\n  const handleUploadICS = (uploadedSchedules: Schedule[]) => {\n    // Invalidate queries to refresh data after ICS upload\n    queryClient.invalidateQueries({ queryKey: ['/api/schedules', user?.id] });\n    queryClient.invalidateQueries({ queryKey: ['/api/status'] });\n    queryClient.invalidateQueries({ queryKey: ['/api/recommendations', user?.id] });\n    console.log('ICS uploaded, schedules added:', uploadedSchedules.length);\n  };\n\n  const handleUserClick = (userId: string) => {\n    console.log('User clicked:', userId);\n    \n    // Find user in statusData\n    if (!statusData) return;\n    \n    const statusResponse = statusData as CurrentStatusResponse;\n    const allUsers = [...statusResponse.in_class, ...statusResponse.free];\n    const clickedUser = allUsers.find(u => u.id === userId);\n    \n    if (clickedUser) {\n      // Convert the status response user to a full User object\n      const fullUser: User = {\n        id: clickedUser.id,\n        username: clickedUser.username,\n        password: '', // Not needed for modal display\n        fullName: clickedUser.fullName || null,\n        major: clickedUser.major,\n        avatar: clickedUser.avatar,\n        dorm: null, // These fields aren't in the status response, so setting defaults\n        college: null,\n        gender: null,\n        bio: null,\n      };\n      \n      setSelectedUser(fullUser);\n      setIsModalOpen(true);\n    }\n  };\n\n  const handleCloseModal = () => {\n    setIsModalOpen(false);\n    setSelectedUser(null);\n  };\n\n  // Helper function to get user's status and class info for modal\n  const getUserStatusInfo = (userId: string) => {\n    // First check if this user is in the status data (current users)\n    if (statusData) {\n      const statusResponse = statusData as CurrentStatusResponse;\n      const inClassUser = statusResponse.in_class.find((u: any) => u.id === userId);\n      if (inClassUser) {\n        return {\n          status: inClassUser.manual_status as StatusType,\n          currentClass: inClassUser.current_class,\n          nextClass: undefined\n        };\n      }\n      \n      const freeUser = statusResponse.free.find((u: any) => u.id === userId);\n      if (freeUser) {\n        return {\n          status: freeUser.manual_status as StatusType,\n          currentClass: undefined,\n          nextClass: freeUser.next_class\n        };\n      }\n    }\n    \n    // If not found in status data, check if this is a study partner\n    const partner = (recommendations as StudyPartner[] | undefined)?.find((p: StudyPartner) => p.id === userId);\n    if (partner) {\n      return {\n        status: \"free\" as StatusType, // Default status for partners\n        currentClass: partner.current_class,\n        nextClass: partner.next_class\n      };\n    }\n    \n    return null;\n  };\n\n  // Show loading state while checking authentication\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen bg-background flex items-center justify-center\">\n        <div className=\"text-center\">\n          <div className=\"flex justify-center mb-4\">\n            <img src={logoImage} alt=\"SlotSync Logo\" className=\"h-16 w-16\" />\n          </div>\n          <div className=\"text-lg font-medium mb-2\">Loading SlotSync...</div>\n          <div className=\"text-muted-foreground\">Please wait while we load your account</div>\n        </div>\n      </div>\n    );\n  }\n\n  // Redirect to login if not authenticated\n  if (!isAuthenticated || !user) {\n    return (\n      <div className=\"min-h-screen bg-background\">\n        <Header />\n        <main className=\"container mx-auto px-3 sm:px-6 lg:px-8 py-6 sm:py-8\">\n          <div className=\"max-w-md mx-auto text-center\">\n            <Card>\n              <CardHeader className=\"text-center\">\n                <div className=\"flex justify-center mb-4\">\n                  <img src={logoImage} alt=\"SlotSync Logo\" className=\"h-16 w-16\" />\n                </div>\n                <CardTitle>Welcome to SlotSync</CardTitle>\n                <p className=\"text-sm text-muted-foreground\">\n                  Please sign in to access your dashboard\n                </p>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <Button \n                  className=\"w-full\"\n                  onClick={() => window.location.href = '/login'}\n                  data-testid=\"button-goto-login\"\n                >\n                  Sign In\n                </Button>\n                <Button \n                  variant=\"outline\"\n                  className=\"w-full\"\n                  onClick={() => window.location.href = '/register'}\n                  data-testid=\"button-goto-register\"\n                >\n                  Create Account\n                </Button>\n              </CardContent>\n            </Card>\n          </div>\n        </main>\n      </div>\n    );\n  }\n\n  // Main app for authenticated users\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <Header \n        userStatus={manualStatus || \"free\"}\n      />\n      \n      <main className=\"container mx-auto px-3 sm:px-6 lg:px-8 py-4 sm:py-6\">\n        <Tabs defaultValue=\"dashboard\" className=\"w-full\">\n          <TabsList className=\"grid w-full grid-cols-3 h-auto\">\n            <TabsTrigger value=\"dashboard\" data-testid=\"tab-dashboard\" className=\"flex flex-col sm:flex-row items-center gap-1 sm:gap-2 py-2 px-2 text-xs sm:text-sm\">\n              <img src={dashboardIcon} alt=\"Dashboard\" className=\"h-4 w-4 sm:h-5 sm:w-5\" />\n              Dashboard\n            </TabsTrigger>\n            <TabsTrigger value=\"schedule\" data-testid=\"tab-schedule\" className=\"flex flex-col sm:flex-row items-center gap-1 sm:gap-2 py-2 px-2 text-xs sm:text-sm\">\n              <img src={scheduleIcon} alt=\"Schedule\" className=\"h-4 w-4 sm:h-5 sm:w-5\" />\n              Schedule\n            </TabsTrigger>\n            <TabsTrigger value=\"partners\" data-testid=\"tab-partners\" className=\"flex flex-col sm:flex-row items-center gap-1 sm:gap-2 py-2 px-2 text-xs sm:text-sm\">\n              <img src={partnersIcon} alt=\"Partners\" className=\"h-4 w-4 sm:h-5 sm:w-5\" />\n              Partners\n            </TabsTrigger>\n          </TabsList>\n          \n          <TabsContent value=\"dashboard\" className=\"space-y-4 sm:space-y-6 mt-4 sm:mt-6\">\n            {/* Status Controls */}\n            <Card>\n              <CardHeader>\n                <CardTitle>Your Status</CardTitle>\n                <p className=\"text-sm text-muted-foreground\">\n                  Let others know what you're up to\n                </p>\n              </CardHeader>\n              <CardContent>\n                <StatusDisplay \n                  currentStatus={manualStatus}\n                  currentMessage={manualMessage}\n                  onStatusChange={handleStatusChange}\n                  schedules={(schedules as Schedule[] | undefined) || []}\n                />\n              </CardContent>\n            </Card>\n\n            {/* Status Board */}\n            <StatusBoard\n              statusData={statusData as CurrentStatusResponse | null}\n              isLoading={isStatusLoading}\n              onRefresh={handleRefreshStatus}\n              onUserClick={handleUserClick}\n            />\n          </TabsContent>\n          \n          <TabsContent value=\"schedule\" className=\"space-y-4 sm:space-y-6 mt-4 sm:mt-6\">\n            <ScheduleForm\n              schedules={(schedules as Schedule[] | undefined) || []}\n              onAddSchedule={handleAddSchedule}\n              onRemoveSchedule={handleRemoveSchedule}\n              onUploadICS={handleUploadICS}\n              userId={user?.id}\n            />\n          </TabsContent>\n          \n          <TabsContent value=\"partners\" className=\"space-y-4 sm:space-y-6 mt-4 sm:mt-6\">\n            {/* Search and Add Friends Section */}\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"text-lg flex items-center gap-2\">\n                  <Search className=\"h-5 w-5\" />\n                  Find Study Partners\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-4\">\n                  {/* Main search bar */}\n                  <div className=\"relative\">\n                    <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-muted-foreground\" />\n                    <Input\n                      placeholder=\"Search by username or major...\"\n                      value={partnerSearchQuery}\n                      onChange={(e) => setPartnerSearchQuery(e.target.value)}\n                      className=\"pl-10\"\n                      data-testid=\"input-partner-search\"\n                    />\n                  </div>\n                  \n                  <Separator />\n                  \n                  {/* Quick add friend button */}\n                  <div className=\"flex items-center justify-center\">\n                    <Dialog open={isAddFriendDialogOpen} onOpenChange={setIsAddFriendDialogOpen}>\n                      <DialogTrigger asChild>\n                        <Button \n                          variant=\"outline\" \n                          className=\"w-full\"\n                          data-testid=\"button-add-friend-username\"\n                        >\n                          <UserPlus className=\"h-4 w-4 mr-2\" />\n                          Add Friend by Username\n                        </Button>\n                      </DialogTrigger>\n                      <DialogContent className=\"sm:max-w-md\">\n                        <DialogHeader>\n                          <DialogTitle>Add Friend by Username</DialogTitle>\n                        </DialogHeader>\n                        <div className=\"space-y-4\">\n                          <div className=\"relative\">\n                            <UserPlus className=\"absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-muted-foreground\" />\n                            <Input\n                              placeholder=\"Enter username...\"\n                              value={friendUsernameSearch}\n                              onChange={(e) => setFriendUsernameSearch(e.target.value)}\n                              className=\"pl-10\"\n                              data-testid=\"input-friend-username\"\n                            />\n                          </div>\n                          \n                          {isDialogSearching && debouncedFriendSearch.length >= 1 && (\n                            <p className=\"text-sm text-muted-foreground\">\n                              Searching users...\n                            </p>\n                          )}\n                          \n                          {dialogSearchResults.length > 0 && (\n                            <div className=\"max-h-64 overflow-y-auto space-y-2\">\n                              {dialogSearchResults.filter(searchUser => searchUser.id !== user?.id).map((searchUser: SearchUser) => (\n                                <div key={searchUser.id} className=\"flex items-center gap-3 p-3 border rounded-lg\">\n                                  <Avatar className=\"h-10 w-10\">\n                                    {searchUser.avatar && <AvatarImage src={searchUser.avatar} alt={searchUser.fullName || searchUser.username} />}\n                                    <AvatarFallback>\n                                      {(searchUser.fullName || searchUser.username)\n                                        .split(\" \")\n                                        .map(n => n[0])\n                                        .join(\"\")\n                                        .toUpperCase()}\n                                    </AvatarFallback>\n                                  </Avatar>\n                                  <div className=\"flex-1 min-w-0\">\n                                    <div className=\"flex items-center gap-2\">\n                                      <p className=\"font-medium text-sm truncate\">{searchUser.fullName || searchUser.username}</p>\n                                      {searchUser.fullName && (\n                                        <span className=\"text-xs text-muted-foreground\">@{searchUser.username}</span>\n                                      )}\n                                    </div>\n                                    <p className=\"text-xs text-muted-foreground\">{searchUser.major}</p>\n                                  </div>\n                                  {!searchUser.isFriend ? (\n                                    <Button \n                                      size=\"sm\" \n                                      onClick={() => handleAddFriend(searchUser.id)}\n                                      disabled={isAddingFriend}\n                                      data-testid={`dialog-add-friend-${searchUser.id}`}\n                                    >\n                                      <Plus className=\"h-3 w-3 mr-1\" />\n                                      {isAddingFriend ? \"Adding...\" : \"Add\"}\n                                    </Button>\n                                  ) : (\n                                    <Badge variant=\"secondary\" className=\"text-xs\">\n                                      <Users className=\"h-3 w-3 mr-1\" />\n                                      Friend\n                                    </Badge>\n                                  )}\n                                </div>\n                              ))}\n                            </div>\n                          )}\n                          \n                          {debouncedFriendSearch.length >= 1 && !isDialogSearching && dialogSearchResults.filter(searchUser => searchUser.id !== user?.id).length === 0 && (\n                            <div className=\"text-center py-6\">\n                              <UserX className=\"h-12 w-12 text-muted-foreground mx-auto mb-2\" />\n                              <p className=\"text-sm text-muted-foreground\">No users found with that username</p>\n                            </div>\n                          )}\n                        </div>\n                      </DialogContent>\n                    </Dialog>\n                  </div>\n                  \n                  {/* Search help text */}\n                  {partnerSearchQuery.length > 0 && partnerSearchQuery.length < 2 && (\n                    <p className=\"text-sm text-muted-foreground\">\n                      Type at least 2 characters to search\n                    </p>\n                  )}\n                  \n                  {isPartnerSearching && debouncedPartnerSearch.length >= 2 && (\n                    <p className=\"text-sm text-muted-foreground\">\n                      Searching partners...\n                    </p>\n                  )}\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Search Results */}\n            {filteredPartnerSearchResults.length > 0 && (\n              <Card>\n                <CardHeader>\n                  <div className=\"flex items-center justify-between\">\n                    <CardTitle className=\"text-lg\">Search Results</CardTitle>\n                    <Badge variant=\"outline\">{filteredPartnerSearchResults.length} found</Badge>\n                  </div>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"grid gap-4 md:grid-cols-2\">\n                    {filteredPartnerSearchResults.map((searchUser: SearchUser) => (\n                      <div key={searchUser.id} className=\"border rounded-lg p-4 hover-elevate\" data-testid={`search-result-${searchUser.id}`}>\n                        <div className=\"flex items-start gap-3\">\n                          <Avatar className=\"h-12 w-12\">\n                            {searchUser.avatar && <AvatarImage src={searchUser.avatar} alt={searchUser.fullName || searchUser.username} />}\n                            <AvatarFallback>\n                              {(searchUser.fullName || searchUser.username)\n                                .split(\" \")\n                                .map(n => n[0])\n                                .join(\"\")\n                                .toUpperCase()}\n                            </AvatarFallback>\n                          </Avatar>\n                          \n                          <div className=\"flex-1 min-w-0\">\n                            <div className=\"flex items-center gap-2 mb-2\">\n                              <h3 className=\"font-semibold text-sm truncate\">{searchUser.fullName || searchUser.username}</h3>\n                              {searchUser.fullName && (\n                                <span className=\"text-xs text-muted-foreground\">@{searchUser.username}</span>\n                              )}\n                              {searchUser.isFriend && (\n                                <Badge variant=\"secondary\" className=\"text-xs\">\n                                  <Users className=\"h-3 w-3 mr-1\" />\n                                  Friend\n                                </Badge>\n                              )}\n                            </div>\n                            \n                            <p className=\"text-xs text-muted-foreground mb-2\">{searchUser.major}</p>\n                            \n                            {searchUser.sharedClasses && searchUser.sharedClasses.length > 0 && (\n                              <div className=\"flex items-center gap-1 mb-3\">\n                                <BookOpen className=\"h-3 w-3 text-primary\" />\n                                <div className=\"flex flex-wrap gap-1\">\n                                  {searchUser.sharedClasses.map((course, index) => (\n                                    <Badge key={index} variant=\"outline\" className=\"text-xs\">\n                                      {course}\n                                    </Badge>\n                                  ))}\n                                </div>\n                              </div>\n                            )}\n                            \n                            {!searchUser.isFriend && (\n                              <Button \n                                size=\"sm\" \n                                onClick={() => handleAddFriend(searchUser.id)}\n                                disabled={isAddingFriend}\n                                className=\"w-full\"\n                                data-testid={`add-friend-${searchUser.id}`}\n                              >\n                                <UserPlus className=\"h-3 w-3 mr-1\" />\n                                {isAddingFriend ? \"Adding...\" : \"Add Friend\"}\n                              </Button>\n                            )}\n                          </div>\n                        </div>\n                      </div>\n                    ))}\n                  </div>\n                </CardContent>\n              </Card>\n            )}\n\n            {/* My Friends Section */}\n            <Card>\n              <CardHeader>\n                <div className=\"flex items-center justify-between\">\n                  <CardTitle className=\"text-lg flex items-center gap-2\">\n                    <Users className=\"h-5 w-5\" />\n                    My Friends ({friends.length})\n                  </CardTitle>\n                  {friends.length > 0 && (\n                    <Badge variant=\"outline\">{friends.length} friends</Badge>\n                  )}\n                </div>\n              </CardHeader>\n              <CardContent>\n                {isLoadingFriends ? (\n                  <p className=\"text-sm text-muted-foreground text-center py-6\">Loading your friends...</p>\n                ) : friends.length > 0 ? (\n                  <div className=\"grid gap-4 md:grid-cols-2\">\n                    {friends.map((friend: FriendWithUser) => (\n                      <div key={friend.id} className=\"border rounded-lg p-4 hover-elevate\" data-testid={`friend-${friend.friend.id}`}>\n                        <div className=\"flex items-start gap-3\">\n                          <Avatar className=\"h-12 w-12\">\n                            {friend.friend.avatar && <AvatarImage src={friend.friend.avatar} alt={friend.friend.fullName || friend.friend.username} />}\n                            <AvatarFallback>\n                              {(friend.friend.fullName || friend.friend.username)\n                                .split(\" \")\n                                .map(n => n[0])\n                                .join(\"\")\n                                .toUpperCase()}\n                            </AvatarFallback>\n                          </Avatar>\n                          \n                          <div className=\"flex-1 min-w-0\">\n                            <div className=\"flex items-center gap-2 mb-2\">\n                              <h3 className=\"font-semibold text-sm truncate\">{friend.friend.fullName || friend.friend.username}</h3>\n                              {friend.friend.fullName && (\n                                <span className=\"text-xs text-muted-foreground\">@{friend.friend.username}</span>\n                              )}\n                              <Badge variant=\"secondary\" className=\"text-xs\">\n                                <Users className=\"h-3 w-3 mr-1\" />\n                                Friend\n                              </Badge>\n                            </div>\n                            \n                            <p className=\"text-xs text-muted-foreground mb-2\">{friend.friend.major}</p>\n                            <p className=\"text-xs text-muted-foreground mb-3\">\n                              Friends since {new Date(friend.createdAt!).toLocaleDateString()}\n                            </p>\n                            \n                            <Button \n                              size=\"sm\" \n                              variant=\"destructive\"\n                              onClick={() => handleRemoveFriend(friend.friend.id)}\n                              disabled={isRemovingFriend}\n                              className=\"w-full\"\n                              data-testid={`remove-friend-${friend.friend.id}`}\n                            >\n                              <UserX className=\"h-3 w-3 mr-1\" />\n                              {isRemovingFriend ? \"Removing...\" : \"Remove Friend\"}\n                            </Button>\n                          </div>\n                        </div>\n                      </div>\n                    ))}\n                  </div>\n                ) : (\n                  <div className=\"text-center py-8\">\n                    <Users className=\"h-12 w-12 text-muted-foreground mx-auto mb-4\" />\n                    <h3 className=\"text-lg font-medium mb-2\">No friends yet</h3>\n                    <p className=\"text-muted-foreground mb-4\">\n                      Search for study partners and add them as friends to get started.\n                    </p>\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n\n            {/* Original Recommendations Section */}\n            <StudyPartnerRecommendations\n              recommendations={(recommendations as StudyPartner[] | undefined) || []}\n              isLoading={isRecommendationsLoading}\n              onRefresh={handleRefreshRecommendations}\n              onConnect={handleConnect}\n            />\n          </TabsContent>\n        </Tabs>\n      </main>\n\n      {/* User Detail Modal */}\n      <UserDetailModal\n        isOpen={isModalOpen}\n        onClose={handleCloseModal}\n        user={selectedUser}\n        currentUserId={user?.id || \"\"}\n        status={selectedUser ? getUserStatusInfo(selectedUser.id)?.status : undefined}\n        currentClass={selectedUser ? getUserStatusInfo(selectedUser.id)?.currentClass : undefined}\n        nextClass={selectedUser ? getUserStatusInfo(selectedUser.id)?.nextClass : undefined}\n      />\n    </div>\n  );\n}","size_bytes":33948},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/components/examples/Header.tsx":{"content":"import { useState } from 'react'\nimport Header from '../Header'\nimport { User } from '@shared/schema'\n\nexport default function HeaderExample() {\n  // Clean state - no mock data\n  const [user, setUser] = useState<User | null>(null);\n\n  return (\n    <div>\n      <Header \n        userStatus=\"studying\"\n      />\n      <div className=\"p-4 text-sm text-muted-foreground\">\n        Content area below header...\n      </div>\n    </div>\n  );\n}","size_bytes":433},"client/src/components/examples/ScheduleForm.tsx":{"content":"import { useState } from 'react'\nimport ScheduleForm from '../ScheduleForm'\nimport { Schedule, InsertSchedule } from '@shared/schema'\n\nexport default function ScheduleFormExample() {\n  // Clean state - no mock data\n  const [schedules, setSchedules] = useState<Schedule[]>([]);\n\n  const handleAddSchedule = (newSchedule: InsertSchedule) => {\n    const schedule: Schedule = {\n      ...newSchedule,\n      id: Math.random().toString(),\n      userId: \"placeholder-user\",\n      location: newSchedule.location ?? null\n    };\n    setSchedules(prev => [...prev, schedule]);\n  };\n\n  const handleRemoveSchedule = (scheduleId: string) => {\n    setSchedules(prev => prev.filter(s => s.id !== scheduleId));\n  };\n\n  return (\n    <div className=\"max-w-md p-4\">\n      <ScheduleForm \n        schedules={schedules}\n        onAddSchedule={handleAddSchedule}\n        onRemoveSchedule={handleRemoveSchedule}\n      />\n    </div>\n  );\n}","size_bytes":912},"client/src/components/examples/StatusBoard.tsx":{"content":"import { useState } from 'react'\nimport StatusBoard from '../StatusBoard'\nimport { CurrentStatusResponse } from '@shared/schema'\n\nexport default function StatusBoardExample() {\n  // Clean state - no mock data\n  const [isLoading, setIsLoading] = useState(false);\n  \n  const emptyStatusData: CurrentStatusResponse = {\n    now: new Date().toISOString(),\n    in_class: [],\n    free: []\n  };\n\n  const handleRefresh = () => {\n    setIsLoading(true);\n    console.log('Refreshing status...');\n    setTimeout(() => setIsLoading(false), 1000);\n  };\n\n  const handleUserClick = (userId: string) => {\n    console.log('User clicked:', userId);\n  };\n\n  return (\n    <div className=\"p-4\">\n      <StatusBoard \n        statusData={emptyStatusData}\n        isLoading={isLoading}\n        onRefresh={handleRefresh}\n        onUserClick={handleUserClick}\n      />\n    </div>\n  );\n}","size_bytes":858},"client/src/components/examples/StatusButtons.tsx":{"content":"import { useState } from 'react'\nimport StatusButtons from '../StatusButtons'\n\nexport default function StatusButtonsExample() {\n  // todo: remove mock functionality\n  const [status, setStatus] = useState<\"studying\" | \"free\" | \"help\" | \"busy\" | \"tired\" | \"social\">(\"free\");\n\n  return (\n    <div className=\"p-4 max-w-md\">\n      <h3 className=\"font-medium mb-4\">Current Status: {status}</h3>\n      <StatusButtons \n        currentStatus={status}\n        onStatusChange={(newStatus) => {\n          setStatus(newStatus);\n          console.log('Status changed to:', newStatus);\n        }}\n      />\n    </div>\n  );\n}","size_bytes":608},"client/src/components/examples/StatusIndicator.tsx":{"content":"import StatusIndicator from '../StatusIndicator'\n\nexport default function StatusIndicatorExample() {\n  return (\n    <div className=\"flex flex-wrap gap-2 p-4\">\n      <StatusIndicator status=\"studying\" />\n      <StatusIndicator status=\"free\" />\n      <StatusIndicator status=\"help\" />\n      <StatusIndicator status=\"busy\" />\n      <StatusIndicator status=\"tired\" />\n      <StatusIndicator status=\"social\" />\n    </div>\n  );\n}","size_bytes":423},"client/src/components/examples/StudyPartnerCard.tsx":{"content":"import StudyPartnerCard from '../StudyPartnerCard'\nimport { StudyPartner } from '@shared/schema'\n\nexport default function StudyPartnerCardExample() {\n  // Clean state - no mock data\n  const placeholderPartner: StudyPartner = {\n    id: \"placeholder\",\n    username: \"Sample Partner\",\n    major: \"Sample Major\",\n    avatar: null,\n    score: 0,\n    shared_classes: [],\n    current_class: undefined,\n    next_class: undefined,\n    reason: \"No matching criteria yet\"\n  };\n\n  return (\n    <div className=\"max-w-sm p-4\">\n      <StudyPartnerCard \n        partner={placeholderPartner}\n        onConnect={(id) => console.log('Connect clicked for partner:', id)}\n      />\n    </div>\n  );\n}","size_bytes":677},"client/src/components/examples/StudyPartnerRecommendations.tsx":{"content":"import { useState } from 'react'\nimport StudyPartnerRecommendations from '../StudyPartnerRecommendations'\nimport { StudyPartner } from '@shared/schema'\n\nexport default function StudyPartnerRecommendationsExample() {\n  // Clean state - no mock data\n  const [isLoading, setIsLoading] = useState(false);\n  \n  const emptyRecommendations: StudyPartner[] = [];\n\n  const handleRefresh = () => {\n    setIsLoading(true);\n    console.log('Refreshing recommendations...');\n    setTimeout(() => setIsLoading(false), 1500);\n  };\n\n  const handleConnect = (partnerId: string) => {\n    console.log('Connecting to partner:', partnerId);\n  };\n\n  return (\n    <div className=\"max-w-md p-4\">\n      <StudyPartnerRecommendations \n        recommendations={emptyRecommendations}\n        isLoading={isLoading}\n        onRefresh={handleRefresh}\n        onConnect={handleConnect}\n      />\n    </div>\n  );\n}","size_bytes":879},"client/src/components/examples/UserCard.tsx":{"content":"import UserCard from '../UserCard'\n\nexport default function UserCardExample() {\n  // Clean state - no mock data\n  const placeholderUser = {\n    id: \"placeholder\",\n    username: \"Sample User\",\n    major: \"Sample Major\",\n    avatar: null\n  };\n\n  return (\n    <div className=\"max-w-sm p-4\">\n      <UserCard \n        user={placeholderUser}\n        status=\"studying\"\n        currentClass=\"Sample Class\"\n        nextClass=\"Next Class\"\n        onClick={() => console.log('User card clicked')}\n      />\n    </div>\n  );\n}","size_bytes":512},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n        banner:\n          \"bg-red-600/95 text-white border-red-700/50 backdrop-blur [&>svg]:text-white\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1689},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(`\n      after:content-[''] after:block after:absolute after:inset-0 after:rounded-full after:pointer-events-none after:border after:border-black/10 dark:after:border-white/10\n      relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full`,\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1592},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  // Whitespace-nowrap: Badges should never wrap.\n  \"whitespace-nowrap inline-flex items-center rounded-md border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\" +\n  \" hover-elevate \" ,\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground shadow-xs\",\n        secondary: \"border-transparent bg-secondary text-secondary-foreground\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground shadow-xs\",\n\n        outline: \" border [border-color:var(--badge-outline)] shadow-xs\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  },\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  );\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1202},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\" +\n  \" hover-elevate active-elevate-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"bg-primary text-primary-foreground border border-primary-border\",\n        destructive:\n          \"bg-destructive text-destructive-foreground border border-destructive-border\",\n        outline:\n          // Shows the background color of whatever card / sidebar / accent background it is inside of.\n          // Inherits the current text color.\n          \" border [border-color:var(--button-outline)]  shadow-xs active:shadow-none \",\n        secondary: \"border bg-secondary text-secondary-foreground border border-secondary-border \",\n        // Add a transparent border so that when someone toggles a border on later, it doesn't shift layout/size.\n        ghost: \"border border-transparent\",\n      },\n      // Heights are set as \"min\" heights, because sometimes Ai will place large amount of content\n      // inside buttons. With a min-height they will look appropriate with small amounts of content,\n      // but will expand to fit large amounts of content.\n      size: {\n        default: \"min-h-9 px-4 py-2\",\n        sm: \"min-h-8 rounded-md px-3 text-xs\",\n        lg: \"min-h-10 rounded-md px-8\",\n        icon: \"h-9 w-9\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  },\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  },\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":2359},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"shadcn-card rounded-xl border bg-card border-card-border text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n));\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n));\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n));\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\nexport {\n  Card,\n  CardHeader,\n  CardFooter,\n  CardTitle,\n  CardDescription,\n  CardContent,\n}\n","size_bytes":1904},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    // h-9 to match icon buttons and default buttons.\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-9 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":844},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-9 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5741},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, VariantProps } from \"class-variance-authority\"\nimport { PanelLeftIcon } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nfunction SidebarProvider({\n  defaultOpen = true,\n  open: openProp,\n  onOpenChange: setOpenProp,\n  className,\n  style,\n  children,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  defaultOpen?: boolean\n  open?: boolean\n  onOpenChange?: (open: boolean) => void\n}) {\n  const isMobile = useIsMobile()\n  const [openMobile, setOpenMobile] = React.useState(false)\n\n  // This is the internal state of the sidebar.\n  // We use openProp and setOpenProp for control from outside the component.\n  const [_open, _setOpen] = React.useState(defaultOpen)\n  const open = openProp ?? _open\n  const setOpen = React.useCallback(\n    (value: boolean | ((value: boolean) => boolean)) => {\n      const openState = typeof value === \"function\" ? value(open) : value\n      if (setOpenProp) {\n        setOpenProp(openState)\n      } else {\n        _setOpen(openState)\n      }\n\n      // This sets the cookie to keep the sidebar state.\n      document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n    },\n    [setOpenProp, open]\n  )\n\n  // Helper to toggle the sidebar.\n  const toggleSidebar = React.useCallback(() => {\n    return isMobile ? setOpenMobile((open) => !open) : setOpen((open) => !open)\n  }, [isMobile, setOpen, setOpenMobile])\n\n  // Adds a keyboard shortcut to toggle the sidebar.\n  React.useEffect(() => {\n    const handleKeyDown = (event: KeyboardEvent) => {\n      if (\n        event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n        (event.metaKey || event.ctrlKey)\n      ) {\n        event.preventDefault()\n        toggleSidebar()\n      }\n    }\n\n    window.addEventListener(\"keydown\", handleKeyDown)\n    return () => window.removeEventListener(\"keydown\", handleKeyDown)\n  }, [toggleSidebar])\n\n  // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n  // This makes it easier to style the sidebar with Tailwind classes.\n  const state = open ? \"expanded\" : \"collapsed\"\n\n  const contextValue = React.useMemo<SidebarContextProps>(\n    () => ({\n      state,\n      open,\n      setOpen,\n      isMobile,\n      openMobile,\n      setOpenMobile,\n      toggleSidebar,\n    }),\n    [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n  )\n\n  return (\n    <SidebarContext.Provider value={contextValue}>\n      <TooltipProvider delayDuration={0}>\n        <div\n          data-slot=\"sidebar-wrapper\"\n          style={\n            {\n              \"--sidebar-width\": SIDEBAR_WIDTH,\n              \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n              ...style,\n            } as React.CSSProperties\n          }\n          className={cn(\n            \"group/sidebar-wrapper has-data-[variant=inset]:bg-sidebar flex min-h-svh w-full\",\n            className\n          )}\n          {...props}\n        >\n          {children}\n        </div>\n      </TooltipProvider>\n    </SidebarContext.Provider>\n  )\n}\n\nfunction Sidebar({\n  side = \"left\",\n  variant = \"sidebar\",\n  collapsible = \"offcanvas\",\n  className,\n  children,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  side?: \"left\" | \"right\"\n  variant?: \"sidebar\" | \"floating\" | \"inset\"\n  collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n}) {\n  const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n  if (collapsible === \"none\") {\n    return (\n      <div\n        data-slot=\"sidebar\"\n        className={cn(\n          \"bg-sidebar text-sidebar-foreground flex h-full w-[var(--sidebar-width)] flex-col\",\n          className\n        )}\n        {...props}\n      >\n        {children}\n      </div>\n    )\n  }\n\n  if (isMobile) {\n    return (\n      <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n        <SheetContent\n          data-sidebar=\"sidebar\"\n          data-slot=\"sidebar\"\n          data-mobile=\"true\"\n          className=\"bg-sidebar text-sidebar-foreground w-[var(--sidebar-width)] p-0 [&>button]:hidden\"\n          style={\n            {\n              \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n            } as React.CSSProperties\n          }\n          side={side}\n        >\n          <SheetHeader className=\"sr-only\">\n            <SheetTitle>Sidebar</SheetTitle>\n            <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n          </SheetHeader>\n          <div className=\"flex h-full w-full flex-col\">{children}</div>\n        </SheetContent>\n      </Sheet>\n    )\n  }\n\n  return (\n    <div\n      className=\"group peer text-sidebar-foreground hidden md:block\"\n      data-state={state}\n      data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n      data-variant={variant}\n      data-side={side}\n      data-slot=\"sidebar\"\n    >\n      {/* This is what handles the sidebar gap on desktop */}\n      <div\n        data-slot=\"sidebar-gap\"\n        className={cn(\n          \"relative w-[var(--sidebar-width)] bg-transparent transition-[width] duration-200 ease-linear\",\n          \"group-data-[collapsible=offcanvas]:w-0\",\n          \"group-data-[side=right]:rotate-180\",\n          variant === \"floating\" || variant === \"inset\"\n            ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)+var(--spacing-4))]\"\n            : \"group-data-[collapsible=icon]:w-[var(--sidebar-width-icon)]\"\n        )}\n      />\n      <div\n        data-slot=\"sidebar-container\"\n        className={cn(\n          \"fixed inset-y-0 z-10 hidden h-svh w-[var(--sidebar-width)] transition-[left,right,width] duration-200 ease-linear md:flex\",\n          side === \"left\"\n            ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n            : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n          // Adjust the padding for floating and inset variants.\n          variant === \"floating\" || variant === \"inset\"\n            ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)+var(--spacing-4)+2px)]\"\n            : \"group-data-[collapsible=icon]:w-[var(--sidebar-width-icon)] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n          className\n        )}\n        {...props}\n      >\n        <div\n          data-sidebar=\"sidebar\"\n          data-slot=\"sidebar-inner\"\n          className=\"bg-sidebar group-data-[variant=floating]:border-sidebar-border flex h-full w-full flex-col group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:shadow-sm\"\n        >\n          {children}\n        </div>\n      </div>\n    </div>\n  )\n}\n\nfunction SidebarTrigger({\n  className,\n  onClick,\n  ...props\n}: React.ComponentProps<typeof Button>) {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      data-sidebar=\"trigger\"\n      data-slot=\"sidebar-trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeftIcon />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n}\n\nfunction SidebarRail({ className, ...props }: React.ComponentProps<\"button\">) {\n  const { toggleSidebar } = useSidebar()\n\n  // Note: Tailwind v3.4 doesn't support \"in-\" selectors. So the rail won't work perfectly.\n  return (\n    <button\n      data-sidebar=\"rail\"\n      data-slot=\"sidebar-rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"hover:after:bg-sidebar-border absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear group-data-[side=left]:-right-4 group-data-[side=right]:left-0 after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] sm:flex\",\n        \"in-data-[side=left]:cursor-w-resize in-data-[side=right]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"hover:group-data-[collapsible=offcanvas]:bg-sidebar group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarInset({ className, ...props }: React.ComponentProps<\"main\">) {\n  return (\n    <main\n      data-slot=\"sidebar-inset\"\n      className={cn(\n        \"bg-background relative flex w-full flex-1 flex-col\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow-sm md:peer-data-[variant=inset]:peer-data-[state=collapsed]:ml-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarInput({\n  className,\n  ...props\n}: React.ComponentProps<typeof Input>) {\n  return (\n    <Input\n      data-slot=\"sidebar-input\"\n      data-sidebar=\"input\"\n      className={cn(\"bg-background h-8 w-full shadow-none\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarHeader({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-header\"\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarFooter({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-footer\"\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarSeparator({\n  className,\n  ...props\n}: React.ComponentProps<typeof Separator>) {\n  return (\n    <Separator\n      data-slot=\"sidebar-separator\"\n      data-sidebar=\"separator\"\n      className={cn(\"bg-sidebar-border mx-2 w-auto\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarContent({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-content\"\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroup({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-group\"\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroupLabel({\n  className,\n  asChild = false,\n  ...props\n}: React.ComponentProps<\"div\"> & { asChild?: boolean }) {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-group-label\"\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"text-sidebar-foreground/70 ring-sidebar-ring flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium outline-hidden transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:h-4 [&>svg]:w-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroupAction({\n  className,\n  asChild = false,\n  ...props\n}: React.ComponentProps<\"button\"> & { asChild?: boolean }) {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-group-action\"\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground absolute top-3.5 right-3 flex aspect-square w-5 items-center justify-center rounded-md p-0 outline-hidden transition-transform focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 md:after:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroupContent({\n  className,\n  ...props\n}: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-group-content\"\n      data-sidebar=\"group-content\"\n      className={cn(\"w-full text-sm\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenu({ className, ...props }: React.ComponentProps<\"ul\">) {\n  return (\n    <ul\n      data-slot=\"sidebar-menu\"\n      data-sidebar=\"menu\"\n      className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuItem({ className, ...props }: React.ComponentProps<\"li\">) {\n  return (\n    <li\n      data-slot=\"sidebar-menu-item\"\n      data-sidebar=\"menu-item\"\n      className={cn(\"group/menu-item relative\", className)}\n      {...props}\n    />\n  )\n}\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-hidden ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-data-[sidebar=menu-action]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:w-8! group-data-[collapsible=icon]:h-8! group-data-[collapsible=icon]:p-2! [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:p-0!\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nfunction SidebarMenuButton({\n  asChild = false,\n  isActive = false,\n  variant = \"default\",\n  size = \"default\",\n  tooltip,\n  className,\n  ...props\n}: React.ComponentProps<\"button\"> & {\n  asChild?: boolean\n  isActive?: boolean\n  tooltip?: string | React.ComponentProps<typeof TooltipContent>\n} & VariantProps<typeof sidebarMenuButtonVariants>) {\n  const Comp = asChild ? Slot : \"button\"\n  const { isMobile, state } = useSidebar()\n\n  const button = (\n    <Comp\n      data-slot=\"sidebar-menu-button\"\n      data-sidebar=\"menu-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n      {...props}\n    />\n  )\n\n  if (!tooltip) {\n    return button\n  }\n\n  if (typeof tooltip === \"string\") {\n    tooltip = {\n      children: tooltip,\n    }\n  }\n\n  return (\n    <Tooltip>\n      <TooltipTrigger asChild>{button}</TooltipTrigger>\n      <TooltipContent\n        side=\"right\"\n        align=\"center\"\n        hidden={state !== \"collapsed\" || isMobile}\n        {...tooltip}\n      />\n    </Tooltip>\n  )\n}\n\nfunction SidebarMenuAction({\n  className,\n  asChild = false,\n  showOnHover = false,\n  ...props\n}: React.ComponentProps<\"button\"> & {\n  asChild?: boolean\n  showOnHover?: boolean\n}) {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-menu-action\"\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground peer-hover/menu-button:text-sidebar-accent-foreground absolute top-1.5 right-1 flex aspect-square w-5 items-center justify-center rounded-md p-0 outline-hidden transition-transform focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 md:after:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"peer-data-[active=true]/menu-button:text-sidebar-accent-foreground group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuBadge({\n  className,\n  ...props\n}: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-menu-badge\"\n      data-sidebar=\"menu-badge\"\n      className={cn(\n        \"text-sidebar-foreground pointer-events-none absolute right-1 flex h-5 min-w-5 items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums select-none\",\n        \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuSkeleton({\n  className,\n  showIcon = false,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  showIcon?: boolean\n}) {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      data-slot=\"sidebar-menu-skeleton\"\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[var(--skeleton-width)] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n}\n\nfunction SidebarMenuSub({ className, ...props }: React.ComponentProps<\"ul\">) {\n  return (\n    <ul\n      data-slot=\"sidebar-menu-sub\"\n      data-sidebar=\"menu-sub\"\n      className={cn(\n        \"border-sidebar-border mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l px-2.5 py-0.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuSubItem({\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) {\n  return (\n    <li\n      data-slot=\"sidebar-menu-sub-item\"\n      data-sidebar=\"menu-sub-item\"\n      className={cn(\"group/menu-sub-item relative\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuSubButton({\n  asChild = false,\n  size = \"md\",\n  isActive = false,\n  className,\n  ...props\n}: React.ComponentProps<\"a\"> & {\n  asChild?: boolean\n  size?: \"sm\" | \"md\"\n  isActive?: boolean\n}) {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-menu-sub-button\"\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground active:bg-sidebar-accent active:text-sidebar-accent-foreground [&>svg]:text-sidebar-accent-foreground flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 outline outline-2 outline-transparent outline-offset-2 focus-visible:ring-2 disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":21846},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n        banner:\n          \"banner group border-red-700/50 bg-red-600/95 text-white backdrop-blur\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive group-[.banner]:border-red-300/40 group-[.banner]:hover:border-red-400/50 group-[.banner]:hover:bg-red-700 group-[.banner]:text-white group-[.banner]:focus:ring-red-400\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600 group-[.banner]:text-red-200 group-[.banner]:hover:text-white group-[.banner]:focus:ring-red-400 group-[.banner]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":5252},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"client/src/components/StatusDisplay.tsx":{"content":"import { Button } from \"@/components/ui/button\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport {\n  AlertDialog,\n  AlertDialogAction,\n  AlertDialogCancel,\n  AlertDialogContent,\n  AlertDialogDescription,\n  AlertDialogFooter,\n  AlertDialogHeader,\n  AlertDialogTitle\n} from \"@/components/ui/alert-dialog\";\nimport { cn } from \"@/lib/utils\";\nimport { useState } from \"react\";\nimport { Schedule } from \"@shared/schema\";\nimport studyIcon from \"@assets/study_status_1757730011820.png\";\nimport freeIcon from \"@assets/free_status_1757730011817.png\";\nimport inClassIcon from \"@assets/in_class_status_1757730011818.png\";\nimport tiredIcon from \"@assets/tired_status_1757731273641.jpg\";\nimport socialIcon from \"@assets/social_status_1757731273641.jpg\";\nimport busyIcon from \"@assets/busy_status_1757731277664.jpg\";\n\ntype StatusType = \"studying\" | \"free\" | \"in_class\" | \"busy\" | \"tired\" | \"social\";\n\ninterface StatusDisplayProps {\n  currentStatus: StatusType | null;\n  currentMessage?: string;\n  onStatusChange: (status: StatusType, customMessage?: string) => void;\n  schedules: Schedule[];\n  className?: string;\n}\n\ninterface CurrentClass {\n  courseCode: string;\n  courseName: string;\n  location: string | null;\n  endTime: string;\n}\n\ninterface NextClass {\n  courseCode: string;\n  courseName: string;\n  location: string | null;\n  startTime: string;\n  minutesUntil: number;\n}\n\nconst statusConfig: Record<StatusType, { \n  label: string; \n  icon: string;\n  color: string;\n  message: string;\n}> = {\n  studying: { label: \"Studying\", icon: studyIcon, color: \"text-status-studying\", message: \"Focused on studying\" },\n  free: { label: \"Free\", icon: freeIcon, color: \"text-status-free\", message: \"Available for study partners\" },\n  in_class: { label: \"In Class\", icon: inClassIcon, color: \"text-status-help\", message: \"Currently in class\" },\n  busy: { label: \"Busy\", icon: busyIcon, color: \"text-status-busy\", message: \"Busy with other tasks\" },\n  tired: { label: \"Tired\", icon: tiredIcon, color: \"text-status-tired\", message: \"Taking a break\" },\n  social: { label: \"Social\", icon: socialIcon, color: \"text-status-social\", message: \"Hanging out with friends\" },\n};\n\nconst DAYS = [\"sunday\", \"monday\", \"tuesday\", \"wednesday\", \"thursday\", \"friday\", \"saturday\"];\n\nfunction getCurrentDayName(): string {\n  const today = new Date();\n  return DAYS[today.getDay()];\n}\n\nfunction parseTime(timeStr: string): { hours: number; minutes: number } {\n  const [hours, minutes] = timeStr.split(':').map(Number);\n  return { hours, minutes };\n}\n\nfunction timeToMinutes(timeStr: string): number {\n  const { hours, minutes } = parseTime(timeStr);\n  return hours * 60 + minutes;\n}\n\nfunction getCurrentTimeInMinutes(): number {\n  const now = new Date();\n  return now.getHours() * 60 + now.getMinutes();\n}\n\nfunction findCurrentClass(schedules: Schedule[]): CurrentClass | null {\n  const currentDay = getCurrentDayName();\n  const currentTimeMinutes = getCurrentTimeInMinutes();\n  \n  const todaysClasses = schedules.filter(schedule => schedule.day === currentDay);\n  \n  for (const schedule of todaysClasses) {\n    const startTime = timeToMinutes(schedule.startTime);\n    const endTime = timeToMinutes(schedule.endTime);\n    \n    if (currentTimeMinutes >= startTime && currentTimeMinutes < endTime) {\n      return {\n        courseCode: schedule.courseCode,\n        courseName: schedule.courseName,\n        location: schedule.location,\n        endTime: schedule.endTime\n      };\n    }\n  }\n  \n  return null;\n}\n\nfunction findNextClass(schedules: Schedule[]): NextClass | null {\n  const currentDay = getCurrentDayName();\n  const currentTimeMinutes = getCurrentTimeInMinutes();\n  \n  const todaysClasses = schedules.filter(schedule => schedule.day === currentDay);\n  \n  // Find classes that start after current time\n  const upcomingClasses = todaysClasses\n    .filter(schedule => timeToMinutes(schedule.startTime) > currentTimeMinutes)\n    .sort((a, b) => timeToMinutes(a.startTime) - timeToMinutes(b.startTime));\n  \n  if (upcomingClasses.length > 0) {\n    const nextClass = upcomingClasses[0];\n    const minutesUntil = timeToMinutes(nextClass.startTime) - currentTimeMinutes;\n    \n    // Only return if class is within the next hour\n    if (minutesUntil <= 60) {\n      return {\n        courseCode: nextClass.courseCode,\n        courseName: nextClass.courseName,\n        location: nextClass.location,\n        startTime: nextClass.startTime,\n        minutesUntil\n      };\n    }\n  }\n  \n  return null;\n}\n\nfunction getSmartStatus(schedules: Schedule[]): { status: StatusType; message: string } {\n  const currentClass = findCurrentClass(schedules);\n  \n  if (currentClass) {\n    return {\n      status: \"in_class\",\n      message: `You are taking ${currentClass.courseCode} ${currentClass.courseName}${currentClass.location ? ` in ${currentClass.location}` : ''}. Class ends at ${currentClass.endTime}`\n    };\n  }\n  \n  const nextClass = findNextClass(schedules);\n  \n  if (nextClass) {\n    return {\n      status: \"free\",\n      message: `Free - Next class ${nextClass.courseCode} in ${nextClass.minutesUntil} minutes`\n    };\n  }\n  \n  return {\n    status: \"free\",\n    message: \"Free - No upcoming classes today\"\n  };\n}\n\nexport default function StatusDisplay({ \n  currentStatus, \n  currentMessage,\n  onStatusChange, \n  schedules,\n  className \n}: StatusDisplayProps) {\n  const [showConfirmDialog, setShowConfirmDialog] = useState(false);\n  const [pendingStatus, setPendingStatus] = useState<StatusType | null>(null);\n  const [customMessage, setCustomMessage] = useState(\"\");\n  const [useCustomMessage, setUseCustomMessage] = useState(false);\n  \n  const smartStatus = getSmartStatus(schedules);\n  const effectiveStatus = currentStatus || smartStatus.status;\n  const currentConfig = statusConfig[effectiveStatus];\n  \n  // Determine the message to display (priority: custom message > manual status message > smart status message)\n  const displayMessage = currentMessage || (currentStatus ? currentConfig.message : smartStatus.message);\n  \n  const handleStatusChange = (newStatus: StatusType) => {\n    // If currently in class and trying to change, show confirmation\n    if (effectiveStatus === \"in_class\" && newStatus !== \"in_class\") {\n      setPendingStatus(newStatus);\n      setShowConfirmDialog(true);\n    } else {\n      const message = useCustomMessage && customMessage.trim() ? customMessage.trim() : undefined;\n      onStatusChange(newStatus, message);\n    }\n  };\n  \n  const confirmStatusChange = () => {\n    if (pendingStatus) {\n      const message = useCustomMessage && customMessage.trim() ? customMessage.trim() : undefined;\n      onStatusChange(pendingStatus, message);\n      setPendingStatus(null);\n    }\n    setShowConfirmDialog(false);\n  };\n  \n  const cancelStatusChange = () => {\n    setPendingStatus(null);\n    setShowConfirmDialog(false);\n  };\n\n  return (\n    <Card className={cn(\"w-full\", className)}>\n      <CardContent className=\"pt-6\">\n        {/* Large centered status image */}\n        <div className=\"flex flex-col items-center mb-4 sm:mb-6\">\n          <div className=\"mb-3 sm:mb-4 relative\">\n            {/* Enhanced background for status dog */}\n            <div className=\"absolute inset-0 bg-gradient-to-br from-background/5 to-background/10 rounded-full blur-sm transform scale-110\"></div>\n            <div className=\"relative bg-background/20 rounded-full p-4 sm:p-6 md:p-8 border border-border/20 shadow-lg\">\n              <img \n                src={currentConfig.icon} \n                alt={currentConfig.label}\n                className=\"h-24 w-24 sm:h-36 sm:w-36 md:h-44 md:w-44 lg:h-48 lg:w-48 object-contain drop-shadow-sm\" \n              />\n            </div>\n          </div>\n          \n          {/* Status message */}\n          <div className=\"text-center mb-3 sm:mb-4\">\n            <h3 className=\"text-base sm:text-lg font-semibold mb-1 sm:mb-2\">{currentConfig.label}</h3>\n            <p className=\"text-xs sm:text-sm text-muted-foreground px-2\">\n              {displayMessage}\n            </p>\n          </div>\n        </div>\n\n        {/* Custom message input */}\n        <div className=\"mb-4 sm:mb-6 space-y-2 sm:space-y-3\">\n          <div className=\"flex items-center space-x-2\">\n            <input\n              type=\"checkbox\"\n              id=\"useCustomMessage\"\n              checked={useCustomMessage}\n              onChange={(e) => setUseCustomMessage(e.target.checked)}\n              className=\"rounded border-gray-300\"\n              data-testid=\"checkbox-custom-message\"\n            />\n            <Label htmlFor=\"useCustomMessage\" className=\"text-xs sm:text-sm font-medium\">\n              Add custom message\n            </Label>\n          </div>\n          \n          {useCustomMessage && (\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"customMessage\" className=\"text-xs sm:text-sm\">\n                Custom Status Message\n              </Label>\n              <Input\n                id=\"customMessage\"\n                placeholder=\"Enter your custom status message...\"\n                value={customMessage}\n                onChange={(e) => setCustomMessage(e.target.value)}\n                maxLength={100}\n                className=\"text-xs sm:text-sm\"\n                data-testid=\"input-custom-message\"\n              />\n              <p className=\"text-xs text-muted-foreground\">\n                {customMessage.length}/100 characters\n              </p>\n            </div>\n          )}\n        </div>\n\n        {/* Status selection buttons */}\n        <div className=\"space-y-2\">\n          <p className=\"text-xs sm:text-sm font-medium text-center mb-2 sm:mb-3\">Change Status:</p>\n          <div className=\"grid grid-cols-1 xs:grid-cols-2 sm:grid-cols-3 gap-2\">\n            {Object.entries(statusConfig).map(([status, config]) => {\n              const isActive = effectiveStatus === status;\n              \n              return (\n                <Button\n                  key={status}\n                  variant={isActive ? \"default\" : \"outline\"}\n                  size=\"sm\"\n                  onClick={() => handleStatusChange(status as StatusType)}\n                  className={cn(\n                    \"flex items-center justify-center gap-2 h-auto py-2 px-3 min-h-[44px]\",\n                    !isActive && \"hover:bg-accent\"\n                  )}\n                  data-testid={`status-button-${status}`}\n                >\n                  <img \n                    src={config.icon} \n                    alt={config.label}\n                    className=\"h-4 w-4 sm:h-5 sm:w-5\" \n                  />\n                  <span className=\"text-xs sm:text-sm font-medium\">{config.label}</span>\n                </Button>\n              );\n            })}\n          </div>\n        </div>\n      </CardContent>\n      \n      {/* Confirmation Dialog */}\n      <AlertDialog open={showConfirmDialog} onOpenChange={setShowConfirmDialog}>\n        <AlertDialogContent data-testid=\"status-change-confirmation\">\n          <AlertDialogHeader>\n            <AlertDialogTitle>Change Status?</AlertDialogTitle>\n            <AlertDialogDescription>\n              Scotty thinks you are in class right now, are you sure to change your status?\n            </AlertDialogDescription>\n          </AlertDialogHeader>\n          <AlertDialogFooter>\n            <AlertDialogCancel onClick={cancelStatusChange} data-testid=\"confirm-cancel\">\n              Cancel\n            </AlertDialogCancel>\n            <AlertDialogAction onClick={confirmStatusChange} data-testid=\"confirm-change\">\n              Yes, Change Status\n            </AlertDialogAction>\n          </AlertDialogFooter>\n        </AlertDialogContent>\n      </AlertDialog>\n    </Card>\n  );\n}","size_bytes":11723},"client/src/pages/Profile.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useLocation, Link } from \"wouter\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Form, FormControl, FormField, FormItem, FormLabel } from \"@/components/ui/form\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { ArrowLeft, Upload, User as UserIcon, Edit3, Loader2 } from \"lucide-react\";\nimport { updateUserProfileSchema, genderEnum, type UpdateUserProfile, type PublicUser } from \"@shared/schema\";\nimport { z } from \"zod\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { useAuth } from \"@/contexts/AuthContext\";\n\n// Use the safe profile schema that excludes password fields\nconst profileSchema = updateUserProfileSchema.extend({\n  major: z.string().min(1, \"Major is required\"),\n});\n\ntype ProfileData = z.infer<typeof profileSchema>;\n\n// Helper function to validate gender from localStorage\nfunction validateGender(gender: unknown): z.infer<typeof genderEnum> | undefined {\n  if (typeof gender === 'string') {\n    const result = genderEnum.safeParse(gender);\n    return result.success ? result.data : undefined;\n  }\n  return undefined;\n}\n\nexport default function Profile() {\n  const [, setLocation] = useLocation();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [isEditing, setIsEditing] = useState(false);\n  const [avatarFile, setAvatarFile] = useState<File | null>(null);\n  const [previewUrl, setPreviewUrl] = useState<string | null>(null);\n  \n  // Use AuthContext for user state management\n  const { user, isAuthenticated, isLoading, refetchUser } = useAuth();\n\n  // Redirect unauthenticated users\n  useEffect(() => {\n    if (!isLoading && !isAuthenticated) {\n      setLocation(\"/login\");\n    }\n  }, [isAuthenticated, isLoading, setLocation]);\n\n  // React Query mutation for updating profile - using secure profile schema\n  const updateProfileMutation = useMutation({\n    mutationFn: async (data: ProfileData) => {\n      if (!user) throw new Error(\"No user found\");\n      \n      // Handle file upload if avatar changed\n      let avatarUrl = data.avatar;\n      if (previewUrl && avatarFile) {\n        // In a real app, you'd upload the file to a service like AWS S3 or similar\n        // For now, we'll use the data URL\n        avatarUrl = previewUrl;\n      }\n      \n      const updateData: UpdateUserProfile = {\n        fullName: data.fullName?.trim() ? data.fullName.trim() : null,\n        major: data.major,\n        avatar: avatarUrl,\n        dorm: data.dorm?.trim() ? data.dorm.trim() : null,\n        college: data.college?.trim() ? data.college.trim() : null,\n        gender: data.gender,\n        bio: data.bio?.trim() ? data.bio.trim() : null\n      };\n      \n      const response = await apiRequest(\"PUT\", `/api/users/${user.id}`, updateData);\n      return await response.json();\n    },\n    onSuccess: (updatedUser: PublicUser) => {\n      // Refetch user data from AuthContext to update global state\n      refetchUser();\n      // Invalidate auth queries to refresh user data\n      queryClient.invalidateQueries({ queryKey: ['/api/auth/me'] });\n      setIsEditing(false);\n      setPreviewUrl(null);\n      setAvatarFile(null);\n      toast({\n        title: \"Profile updated\",\n        description: \"Your profile has been successfully updated\",\n      });\n      console.log('Profile updated:', updatedUser);\n    },\n    onError: (error: Error) => {\n      console.error('Profile update error:', error);\n      toast({\n        title: \"Update failed\",\n        description: error.message || \"Failed to update profile. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const form = useForm<ProfileData>({\n    resolver: zodResolver(profileSchema),\n    defaultValues: {\n      fullName: user?.fullName || \"\",\n      major: user?.major || \"\",\n      avatar: user?.avatar || null,\n      dorm: user?.dorm || \"\",\n      college: user?.college || \"\",\n      gender: validateGender(user?.gender),\n      bio: user?.bio || \"\",\n    },\n  });\n\n  // Update form defaults when user changes\n  useEffect(() => {\n    if (user) {\n      form.reset({\n        fullName: user.fullName || \"\",\n        major: user.major || \"\",\n        avatar: user.avatar || null,\n        dorm: user.dorm || \"\",\n        college: user.college || \"\",\n        gender: validateGender(user.gender),\n        bio: user.bio || \"\",\n      });\n    }\n  }, [user, form]);\n\n  const displayName = user?.fullName || user?.username || \"User\";\n  const userInitials = displayName\n    ?.split(\" \")\n    .map(n => n[0])\n    .join(\"\")\n    .toUpperCase() || \"U\";\n\n  const handleAvatarUpload = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const file = event.target.files?.[0];\n    if (file) {\n      if (file.size > 5 * 1024 * 1024) {\n        toast({\n          title: \"File too large\",\n          description: \"Please choose a file smaller than 5MB\",\n          variant: \"destructive\",\n        });\n        return;\n      }\n\n      if (!file.type.startsWith(\"image/\")) {\n        toast({\n          title: \"Invalid file type\",\n          description: \"Please choose an image file\",\n          variant: \"destructive\",\n        });\n        return;\n      }\n\n      setAvatarFile(file);\n      const reader = new FileReader();\n      reader.onload = (e) => {\n        setPreviewUrl(e.target?.result as string);\n      };\n      reader.readAsDataURL(file);\n    }\n  };\n\n  const handleSubmit = (data: ProfileData) => {\n    updateProfileMutation.mutate(data);\n  };\n\n  const { logout } = useAuth();\n  \n  const handleLogout = async () => {\n    try {\n      await logout();\n      // AuthContext handles redirect and state cleanup\n    } catch (error) {\n      console.error('Logout error:', error);\n      // If logout fails, still redirect for safety\n      setLocation(\"/login\");\n    }\n  };\n\n  // Show loading or return null while redirecting\n  if (!user) {\n    return null;\n  }\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <div className=\"container mx-auto px-3 sm:px-6 lg:px-8 py-4 sm:py-6\">\n        {/* Header with back button */}\n        <div className=\"flex items-center gap-4 mb-6\">\n          <Link href=\"/\" data-testid=\"link-back-home\">\n            <Button variant=\"outline\" size=\"sm\" className=\"flex items-center gap-2 hover-elevate\">\n              <ArrowLeft className=\"h-4 w-4\" />\n              <span className=\"hidden sm:inline\">Back to Dashboard</span>\n              <span className=\"sm:hidden\">Back</span>\n            </Button>\n          </Link>\n          <h1 className=\"text-xl sm:text-2xl font-semibold\">Profile</h1>\n        </div>\n\n        <div className=\"max-w-2xl mx-auto space-y-6\">\n          {/* Profile Header Card */}\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <UserIcon className=\"h-5 w-5\" />\n                Personal Information\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"flex flex-col sm:flex-row items-center gap-6\">\n                {/* Avatar Section */}\n                <div className=\"flex flex-col items-center gap-4\">\n                  <Avatar className=\"h-20 w-20 sm:h-24 sm:w-24\">\n                    {(previewUrl || user.avatar) && (\n                      <AvatarImage \n                        src={previewUrl || user.avatar || undefined} \n                        alt={user.username} \n                      />\n                    )}\n                    <AvatarFallback className=\"text-lg sm:text-xl\">\n                      {userInitials}\n                    </AvatarFallback>\n                  </Avatar>\n                  \n                  {isEditing && (\n                    <div>\n                      <input\n                        type=\"file\"\n                        accept=\"image/*\"\n                        onChange={handleAvatarUpload}\n                        className=\"hidden\"\n                        id=\"avatar-upload\"\n                        data-testid=\"input-avatar-upload\"\n                      />\n                      <Label htmlFor=\"avatar-upload\">\n                        <Button \n                          variant=\"outline\" \n                          size=\"sm\" \n                          asChild\n                          className=\"cursor-pointer hover-elevate\"\n                        >\n                          <div className=\"flex items-center gap-2\">\n                            <Upload className=\"h-4 w-4\" />\n                            <span className=\"text-xs sm:text-sm\">Upload Photo</span>\n                          </div>\n                        </Button>\n                      </Label>\n                    </div>\n                  )}\n                </div>\n\n                {/* User Information */}\n                <div className=\"flex-1 text-center sm:text-left\">\n                  {!isEditing ? (\n                    <div className=\"space-y-4\">\n                      <div>\n                        <h2 className=\"text-xl sm:text-2xl font-semibold\" data-testid=\"text-username\">\n                          {user.fullName || user.username}\n                        </h2>\n                        {user.fullName && (\n                          <p className=\"text-sm text-muted-foreground\" data-testid=\"text-username-fallback\">\n                            @{user.username}\n                          </p>\n                        )}\n                        <p className=\"text-muted-foreground\" data-testid=\"text-major\">\n                          {user.major}\n                        </p>\n                      </div>\n                      \n                      {/* Additional Information */}\n                      <div className=\"space-y-2 text-sm\">\n                        {(user.dorm || user.college || user.gender) && (\n                          <div className=\"grid grid-cols-1 sm:grid-cols-2 gap-2\">\n                            {user.dorm && (\n                              <div>\n                                <span className=\"text-muted-foreground\">Dorm: </span>\n                                <span data-testid=\"text-dorm\">{user.dorm}</span>\n                              </div>\n                            )}\n                            {user.college && (\n                              <div>\n                                <span className=\"text-muted-foreground\">College: </span>\n                                <span data-testid=\"text-college\">{user.college}</span>\n                              </div>\n                            )}\n                            {user.gender && (\n                              <div className=\"sm:col-span-2\">\n                                <span className=\"text-muted-foreground\">Gender: </span>\n                                <span data-testid=\"text-gender\">\n                                  {user.gender === 'prefer_not_to_say' \n                                    ? 'Prefer not to say' \n                                    : user.gender.charAt(0).toUpperCase() + user.gender.slice(1)}\n                                </span>\n                              </div>\n                            )}\n                          </div>\n                        )}\n                        \n                        {user.bio && (\n                          <div className=\"pt-2\">\n                            <p className=\"text-muted-foreground text-xs mb-1\">Bio:</p>\n                            <p className=\"text-sm leading-relaxed\" data-testid=\"text-bio\">\n                              {user.bio}\n                            </p>\n                          </div>\n                        )}\n                      </div>\n                      \n                      <Button\n                        variant=\"outline\"\n                        onClick={() => setIsEditing(true)}\n                        data-testid=\"button-edit-profile\"\n                        className=\"flex items-center gap-2 hover-elevate\"\n                      >\n                        <Edit3 className=\"h-4 w-4\" />\n                        Edit Profile\n                      </Button>\n                    </div>\n                  ) : (\n                    <Form {...form}>\n                      <form onSubmit={form.handleSubmit(handleSubmit)} className=\"space-y-4\">\n                        <FormField\n                          control={form.control}\n                          name=\"fullName\"\n                          render={({ field }) => (\n                            <FormItem>\n                              <FormLabel>Full Name (Optional)</FormLabel>\n                              <FormControl>\n                                <Input\n                                  placeholder=\"Enter your full name\"\n                                  {...field}\n                                  value={field.value || \"\"}\n                                  data-testid=\"input-profile-fullname\"\n                                />\n                              </FormControl>\n                            </FormItem>\n                          )}\n                        />\n                        \n                        <FormField\n                          control={form.control}\n                          name=\"major\"\n                          render={({ field }) => (\n                            <FormItem>\n                              <FormLabel>Major</FormLabel>\n                              <FormControl>\n                                <Input\n                                  placeholder=\"Enter your major\"\n                                  {...field}\n                                  data-testid=\"input-profile-major\"\n                                />\n                              </FormControl>\n                            </FormItem>\n                          )}\n                        />\n                        \n                        <FormField\n                          control={form.control}\n                          name=\"dorm\"\n                          render={({ field }) => (\n                            <FormItem>\n                              <FormLabel>Dorm</FormLabel>\n                              <FormControl>\n                                <Input\n                                  placeholder=\"Enter your dorm\"\n                                  {...field}\n                                  value={field.value || \"\"}\n                                  data-testid=\"input-profile-dorm\"\n                                />\n                              </FormControl>\n                            </FormItem>\n                          )}\n                        />\n                        \n                        <FormField\n                          control={form.control}\n                          name=\"college\"\n                          render={({ field }) => (\n                            <FormItem>\n                              <FormLabel>College</FormLabel>\n                              <FormControl>\n                                <Input\n                                  placeholder=\"Enter your college\"\n                                  {...field}\n                                  value={field.value || \"\"}\n                                  data-testid=\"input-profile-college\"\n                                />\n                              </FormControl>\n                            </FormItem>\n                          )}\n                        />\n                        \n                        <FormField\n                          control={form.control}\n                          name=\"gender\"\n                          render={({ field }) => (\n                            <FormItem>\n                              <FormLabel>Gender</FormLabel>\n                              <Select onValueChange={field.onChange} value={field.value}>\n                                <FormControl>\n                                  <SelectTrigger data-testid=\"select-profile-gender\">\n                                    <SelectValue placeholder=\"Select gender\" />\n                                  </SelectTrigger>\n                                </FormControl>\n                                <SelectContent>\n                                  <SelectItem value=\"male\">Male</SelectItem>\n                                  <SelectItem value=\"female\">Female</SelectItem>\n                                  <SelectItem value=\"other\">Other</SelectItem>\n                                  <SelectItem value=\"prefer_not_to_say\">Prefer not to say</SelectItem>\n                                </SelectContent>\n                              </Select>\n                            </FormItem>\n                          )}\n                        />\n                        \n                        <FormField\n                          control={form.control}\n                          name=\"bio\"\n                          render={({ field }) => (\n                            <FormItem>\n                              <FormLabel>Bio</FormLabel>\n                              <FormControl>\n                                <Textarea\n                                  placeholder=\"Tell us about yourself...\"\n                                  className=\"min-h-[100px]\"\n                                  {...field}\n                                  value={field.value || \"\"}\n                                  data-testid=\"textarea-profile-bio\"\n                                />\n                              </FormControl>\n                            </FormItem>\n                          )}\n                        />\n\n                        <div className=\"flex flex-col sm:flex-row gap-2 pt-2\">\n                          <Button \n                            type=\"submit\" \n                            className=\"flex-1\"\n                            data-testid=\"button-save-profile\"\n                            disabled={updateProfileMutation.isPending}\n                          >\n                            {updateProfileMutation.isPending ? (\n                              <>\n                                <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\n                                Saving...\n                              </>\n                            ) : (\n                              \"Save Changes\"\n                            )}\n                          </Button>\n                          <Button \n                            type=\"button\" \n                            variant=\"outline\" \n                            onClick={() => {\n                              setIsEditing(false);\n                              setPreviewUrl(null);\n                              setAvatarFile(null);\n                              form.reset();\n                            }}\n                            className=\"flex-1\"\n                            data-testid=\"button-cancel-edit\"\n                            disabled={updateProfileMutation.isPending}\n                          >\n                            Cancel\n                          </Button>\n                        </div>\n                      </form>\n                    </Form>\n                  )}\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Account Actions */}\n          <Card>\n            <CardHeader>\n              <CardTitle>Account</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-4\">\n                <div className=\"flex flex-col sm:flex-row justify-between items-start sm:items-center gap-4\">\n                  <div>\n                    <h3 className=\"font-medium\">Sign Out</h3>\n                    <p className=\"text-sm text-muted-foreground\">\n                      Sign out of your SlotSync account\n                    </p>\n                  </div>\n                  <Button\n                    variant=\"destructive\"\n                    onClick={handleLogout}\n                    data-testid=\"button-profile-logout\"\n                    className=\"w-full sm:w-auto\"\n                  >\n                    Sign Out\n                  </Button>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":20624},"client/src/components/UserDetailModal.tsx":{"content":"import { useState } from \"react\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogHeader,\n  DialogTitle,\n} from \"@/components/ui/dialog\";\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { Button } from \"@/components/ui/button\";\nimport StatusIndicator from \"./StatusIndicator\";\nimport ChatInterface from \"./ChatInterface\";\nimport { User } from \"@shared/schema\";\nimport { User as UserIcon, GraduationCap, Home, MapPin, Users, MessageSquare } from \"lucide-react\";\n\ntype StatusType = \"studying\" | \"free\" | \"in_class\" | \"busy\" | \"tired\" | \"social\";\n\ninterface UserDetailModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n  user: User | null;\n  currentUserId: string;\n  status?: StatusType;\n  currentClass?: string;\n  nextClass?: string;\n}\n\nexport default function UserDetailModal({\n  isOpen,\n  onClose,\n  user,\n  currentUserId,\n  status = \"free\",\n  currentClass,\n  nextClass\n}: UserDetailModalProps) {\n  const [showChat, setShowChat] = useState(false);\n  \n  if (!user) return null;\n\n  const handleStartChat = () => {\n    setShowChat(true);\n  };\n\n  const handleCloseChat = () => {\n    setShowChat(false);\n  };\n\n  const initials = user.username\n    .split(\" \")\n    .map(n => n[0])\n    .join(\"\")\n    .toUpperCase();\n\n  const getGenderBadgeVariant = (gender: string | null) => {\n    if (!gender || gender === \"prefer_not_to_say\") return \"secondary\";\n    return \"outline\";\n  };\n\n  const formatGenderDisplay = (gender: string | null) => {\n    if (!gender) return \"Not specified\";\n    if (gender === \"prefer_not_to_say\") return \"Prefer not to say\";\n    return gender.charAt(0).toUpperCase() + gender.slice(1);\n  };\n\n  return (\n    <Dialog open={isOpen} onOpenChange={() => onClose()}>\n      <DialogContent \n        className=\"max-w-md mx-auto max-h-[90vh] overflow-y-auto\"\n        data-testid=\"user-detail-modal\"\n      >\n        <DialogHeader className=\"pb-4\">\n          <DialogTitle className=\"text-center\">User Details</DialogTitle>\n        </DialogHeader>\n\n        <div className=\"space-y-6\">\n          {/* User Avatar and Basic Info */}\n          <div className=\"flex flex-col items-center text-center space-y-4\">\n            <Avatar className=\"h-20 w-20 border-2 border-border\">\n              {user.avatar && (\n                <AvatarImage \n                  src={user.avatar} \n                  alt={user.username} \n                  data-testid=\"user-avatar\"\n                />\n              )}\n              <AvatarFallback className=\"text-lg font-semibold\">\n                {initials}\n              </AvatarFallback>\n            </Avatar>\n\n            <div className=\"space-y-2\">\n              <div className=\"flex items-center justify-center gap-2\">\n                <h2 className=\"text-xl font-semibold\" data-testid=\"user-name\">\n                  {user.username}\n                </h2>\n                <StatusIndicator status={status} size=\"sm\" />\n              </div>\n\n              <p className=\"text-muted-foreground\" data-testid=\"user-major\">\n                {user.major}\n              </p>\n            </div>\n          </div>\n\n          <Separator />\n\n          {/* Status Information */}\n          {(currentClass || nextClass) && (\n            <Card>\n              <CardContent className=\"pt-4\">\n                <div className=\"space-y-2\">\n                  <h3 className=\"font-medium flex items-center gap-2\">\n                    <GraduationCap className=\"h-4 w-4\" />\n                    Class Status\n                  </h3>\n                  \n                  {currentClass && (\n                    <div className=\"text-sm\">\n                      <span className=\"text-muted-foreground\">Currently in: </span>\n                      <span className=\"font-medium text-primary\" data-testid=\"current-class\">\n                        {currentClass}\n                      </span>\n                    </div>\n                  )}\n                  \n                  {nextClass && (\n                    <div className=\"text-sm\">\n                      <span className=\"text-muted-foreground\">Next class: </span>\n                      <span className=\"font-medium\" data-testid=\"next-class\">\n                        {nextClass}\n                      </span>\n                    </div>\n                  )}\n                </div>\n              </CardContent>\n            </Card>\n          )}\n\n          {/* Personal Information */}\n          <div className=\"space-y-4\">\n            <h3 className=\"font-medium flex items-center gap-2\">\n              <UserIcon className=\"h-4 w-4\" />\n              Personal Information\n            </h3>\n\n            <div className=\"grid gap-3\">\n              {/* College */}\n              {user.college && (\n                <div className=\"flex items-center justify-between\">\n                  <span className=\"text-sm text-muted-foreground flex items-center gap-2\">\n                    <Users className=\"h-4 w-4\" />\n                    College\n                  </span>\n                  <span className=\"text-sm font-medium\" data-testid=\"user-college\">\n                    {user.college}\n                  </span>\n                </div>\n              )}\n\n              {/* Dorm */}\n              {user.dorm && (\n                <div className=\"flex items-center justify-between\">\n                  <span className=\"text-sm text-muted-foreground flex items-center gap-2\">\n                    <Home className=\"h-4 w-4\" />\n                    Dorm\n                  </span>\n                  <span className=\"text-sm font-medium\" data-testid=\"user-dorm\">\n                    {user.dorm}\n                  </span>\n                </div>\n              )}\n\n              {/* Gender */}\n              <div className=\"flex items-center justify-between\">\n                <span className=\"text-sm text-muted-foreground flex items-center gap-2\">\n                  <UserIcon className=\"h-4 w-4\" />\n                  Gender\n                </span>\n                <Badge \n                  variant={getGenderBadgeVariant(user.gender)}\n                  data-testid=\"user-gender\"\n                >\n                  {formatGenderDisplay(user.gender)}\n                </Badge>\n              </div>\n            </div>\n          </div>\n\n          {/* Bio Section */}\n          {user.bio && (\n            <>\n              <Separator />\n              <div className=\"space-y-3\">\n                <h3 className=\"font-medium flex items-center gap-2\">\n                  <MessageSquare className=\"h-4 w-4\" />\n                  About\n                </h3>\n                <Card>\n                  <CardContent className=\"pt-4\">\n                    <p className=\"text-sm text-muted-foreground leading-relaxed\" data-testid=\"user-bio\">\n                      {user.bio}\n                    </p>\n                  </CardContent>\n                </Card>\n              </div>\n            </>\n          )}\n\n          {/* Empty state message for minimal profiles */}\n          {!user.bio && !user.college && !user.dorm && (\n            <div className=\"text-center py-6\">\n              <p className=\"text-sm text-muted-foreground\">\n                This user hasn't shared additional details yet.\n              </p>\n            </div>\n          )}\n\n          {/* Chat functionality */}\n          <div className=\"pt-2\">\n            {!showChat ? (\n              <Button \n                className=\"w-full\" \n                onClick={handleStartChat}\n                variant=\"outline\"\n                data-testid=\"button-say-hello\"\n              >\n                <MessageSquare className=\"h-4 w-4 mr-2\" />\n                Say Hello\n              </Button>\n            ) : (\n              <div className=\"space-y-4\">\n                <ChatInterface\n                  currentUserId={currentUserId}\n                  otherUser={user}\n                  onClose={handleCloseChat}\n                  className=\"w-full\"\n                />\n              </div>\n            )}\n          </div>\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n}","size_bytes":8125},"client/src/components/ChatInterface.tsx":{"content":"import { useState, useEffect, useRef } from 'react';\nimport { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Avatar, AvatarFallback, AvatarImage } from '@/components/ui/avatar';\nimport { ScrollArea } from '@/components/ui/scroll-area';\nimport { Separator } from '@/components/ui/separator';\nimport { Send, X, AlertCircle } from 'lucide-react';\nimport { useWebSocket } from '@/hooks/useWebSocket';\nimport { apiRequest } from '@/lib/queryClient';\nimport { useToast } from '@/hooks/use-toast';\nimport { \n  Chat, \n  MessageWithSender, \n  User,\n  InsertMessage \n} from '@shared/schema';\nimport { format } from 'date-fns';\n\ninterface ChatInterfaceProps {\n  currentUserId: string;\n  otherUser: User;\n  onClose?: () => void;\n  className?: string;\n}\n\nexport default function ChatInterface({ \n  currentUserId, \n  otherUser, \n  onClose,\n  className = \"\"\n}: ChatInterfaceProps) {\n  const [messageInput, setMessageInput] = useState('');\n  const [currentChat, setCurrentChat] = useState<Chat | null>(null);\n  const [sendError, setSendError] = useState<string | null>(null);\n  const messagesEndRef = useRef<HTMLDivElement>(null);\n  const queryClient = useQueryClient();\n  const { toast } = useToast();\n  \n  // Validate currentUserId\n  const isValidUser = currentUserId && currentUserId.trim() !== '';\n  \n  const { \n    sendMessage: sendWebSocketMessage, \n    authenticate, \n    lastMessage, \n    isConnected,\n    connectionStatus \n  } = useWebSocket();\n\n  // Initialize WebSocket connection only if user is valid\n  useEffect(() => {\n    if (isValidUser) {\n      authenticate(currentUserId);\n    }\n  }, [currentUserId, authenticate, isValidUser]);\n\n  // Create or get existing chat\n  const { data: chat, isLoading: chatLoading } = useQuery({\n    queryKey: ['/api/chats', 'between', currentUserId, otherUser.id],\n    queryFn: async () => {\n      const response = await apiRequest('POST', '/api/chats', {\n        user1Id: currentUserId,\n        user2Id: otherUser.id\n      });\n      return response.json();\n    },\n    enabled: isValidUser && !!otherUser.id\n  });\n\n  // Set current chat when loaded\n  useEffect(() => {\n    if (chat) {\n      setCurrentChat(chat);\n    }\n  }, [chat]);\n\n  // Fetch messages for current chat\n  const { data: messages = [], isLoading: messagesLoading } = useQuery({\n    queryKey: ['/api/chats', currentChat?.id, 'messages'],\n    queryFn: async () => {\n      if (!currentChat?.id) return [];\n      const response = await fetch(`/api/chats/${currentChat.id}/messages?limit=50`);\n      return response.json();\n    },\n    enabled: !!currentChat?.id\n  });\n\n  // Send message mutation\n  const sendMessageMutation = useMutation({\n    mutationFn: async (messageData: InsertMessage) => {\n      const response = await apiRequest(\n        'POST', \n        `/api/chats/${currentChat?.id}/messages`, \n        messageData\n      );\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ \n        queryKey: ['/api/chats', currentChat?.id, 'messages'] \n      });\n    }\n  });\n\n  // Handle new messages from WebSocket\n  useEffect(() => {\n    if (lastMessage && lastMessage.chatId === currentChat?.id) {\n      queryClient.invalidateQueries({ \n        queryKey: ['/api/chats', currentChat?.id, 'messages'] \n      });\n    }\n  }, [lastMessage, currentChat?.id, queryClient]);\n\n  // Auto-scroll to bottom when new messages arrive\n  useEffect(() => {\n    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });\n  }, [messages]);\n\n  const handleSendMessage = async () => {\n    // Validate preconditions\n    if (!isValidUser) {\n      setSendError('Please log in to send messages');\n      toast({\n        title: 'Authentication Required',\n        description: 'Please log in to send messages',\n        variant: 'destructive'\n      });\n      return;\n    }\n    \n    if (!messageInput.trim() || !currentChat || sendMessageMutation.isPending) {\n      return;\n    }\n\n    setSendError(null);\n    \n    const messageData: InsertMessage = {\n      chatId: currentChat.id,\n      senderId: currentUserId,\n      content: messageInput.trim(),\n      messageType: 'text'\n    };\n\n    try {\n      // Always send via HTTP for consistency and reliability\n      // WebSocket is used only for real-time updates\n      await sendMessageMutation.mutateAsync(messageData);\n      setMessageInput('');\n    } catch (error: any) {\n      console.error('Failed to send message:', error);\n      const errorMessage = error?.message || 'Failed to send message. Please try again.';\n      setSendError(errorMessage);\n      toast({\n        title: 'Message Failed',\n        description: errorMessage,\n        variant: 'destructive'\n      });\n    }\n  };\n\n  const handleKeyPress = (e: React.KeyboardEvent) => {\n    if (e.key === 'Enter' && !e.shiftKey) {\n      e.preventDefault();\n      handleSendMessage();\n    }\n  };\n\n  const formatMessageTime = (timestamp: string | Date) => {\n    return format(new Date(timestamp), 'HH:mm');\n  };\n\n  const getInitials = (name: string) => {\n    return name.split(' ').map(n => n[0]).join('').toUpperCase();\n  };\n\n  // Show error state for invalid user\n  if (!isValidUser) {\n    return (\n      <Card className={className}>\n        <CardContent className=\"flex flex-col items-center justify-center h-96 text-center\">\n          <AlertCircle className=\"h-12 w-12 text-muted-foreground mb-4\" />\n          <div className=\"text-lg font-medium mb-2\">Authentication Required</div>\n          <div className=\"text-muted-foreground mb-4\">\n            Please log in to start chatting with {otherUser.username}\n          </div>\n          {onClose && (\n            <Button variant=\"outline\" onClick={onClose}>\n              Close\n            </Button>\n          )}\n        </CardContent>\n      </Card>\n    );\n  }\n  \n  if (chatLoading) {\n    return (\n      <Card className={className}>\n        <CardContent className=\"flex items-center justify-center h-96\">\n          <div className=\"text-muted-foreground\">Loading chat...</div>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  return (\n    <Card className={className}>\n      <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n        <CardTitle className=\"flex items-center gap-3\">\n          <Avatar className=\"h-8 w-8\">\n            {otherUser.avatar && (\n              <AvatarImage src={otherUser.avatar} alt={otherUser.username} />\n            )}\n            <AvatarFallback className=\"text-sm\">\n              {getInitials(otherUser.username)}\n            </AvatarFallback>\n          </Avatar>\n          <div>\n            <div className=\"font-medium\" data-testid=\"chat-user-name\">\n              {otherUser.username}\n            </div>\n            <div className=\"text-xs text-muted-foreground\">\n              {connectionStatus === 'connected' ? 'Online' : 'Offline'}\n            </div>\n          </div>\n        </CardTitle>\n        {onClose && (\n          <Button \n            variant=\"ghost\" \n            size=\"icon\" \n            onClick={onClose}\n            data-testid=\"button-close-chat\"\n          >\n            <X className=\"h-4 w-4\" />\n          </Button>\n        )}\n      </CardHeader>\n      \n      <Separator />\n\n      <CardContent className=\"flex flex-col h-96 p-0\">\n        {/* Messages Area */}\n        <ScrollArea className=\"flex-1 p-4\" data-testid=\"messages-container\">\n          {messagesLoading ? (\n            <div className=\"flex items-center justify-center h-full\">\n              <div className=\"text-muted-foreground\">Loading messages...</div>\n            </div>\n          ) : messages.length === 0 ? (\n            <div className=\"flex flex-col items-center justify-center h-full text-center\">\n              <div className=\"text-muted-foreground mb-2\">\n                No messages yet\n              </div>\n              <div className=\"text-sm text-muted-foreground\">\n                Start the conversation by saying hello!\n              </div>\n            </div>\n          ) : (\n            <div className=\"space-y-4\">\n              {messages.map((message: MessageWithSender) => {\n                const isOwnMessage = message.senderId === currentUserId;\n                return (\n                  <div\n                    key={message.id}\n                    className={`flex ${isOwnMessage ? 'justify-end' : 'justify-start'}`}\n                    data-testid={`message-${message.id}`}\n                  >\n                    <div\n                      className={`max-w-xs lg:max-w-md px-3 py-2 rounded-lg ${\n                        isOwnMessage\n                          ? 'bg-primary text-primary-foreground'\n                          : 'bg-muted'\n                      }`}\n                    >\n                      <div className=\"text-sm\">{message.content}</div>\n                      <div\n                        className={`text-xs mt-1 ${\n                          isOwnMessage\n                            ? 'text-primary-foreground/70'\n                            : 'text-muted-foreground'\n                        }`}\n                      >\n                        {formatMessageTime(message.sentAt!)}\n                      </div>\n                    </div>\n                  </div>\n                );\n              })}\n              <div ref={messagesEndRef} />\n            </div>\n          )}\n        </ScrollArea>\n\n        <Separator />\n\n        {/* Message Input Area */}\n        <div className=\"p-4\">\n          {!isValidUser ? (\n            <div className=\"flex items-center justify-center p-4 bg-muted rounded-lg\">\n              <div className=\"text-center text-muted-foreground\">\n                <AlertCircle className=\"h-5 w-5 mx-auto mb-2\" />\n                <div className=\"text-sm\">Please log in to send messages</div>\n              </div>\n            </div>\n          ) : (\n            <>\n              <div className=\"flex gap-2\">\n                <Input\n                  placeholder=\"Type a message...\"\n                  value={messageInput}\n                  onChange={(e) => setMessageInput(e.target.value)}\n                  onKeyPress={handleKeyPress}\n                  disabled={sendMessageMutation.isPending || !isValidUser}\n                  data-testid=\"input-message\"\n                  className=\"flex-1\"\n                />\n                <Button\n                  onClick={handleSendMessage}\n                  disabled={\n                    !isValidUser ||\n                    !messageInput.trim() || \n                    sendMessageMutation.isPending || \n                    !currentChat\n                  }\n                  size=\"icon\"\n                  data-testid=\"button-send-message\"\n                >\n                  <Send className=\"h-4 w-4\" />\n                </Button>\n              </div>\n              \n              {/* Error message display */}\n              {sendError && (\n                <div className=\"text-xs text-destructive mt-2 flex items-center gap-1\">\n                  <AlertCircle className=\"h-3 w-3\" />\n                  {sendError}\n                </div>\n              )}\n              \n              {/* Connection status */}\n              {connectionStatus !== 'connected' && (\n                <div className=\"text-xs text-muted-foreground mt-2\">\n                  {connectionStatus === 'connecting' ? 'Connecting...' : 'Offline - messages will be sent via HTTP'}\n                </div>\n              )}\n            </>\n          )}\n        </div>\n      </CardContent>\n    </Card>\n  );\n}","size_bytes":11586},"client/src/hooks/useWebSocket.ts":{"content":"import { useState, useEffect, useCallback, useRef } from 'react';\nimport { WebSocketMessage, MessageWithSender } from '@shared/schema';\n\nexport interface UseWebSocketReturn {\n  isConnected: boolean;\n  sendMessage: (message: Omit<WebSocketMessage, 'type'> & { type?: string }) => void;\n  authenticate: (userId: string) => Promise<void>;\n  disconnect: () => void;\n  lastMessage: MessageWithSender | null;\n  connectionStatus: 'connecting' | 'connected' | 'disconnected' | 'error';\n}\n\nexport function useWebSocket(): UseWebSocketReturn {\n  const [isConnected, setIsConnected] = useState(false);\n  const [connectionStatus, setConnectionStatus] = useState<'connecting' | 'connected' | 'disconnected' | 'error'>('disconnected');\n  const [lastMessage, setLastMessage] = useState<MessageWithSender | null>(null);\n  const wsRef = useRef<WebSocket | null>(null);\n  const userIdRef = useRef<string | null>(null);\n  const reconnectTimeoutRef = useRef<NodeJS.Timeout | null>(null);\n  const reconnectAttemptsRef = useRef(0);\n  const maxReconnectAttempts = 5;\n\n  const getWebSocketUrl = () => {\n    const protocol = window.location.protocol === 'https:' ? 'wss:' : 'ws:';\n    let host = window.location.host;\n    \n    // Handle cases where port might be undefined or missing\n    if (!host || host.includes('undefined')) {\n      // Fallback to current host with explicit port\n      const hostname = window.location.hostname || 'localhost';\n      const port = window.location.port || '5000';\n      host = `${hostname}:${port}`;\n    }\n    \n    return `${protocol}//${host}/ws`;\n  };\n\n  const connect = useCallback(() => {\n    if (wsRef.current?.readyState === WebSocket.OPEN) {\n      return;\n    }\n\n    setConnectionStatus('connecting');\n    \n    try {\n      const wsUrl = getWebSocketUrl();\n      const ws = new WebSocket(wsUrl);\n      wsRef.current = ws;\n\n      ws.onopen = async () => {\n        console.log('WebSocket connected');\n        setIsConnected(true);\n        setConnectionStatus('connected');\n        reconnectAttemptsRef.current = 0;\n\n        // Authenticate with secure token if userId is available\n        if (userIdRef.current) {\n          try {\n            // Check if we already have a token stored\n            const storedToken = (ws as any)._authToken;\n            \n            if (storedToken) {\n              ws.send(JSON.stringify({\n                type: 'auth',\n                data: { token: storedToken, userId: userIdRef.current }\n              }));\n              console.log('WebSocket authenticating with stored token');\n            } else {\n              // Get fresh token\n              const response = await fetch('/api/auth/ws-token', {\n                method: 'POST',\n                credentials: 'include',\n                headers: {\n                  'Content-Type': 'application/json'\n                }\n              });\n              \n              if (response.ok) {\n                const { token, userId: authenticatedUserId } = await response.json();\n                userIdRef.current = authenticatedUserId;\n                \n                ws.send(JSON.stringify({\n                  type: 'auth',\n                  data: { token, userId: authenticatedUserId }\n                }));\n                \n                console.log('WebSocket authenticated with fresh token for user:', authenticatedUserId);\n              } else {\n                console.error('Failed to get authentication token on WebSocket open');\n                setConnectionStatus('error');\n              }\n            }\n          } catch (error) {\n            console.error('Error authenticating WebSocket on open:', error);\n            setConnectionStatus('error');\n          }\n        }\n      };\n\n      ws.onmessage = (event) => {\n        try {\n          const message: WebSocketMessage = JSON.parse(event.data);\n          \n          switch (message.type) {\n            case 'message':\n              setLastMessage(message.data as MessageWithSender);\n              break;\n            case 'user_online':\n              console.log('User online status:', message.data);\n              break;\n            case 'user_offline':\n              console.log('User offline status:', message.data);\n              break;\n            case 'typing':\n              // Handle typing indicators\n              console.log('Typing indicator:', message.data);\n              break;\n            case 'read_receipt':\n              // Handle read receipts\n              console.log('Read receipt:', message.data);\n              break;\n            case 'error':\n              console.error('WebSocket error message:', message.data);\n              break;\n            default:\n              console.log('Unknown message type:', message.type);\n          }\n        } catch (error) {\n          console.error('Error parsing WebSocket message:', error);\n        }\n      };\n\n      ws.onclose = (event) => {\n        console.log('WebSocket disconnected:', event.code, event.reason);\n        setIsConnected(false);\n        setConnectionStatus('disconnected');\n        wsRef.current = null;\n\n        // Attempt to reconnect if not a clean close and we have attempts left\n        if (event.code !== 1000 && reconnectAttemptsRef.current < maxReconnectAttempts) {\n          const delay = Math.pow(2, reconnectAttemptsRef.current) * 1000; // Exponential backoff\n          console.log(`Attempting to reconnect in ${delay}ms (attempt ${reconnectAttemptsRef.current + 1}/${maxReconnectAttempts})`);\n          \n          reconnectTimeoutRef.current = setTimeout(() => {\n            reconnectAttemptsRef.current++;\n            connect();\n          }, delay);\n        }\n      };\n\n      ws.onerror = (error) => {\n        console.error('WebSocket error:', error);\n        setConnectionStatus('error');\n      };\n\n    } catch (error) {\n      console.error('Failed to create WebSocket connection:', error);\n      setConnectionStatus('error');\n    }\n  }, []);\n\n  const disconnect = useCallback(() => {\n    if (reconnectTimeoutRef.current) {\n      clearTimeout(reconnectTimeoutRef.current);\n      reconnectTimeoutRef.current = null;\n    }\n    \n    if (wsRef.current) {\n      wsRef.current.close(1000, 'User initiated disconnect');\n      wsRef.current = null;\n    }\n    \n    setIsConnected(false);\n    setConnectionStatus('disconnected');\n    userIdRef.current = null;\n    reconnectAttemptsRef.current = 0;\n  }, []);\n\n  const sendMessage = useCallback((message: Omit<WebSocketMessage, 'type'> & { type?: string }) => {\n    if (wsRef.current?.readyState === WebSocket.OPEN) {\n      const fullMessage: WebSocketMessage = {\n        type: message.type || 'message',\n        data: message.data\n      };\n      \n      wsRef.current.send(JSON.stringify(fullMessage));\n    } else {\n      console.warn('WebSocket is not connected, cannot send message');\n    }\n  }, []);\n\n  const authenticate = useCallback(async (userId: string) => {\n    userIdRef.current = userId;\n    \n    try {\n      // SECURITY: Get secure authentication token from server instead of trusting userId\n      const response = await fetch('/api/auth/ws-token', {\n        method: 'POST',\n        credentials: 'include', // Include session cookies\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      });\n      \n      if (!response.ok) {\n        console.error('Failed to get WebSocket authentication token:', response.status);\n        setConnectionStatus('error');\n        return;\n      }\n      \n      const { token, userId: authenticatedUserId } = await response.json();\n      \n      // Update to use the server-verified userId\n      userIdRef.current = authenticatedUserId;\n      \n      if (wsRef.current?.readyState === WebSocket.OPEN) {\n        // Send secure token for authentication instead of raw userId\n        sendMessage({\n          type: 'auth',\n          data: { token, userId: authenticatedUserId } // Include both for backward compatibility\n        });\n        \n        console.log('WebSocket authenticating with secure token for user:', authenticatedUserId);\n      } else {\n        // Store token for when connection opens\n        (wsRef.current as any)._authToken = token;\n        connect();\n      }\n    } catch (error) {\n      console.error('Error getting WebSocket authentication token:', error);\n      setConnectionStatus('error');\n    }\n  }, [connect, sendMessage]);\n\n  // Cleanup on unmount\n  useEffect(() => {\n    return () => {\n      disconnect();\n    };\n  }, [disconnect]);\n\n  return {\n    isConnected,\n    sendMessage,\n    authenticate,\n    disconnect,\n    lastMessage,\n    connectionStatus\n  };\n}","size_bytes":8543},"security-test.js":{"content":"#!/usr/bin/env node\n\n/**\n * WebSocket Security Test Suite\n * Tests critical security fixes for chat system authentication and authorization\n */\n\nimport WebSocket from 'ws';\n\nconst WS_URL = 'ws://localhost:5000/ws';\nconst API_BASE = 'http://localhost:5000/api';\n\n// Test utilities\nfunction createWebSocket() {\n  return new WebSocket(WS_URL);\n}\n\nfunction sendMessage(ws, type, data) {\n  return new Promise((resolve, reject) => {\n    const message = JSON.stringify({ type, data });\n    ws.send(message);\n    \n    // Wait for response\n    const timeout = setTimeout(() => {\n      reject(new Error('Response timeout'));\n    }, 5000);\n    \n    ws.once('message', (response) => {\n      clearTimeout(timeout);\n      try {\n        resolve(JSON.parse(response.toString()));\n      } catch (error) {\n        reject(error);\n      }\n    });\n  });\n}\n\nasync function delay(ms) {\n  return new Promise(resolve => setTimeout(resolve, ms));\n}\n\n// Test 1: Non-existent user authentication should be rejected\nasync function testNonExistentUserAuth() {\n  console.log('\\n🔒 Testing non-existent user authentication...');\n  \n  const ws = createWebSocket();\n  \n  return new Promise((resolve, reject) => {\n    ws.on('open', async () => {\n      try {\n        console.log('   Attempting to authenticate with non-existent user: fake-user-123');\n        \n        // Try to authenticate as non-existent user\n        const response = await sendMessage(ws, 'auth', { userId: 'fake-user-123' });\n        \n        if (response.type === 'error') {\n          console.log('   ✅ PASS: Authentication rejected for non-existent user');\n          console.log(`   Response: ${response.data.message}`);\n          resolve(true);\n        } else {\n          console.log('   ❌ FAIL: Authentication should have been rejected');\n          resolve(false);\n        }\n      } catch (error) {\n        console.log(`   ❌ FAIL: Error during test: ${error.message}`);\n        resolve(false);\n      }\n    });\n    \n    ws.on('close', (code, reason) => {\n      if (code === 4001) {\n        console.log('   ✅ PASS: Connection closed with security code 4001');\n        resolve(true);\n      }\n    });\n    \n    ws.on('error', (error) => {\n      console.log(`   ❌ FAIL: WebSocket error: ${error.message}`);\n      resolve(false);\n    });\n    \n    // Test timeout\n    setTimeout(() => {\n      console.log('   ❌ FAIL: Test timeout');\n      ws.close();\n      resolve(false);\n    }, 10000);\n  });\n}\n\n// Test 2: Valid user authentication should succeed  \nasync function testValidUserAuth() {\n  console.log('\\n🔓 Testing valid user authentication...');\n  \n  try {\n    // First create a test user via HTTP API\n    const response = await fetch(`${API_BASE}/users`, {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify({\n        username: 'test-user-security',\n        major: 'Computer Science'\n      })\n    });\n    \n    if (!response.ok) {\n      console.log('   ❌ FAIL: Could not create test user');\n      return false;\n    }\n    \n    const user = await response.json();\n    console.log(`   Created test user: ${user.id}`);\n    \n    // Now test WebSocket authentication\n    const ws = createWebSocket();\n    \n    return new Promise((resolve) => {\n      ws.on('open', async () => {\n        try {\n          console.log('   Attempting to authenticate with valid user...');\n          \n          const authResponse = await sendMessage(ws, 'auth', { userId: user.id });\n          \n          if (authResponse.type === 'user_online') {\n            console.log('   ✅ PASS: Valid user authentication succeeded');\n            console.log(`   User online status: ${authResponse.data.status}`);\n            ws.close();\n            resolve(true);\n          } else {\n            console.log('   ❌ FAIL: Expected user_online response');\n            ws.close();\n            resolve(false);\n          }\n        } catch (error) {\n          console.log(`   ❌ FAIL: Error during authentication: ${error.message}`);\n          ws.close();\n          resolve(false);\n        }\n      });\n      \n      ws.on('error', (error) => {\n        console.log(`   ❌ FAIL: WebSocket error: ${error.message}`);\n        resolve(false);\n      });\n      \n      // Test timeout\n      setTimeout(() => {\n        console.log('   ❌ FAIL: Test timeout');\n        ws.close();\n        resolve(false);\n      }, 10000);\n    });\n    \n  } catch (error) {\n    console.log(`   ❌ FAIL: Test setup error: ${error.message}`);\n    return false;\n  }\n}\n\n// Test 3: Unauthorized message operations should be blocked\nasync function testUnauthorizedMessageOperations() {\n  console.log('\\n🚫 Testing unauthorized message operations...');\n  \n  const ws = createWebSocket();\n  \n  return new Promise((resolve) => {\n    ws.on('open', async () => {\n      try {\n        console.log('   Attempting to send message without authentication...');\n        \n        // Try to send message without authenticating\n        const response = await sendMessage(ws, 'message', {\n          senderId: 'fake-user',\n          chatId: 'fake-chat', \n          content: 'This should be blocked!'\n        });\n        \n        if (response.type === 'error' && response.data.message.includes('not authenticated')) {\n          console.log('   ✅ PASS: Unauthenticated message operation blocked');\n          console.log(`   Response: ${response.data.message}`);\n          ws.close();\n          resolve(true);\n        } else {\n          console.log('   ❌ FAIL: Unauthenticated operation should have been blocked');\n          ws.close();\n          resolve(false);\n        }\n      } catch (error) {\n        console.log(`   ❌ FAIL: Error during test: ${error.message}`);\n        ws.close();\n        resolve(false);\n      }\n    });\n    \n    ws.on('error', (error) => {\n      console.log(`   ❌ FAIL: WebSocket error: ${error.message}`);\n      resolve(false);\n    });\n    \n    // Test timeout\n    setTimeout(() => {\n      console.log('   ❌ FAIL: Test timeout');\n      ws.close();\n      resolve(false);\n    }, 10000);\n  });\n}\n\n// Main test runner\nasync function runSecurityTests() {\n  console.log('🔐 WebSocket Security Test Suite');\n  console.log('================================');\n  \n  const results = [];\n  \n  try {\n    // Test 1: Non-existent user authentication\n    results.push(await testNonExistentUserAuth());\n    \n    await delay(1000);\n    \n    // Test 2: Valid user authentication\n    results.push(await testValidUserAuth());\n    \n    await delay(1000);\n    \n    // Test 3: Unauthorized operations\n    results.push(await testUnauthorizedMessageOperations());\n    \n  } catch (error) {\n    console.log(`❌ Test suite error: ${error.message}`);\n  }\n  \n  // Results summary\n  console.log('\\n📊 Test Results Summary');\n  console.log('=======================');\n  const passed = results.filter(Boolean).length;\n  const total = results.length;\n  \n  console.log(`Passed: ${passed}/${total}`);\n  \n  if (passed === total) {\n    console.log('🎉 All security tests PASSED! WebSocket security is working correctly.');\n    process.exit(0);\n  } else {\n    console.log('⚠️  Some security tests FAILED! Please review the implementation.');\n    process.exit(1);\n  }\n}\n\n// WebSocket module check is handled by ES import\n\n// Run tests\nrunSecurityTests().catch(error => {\n  console.error('❌ Test suite crashed:', error);\n  process.exit(1);\n});","size_bytes":7361},"simple-ws-test.js":{"content":"#!/usr/bin/env node\n\n/**\n * Simple WebSocket Connection Test\n * Tests basic WebSocket connectivity to verify server is working\n */\n\nimport WebSocket from 'ws';\n\nconst WS_URL = 'ws://localhost:5000/ws';\n\nconsole.log('🔌 Testing WebSocket Connection...');\nconsole.log(`Connecting to: ${WS_URL}`);\n\nconst ws = new WebSocket(WS_URL);\n\nws.on('open', () => {\n  console.log('✅ WebSocket connection established!');\n  console.log('📤 Sending test auth message...');\n  \n  // Send a test auth message\n  ws.send(JSON.stringify({\n    type: 'auth',\n    data: { userId: 'test-connection' }\n  }));\n});\n\nws.on('message', (data) => {\n  console.log('📥 Received message:', data.toString());\n  try {\n    const message = JSON.parse(data.toString());\n    console.log('📨 Parsed message:', message);\n    \n    if (message.type === 'error') {\n      console.log('✅ GOOD: Server correctly rejected invalid user auth');\n    }\n  } catch (error) {\n    console.log('⚠️  Could not parse message as JSON:', error.message);\n  }\n  \n  ws.close();\n});\n\nws.on('close', (code, reason) => {\n  console.log(`🔌 Connection closed: ${code} - ${reason}`);\n  if (code === 4001) {\n    console.log('✅ GOOD: Server closed connection with security code (authentication failed)');\n  }\n  process.exit(0);\n});\n\nws.on('error', (error) => {\n  console.log('❌ WebSocket error:', error.message);\n  console.log('🔍 Debugging info:');\n  console.log('   - Check if server is running on port 5000');\n  console.log('   - Check if WebSocket server is properly initialized');\n  console.log('   - Check for any server-side errors');\n  process.exit(1);\n});\n\n// Timeout after 10 seconds\nsetTimeout(() => {\n  console.log('⏰ Connection timeout after 10 seconds');\n  console.log('❌ Could not establish WebSocket connection');\n  ws.close();\n  process.exit(1);\n}, 10000);","size_bytes":1826},"client/src/components/ProtectedRoute.tsx":{"content":"import { useEffect } from \"react\";\nimport { useLocation } from \"wouter\";\nimport { useAuth } from \"@/contexts/AuthContext\";\nimport { Loader2 } from \"lucide-react\";\n\ninterface ProtectedRouteProps {\n  children: React.ReactNode;\n  fallback?: React.ReactNode;\n  redirectTo?: string;\n}\n\nexport default function ProtectedRoute({ \n  children, \n  fallback,\n  redirectTo = '/login'\n}: ProtectedRouteProps) {\n  const { isAuthenticated, isLoading } = useAuth();\n  const [, setLocation] = useLocation();\n\n  useEffect(() => {\n    if (!isLoading && !isAuthenticated) {\n      setLocation(redirectTo);\n    }\n  }, [isAuthenticated, isLoading, redirectTo, setLocation]);\n\n  if (isLoading) {\n    return fallback || (\n      <div className=\"min-h-screen flex items-center justify-center\">\n        <div className=\"flex items-center gap-2\">\n          <Loader2 className=\"h-4 w-4 animate-spin\" />\n          <span className=\"text-muted-foreground\">Loading...</span>\n        </div>\n      </div>\n    );\n  }\n\n  if (!isAuthenticated) {\n    return fallback || null;\n  }\n\n  return <>{children}</>;\n}","size_bytes":1067},"client/src/contexts/AuthContext.tsx":{"content":"import { createContext, useContext, useEffect, useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { useLocation } from \"wouter\";\nimport { type PublicUser } from \"@shared/schema\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\n\ninterface AuthContextType {\n  user: PublicUser | null;\n  isAuthenticated: boolean;\n  isLoading: boolean;\n  login: (username: string, password: string) => Promise<void>;\n  register: (username: string, password: string, confirmPassword: string, major: string, fullName?: string) => Promise<void>;\n  logout: () => Promise<void>;\n  refetchUser: () => void;\n}\n\nconst AuthContext = createContext<AuthContextType | undefined>(undefined);\n\nexport const useAuth = () => {\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error(\"useAuth must be used within an AuthProvider\");\n  }\n  return context;\n};\n\ninterface AuthProviderProps {\n  children: React.ReactNode;\n}\n\nexport const AuthProvider = ({ children }: AuthProviderProps) => {\n  const [, setLocation] = useLocation();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  // Query to get current user\n  const {\n    data: userData,\n    isLoading,\n    refetch: refetchUser,\n    error,\n  } = useQuery({\n    queryKey: ['/api/auth/me'],\n    queryFn: async () => {\n      const response = await apiRequest('GET', '/api/auth/me');\n      return await response.json();\n    },\n    retry: false,\n    refetchOnWindowFocus: false,\n  });\n\n  const user = userData?.user || null;\n  const isAuthenticated = !!user;\n\n  // Handle authentication errors\n  useEffect(() => {\n    if (error && (error as any)?.status === 401) {\n      // Clear any cached data on auth error\n      queryClient.clear();\n    }\n  }, [error, queryClient]);\n\n  // Login mutation\n  const loginMutation = useMutation({\n    mutationFn: async ({ username, password }: { username: string; password: string }) => {\n      const response = await apiRequest('POST', '/api/auth/login', { username, password });\n      return await response.json();\n    },\n    onSuccess: (data) => {\n      // Refetch user data and invalidate all queries\n      refetchUser();\n      queryClient.invalidateQueries();\n      toast({\n        title: \"Welcome back!\",\n        description: data.message,\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Login failed\",\n        description: error.message || \"Please check your credentials and try again\",\n        variant: \"destructive\",\n      });\n      throw error;\n    },\n  });\n\n  // Register mutation\n  const registerMutation = useMutation({\n    mutationFn: async ({ username, password, confirmPassword, major, fullName }: { username: string; password: string; confirmPassword: string; major: string; fullName?: string }) => {\n      const registerData = { username, password, confirmPassword, major, ...(fullName && { fullName }) };\n      const response = await apiRequest('POST', '/api/auth/register', registerData);\n      return await response.json();\n    },\n    onSuccess: (data) => {\n      // Refetch user data and invalidate all queries\n      refetchUser();\n      queryClient.invalidateQueries();\n      toast({\n        title: \"Account created successfully!\",\n        description: data.message,\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Registration failed\",\n        description: error.message || \"Please check your information and try again\",\n        variant: \"destructive\",\n      });\n      throw error;\n    },\n  });\n\n  // Logout mutation\n  const logoutMutation = useMutation({\n    mutationFn: async () => {\n      const response = await apiRequest('POST', '/api/auth/logout');\n      return await response.json();\n    },\n    onSuccess: () => {\n      // Clear all cached data and redirect\n      queryClient.clear();\n      setLocation('/login');\n      toast({\n        title: \"Logged out\",\n        description: \"You have been logged out successfully\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Logout failed\",\n        description: error.message || \"Failed to logout properly\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const login = async (username: string, password: string) => {\n    await loginMutation.mutateAsync({ username, password });\n  };\n\n  const register = async (username: string, password: string, confirmPassword: string, major: string, fullName?: string) => {\n    await registerMutation.mutateAsync({ username, password, confirmPassword, major, fullName });\n  };\n\n  const logout = async () => {\n    await logoutMutation.mutateAsync();\n  };\n\n  const contextValue: AuthContextType = {\n    user,\n    isAuthenticated,\n    isLoading,\n    login,\n    register,\n    logout,\n    refetchUser,\n  };\n\n  return (\n    <AuthContext.Provider value={contextValue}>\n      {children}\n    </AuthContext.Provider>\n  );\n};","size_bytes":4920},"client/src/pages/Login.tsx":{"content":"import { useState } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { Link, useLocation } from \"wouter\";\nimport { loginUserSchema, type LoginUser } from \"@shared/schema\";\nimport { useAuth } from \"@/contexts/AuthContext\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { Input } from \"@/components/ui/input\";\nimport { Alert, AlertDescription } from \"@/components/ui/alert\";\nimport { Loader2, Eye, EyeOff } from \"lucide-react\";\n\nexport default function Login() {\n  const [, setLocation] = useLocation();\n  const [showPassword, setShowPassword] = useState(false);\n  const [isLoggingIn, setIsLoggingIn] = useState(false);\n  const { login } = useAuth();\n  const { toast } = useToast();\n\n  const form = useForm<LoginUser>({\n    resolver: zodResolver(loginUserSchema),\n    defaultValues: {\n      username: \"\",\n      password: \"\",\n    },\n  });\n\n  const onSubmit = async (data: LoginUser) => {\n    try {\n      setIsLoggingIn(true);\n      await login(data.username, data.password);\n      // Redirect to home page after successful login\n      setLocation('/');\n    } catch (error: any) {\n      // Error handling is done in AuthContext, but we can add additional handling here if needed\n      console.error('Login error:', error);\n    } finally {\n      setIsLoggingIn(false);\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen flex items-center justify-center bg-gray-50 dark:bg-gray-900 py-12 px-4 sm:px-6 lg:px-8\">\n      <Card className=\"w-full max-w-md\">\n        <CardHeader className=\"space-y-1\">\n          <CardTitle className=\"text-2xl font-bold text-center\" data-testid=\"text-login-title\">\n            Sign in to your account\n          </CardTitle>\n          <CardDescription className=\"text-center\" data-testid=\"text-login-description\">\n            Welcome back! Please enter your credentials\n          </CardDescription>\n        </CardHeader>\n        <CardContent>\n          <Form {...form}>\n            <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n              <FormField\n                control={form.control}\n                name=\"username\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel data-testid=\"text-username-label\">Username</FormLabel>\n                    <FormControl>\n                      <Input\n                        {...field}\n                        placeholder=\"Enter your username\"\n                        data-testid=\"input-username\"\n                        autoComplete=\"username\"\n                      />\n                    </FormControl>\n                    <FormMessage data-testid=\"text-username-error\" />\n                  </FormItem>\n                )}\n              />\n              <FormField\n                control={form.control}\n                name=\"password\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel data-testid=\"text-password-label\">Password</FormLabel>\n                    <FormControl>\n                      <div className=\"relative\">\n                        <Input\n                          {...field}\n                          type={showPassword ? \"text\" : \"password\"}\n                          placeholder=\"Enter your password\"\n                          data-testid=\"input-password\"\n                          autoComplete=\"current-password\"\n                        />\n                        <Button\n                          type=\"button\"\n                          variant=\"ghost\"\n                          size=\"icon\"\n                          className=\"absolute right-0 top-0 h-full px-3 hover-elevate\"\n                          onClick={() => setShowPassword(!showPassword)}\n                          data-testid=\"button-toggle-password\"\n                        >\n                          {showPassword ? (\n                            <EyeOff className=\"h-4 w-4\" />\n                          ) : (\n                            <Eye className=\"h-4 w-4\" />\n                          )}\n                        </Button>\n                      </div>\n                    </FormControl>\n                    <FormMessage data-testid=\"text-password-error\" />\n                  </FormItem>\n                )}\n              />\n\n\n              <Button\n                type=\"submit\"\n                className=\"w-full\"\n                disabled={isLoggingIn}\n                data-testid=\"button-login\"\n              >\n                {isLoggingIn ? (\n                  <>\n                    <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\n                    Signing in...\n                  </>\n                ) : (\n                  'Sign in'\n                )}\n              </Button>\n            </form>\n          </Form>\n\n          <div className=\"mt-6 text-center\">\n            <p className=\"text-sm text-muted-foreground\" data-testid=\"text-register-prompt\">\n              Don't have an account?{' '}\n              <Link href=\"/register\">\n                <Button variant=\"link\" className=\"p-0 h-auto font-medium\" data-testid=\"link-register\">\n                  Sign up here\n                </Button>\n              </Link>\n            </p>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":5519},"client/src/pages/Register.tsx":{"content":"import { useState } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { Link, useLocation } from \"wouter\";\nimport { registerUserSchema, type RegisterUser } from \"@shared/schema\";\nimport { useAuth } from \"@/contexts/AuthContext\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { Input } from \"@/components/ui/input\";\nimport { Alert, AlertDescription } from \"@/components/ui/alert\";\nimport { Loader2, Eye, EyeOff } from \"lucide-react\";\n\nexport default function Register() {\n  const [, setLocation] = useLocation();\n  const [showPassword, setShowPassword] = useState(false);\n  const [showConfirmPassword, setShowConfirmPassword] = useState(false);\n  const [isRegistering, setIsRegistering] = useState(false);\n  const { register } = useAuth();\n  const { toast } = useToast();\n\n  const form = useForm<RegisterUser>({\n    resolver: zodResolver(registerUserSchema),\n    defaultValues: {\n      username: \"\",\n      fullName: \"\",\n      password: \"\",\n      confirmPassword: \"\",\n      major: \"\",\n    },\n  });\n\n  const onSubmit = async (data: RegisterUser) => {\n    try {\n      setIsRegistering(true);\n      await register(data.username, data.password, data.confirmPassword, data.major, data.fullName);\n      // Redirect to home page after successful registration\n      setLocation('/');\n    } catch (error: any) {\n      // Error handling is done in AuthContext, but we can add additional handling here if needed\n      console.error('Registration error:', error);\n    } finally {\n      setIsRegistering(false);\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen flex items-center justify-center bg-gray-50 dark:bg-gray-900 py-12 px-4 sm:px-6 lg:px-8\">\n      <Card className=\"w-full max-w-md\">\n        <CardHeader className=\"space-y-1\">\n          <CardTitle className=\"text-2xl font-bold text-center\" data-testid=\"text-register-title\">\n            Create your account\n          </CardTitle>\n          <CardDescription className=\"text-center\" data-testid=\"text-register-description\">\n            Join SlotSync to find your perfect study partner\n          </CardDescription>\n        </CardHeader>\n        <CardContent>\n          <Form {...form}>\n            <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n              <FormField\n                control={form.control}\n                name=\"username\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel data-testid=\"text-username-label\">Username</FormLabel>\n                    <FormControl>\n                      <Input\n                        {...field}\n                        placeholder=\"Choose a username\"\n                        data-testid=\"input-username\"\n                        autoComplete=\"username\"\n                      />\n                    </FormControl>\n                    <FormMessage data-testid=\"text-username-error\" />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"fullName\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel data-testid=\"text-fullname-label\">Full Name (Optional)</FormLabel>\n                    <FormControl>\n                      <Input\n                        {...field}\n                        placeholder=\"Enter your full name\"\n                        data-testid=\"input-fullname\"\n                        autoComplete=\"name\"\n                      />\n                    </FormControl>\n                    <FormMessage data-testid=\"text-fullname-error\" />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"major\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel data-testid=\"text-major-label\">Major</FormLabel>\n                    <FormControl>\n                      <Input\n                        {...field}\n                        placeholder=\"e.g., Computer Science, Mathematics\"\n                        data-testid=\"input-major\"\n                      />\n                    </FormControl>\n                    <FormMessage data-testid=\"text-major-error\" />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"password\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel data-testid=\"text-password-label\">Password</FormLabel>\n                    <FormControl>\n                      <div className=\"relative\">\n                        <Input\n                          {...field}\n                          type={showPassword ? \"text\" : \"password\"}\n                          placeholder=\"Create a password\"\n                          data-testid=\"input-password\"\n                          autoComplete=\"new-password\"\n                        />\n                        <Button\n                          type=\"button\"\n                          variant=\"ghost\"\n                          size=\"icon\"\n                          className=\"absolute right-0 top-0 h-full px-3 hover-elevate\"\n                          onClick={() => setShowPassword(!showPassword)}\n                          data-testid=\"button-toggle-password\"\n                        >\n                          {showPassword ? (\n                            <EyeOff className=\"h-4 w-4\" />\n                          ) : (\n                            <Eye className=\"h-4 w-4\" />\n                          )}\n                        </Button>\n                      </div>\n                    </FormControl>\n                    <FormMessage data-testid=\"text-password-error\" />\n                    <p className=\"text-xs text-muted-foreground\" data-testid=\"text-password-requirements\">\n                      Password must be at least 8 characters with uppercase, lowercase, and number\n                    </p>\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"confirmPassword\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel data-testid=\"text-confirm-password-label\">Confirm Password</FormLabel>\n                    <FormControl>\n                      <div className=\"relative\">\n                        <Input\n                          {...field}\n                          type={showConfirmPassword ? \"text\" : \"password\"}\n                          placeholder=\"Confirm your password\"\n                          data-testid=\"input-confirm-password\"\n                          autoComplete=\"new-password\"\n                        />\n                        <Button\n                          type=\"button\"\n                          variant=\"ghost\"\n                          size=\"icon\"\n                          className=\"absolute right-0 top-0 h-full px-3 hover-elevate\"\n                          onClick={() => setShowConfirmPassword(!showConfirmPassword)}\n                          data-testid=\"button-toggle-confirm-password\"\n                        >\n                          {showConfirmPassword ? (\n                            <EyeOff className=\"h-4 w-4\" />\n                          ) : (\n                            <Eye className=\"h-4 w-4\" />\n                          )}\n                        </Button>\n                      </div>\n                    </FormControl>\n                    <FormMessage data-testid=\"text-confirm-password-error\" />\n                  </FormItem>\n                )}\n              />\n\n\n              <Button\n                type=\"submit\"\n                className=\"w-full\"\n                disabled={isRegistering}\n                data-testid=\"button-register\"\n              >\n                {isRegistering ? (\n                  <>\n                    <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\n                    Creating account...\n                  </>\n                ) : (\n                  'Create account'\n                )}\n              </Button>\n            </form>\n          </Form>\n\n          <div className=\"mt-6 text-center\">\n            <p className=\"text-sm text-muted-foreground\" data-testid=\"text-login-prompt\">\n              Already have an account?{' '}\n              <Link href=\"/login\" className=\"text-primary hover:underline font-medium\" data-testid=\"link-login\">\n                Sign in here\n              </Link>\n            </p>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":8919},"server/config.ts":{"content":"import crypto from 'crypto';\n\n/**\n * Unified secret management for SlotSync application\n * This ensures all authentication mechanisms use the same secret key\n */\n\n// Generate a secure default secret if none is provided\nconst generateSecureSecret = (): string => {\n  return crypto.randomBytes(32).toString('hex');\n};\n\n// Use environment variable or generate a secure default\n// In production, SESSION_SECRET should always be set\nexport const SECRET = process.env.SESSION_SECRET || generateSecureSecret();\n\n// Log warning if using generated secret in production\nif (!process.env.SESSION_SECRET && process.env.NODE_ENV === 'production') {\n  console.warn('WARNING: SESSION_SECRET not set in production. Using generated secret.');\n  console.warn('This will cause authentication issues across server restarts.');\n}\n\n// Export for logging/debugging purposes (but not the actual secret)\nexport const isUsingEnvSecret = !!process.env.SESSION_SECRET;\n\nconsole.log(`[Config] Using ${isUsingEnvSecret ? 'environment' : 'generated'} secret for authentication`);","size_bytes":1048},"client/src/pages/Partners.tsx":{"content":"import { useState, useEffect, useMemo } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { Input } from \"@/components/ui/input\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { queryClient, apiRequest } from \"@/lib/queryClient\";\nimport { Search, Users, UserPlus, UserX, BookOpen, Plus } from \"lucide-react\";\nimport type { SearchUser, FriendWithUser, PublicUser } from \"@shared/schema\";\n\nfunction useDebounce(value: string, delay: number) {\n  const [debouncedValue, setDebouncedValue] = useState(value);\n\n  useEffect(() => {\n    const handler = setTimeout(() => {\n      setDebouncedValue(value);\n    }, delay);\n\n    return () => {\n      clearTimeout(handler);\n    };\n  }, [value, delay]);\n\n  return debouncedValue;\n}\n\nfunction SearchUserCard({ user, onAddFriend, isAdding }: {\n  user: SearchUser;\n  onAddFriend: (userId: string) => void;\n  isAdding: boolean;\n}) {\n  const displayName = user.fullName || user.username;\n  const initials = displayName\n    .split(\" \")\n    .map(n => n[0])\n    .join(\"\")\n    .toUpperCase();\n\n  return (\n    <Card className=\"hover-elevate\" data-testid={`search-user-${user.id}`}>\n      <CardContent className=\"p-4\">\n        <div className=\"flex items-start gap-3\">\n          <Avatar className=\"h-12 w-12\">\n            {user.avatar && <AvatarImage src={user.avatar} alt={displayName} />}\n            <AvatarFallback>{initials}</AvatarFallback>\n          </Avatar>\n          \n          <div className=\"flex-1 min-w-0\">\n            <div className=\"flex items-center gap-2 mb-2\">\n              <h3 className=\"font-semibold text-sm truncate\">{displayName}</h3>\n              {user.fullName && (\n                <span className=\"text-xs text-muted-foreground\">@{user.username}</span>\n              )}\n              {user.isFriend && (\n                <Badge variant=\"secondary\" className=\"text-xs\">\n                  <Users className=\"h-3 w-3 mr-1\" />\n                  Friend\n                </Badge>\n              )}\n            </div>\n            \n            <p className=\"text-xs text-muted-foreground mb-2\">{user.major}</p>\n            \n            {user.dorm && (\n              <p className=\"text-xs text-muted-foreground mb-2\">Dorm: {user.dorm}</p>\n            )}\n            \n            {user.college && (\n              <p className=\"text-xs text-muted-foreground mb-2\">College: {user.college}</p>\n            )}\n            \n            {user.bio && (\n              <p className=\"text-xs text-foreground mb-2\">{user.bio}</p>\n            )}\n            \n            {user.sharedClasses.length > 0 && (\n              <div className=\"flex items-center gap-1 mb-3\">\n                <BookOpen className=\"h-3 w-3 text-primary\" />\n                <div className=\"flex flex-wrap gap-1\">\n                  {user.sharedClasses.map((course, index) => (\n                    <Badge key={index} variant=\"outline\" className=\"text-xs\">\n                      {course}\n                    </Badge>\n                  ))}\n                </div>\n              </div>\n            )}\n            \n            {!user.isFriend && (\n              <Button \n                size=\"sm\" \n                onClick={() => onAddFriend(user.id)}\n                disabled={isAdding}\n                className=\"w-full\"\n                data-testid={`add-friend-${user.id}`}\n              >\n                <UserPlus className=\"h-3 w-3 mr-1\" />\n                {isAdding ? \"Adding...\" : \"Add Friend\"}\n              </Button>\n            )}\n          </div>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n\nfunction FriendCard({ friend, onRemoveFriend, isRemoving }: {\n  friend: FriendWithUser;\n  onRemoveFriend: (friendId: string) => void;\n  isRemoving: boolean;\n}) {\n  const displayName = friend.friend.fullName || friend.friend.username;\n  const initials = displayName\n    .split(\" \")\n    .map(n => n[0])\n    .join(\"\")\n    .toUpperCase();\n\n  return (\n    <Card className=\"hover-elevate\" data-testid={`friend-${friend.friend.id}`}>\n      <CardContent className=\"p-4\">\n        <div className=\"flex items-start gap-3\">\n          <Avatar className=\"h-12 w-12\">\n            {friend.friend.avatar && <AvatarImage src={friend.friend.avatar} alt={displayName} />}\n            <AvatarFallback>{initials}</AvatarFallback>\n          </Avatar>\n          \n          <div className=\"flex-1 min-w-0\">\n            <div className=\"flex items-center gap-2 mb-2\">\n              <h3 className=\"font-semibold text-sm truncate\">{displayName}</h3>\n              {friend.friend.fullName && (\n                <span className=\"text-xs text-muted-foreground\">@{friend.friend.username}</span>\n              )}\n              <Badge variant=\"secondary\" className=\"text-xs\">\n                <Users className=\"h-3 w-3 mr-1\" />\n                Friend\n              </Badge>\n            </div>\n            \n            <p className=\"text-xs text-muted-foreground mb-2\">{friend.friend.major}</p>\n            \n            {friend.friend.dorm && (\n              <p className=\"text-xs text-muted-foreground mb-2\">Dorm: {friend.friend.dorm}</p>\n            )}\n            \n            {friend.friend.college && (\n              <p className=\"text-xs text-muted-foreground mb-2\">College: {friend.friend.college}</p>\n            )}\n            \n            {friend.friend.bio && (\n              <p className=\"text-xs text-foreground mb-2\">{friend.friend.bio}</p>\n            )}\n            \n            <p className=\"text-xs text-muted-foreground mb-3\">\n              Friends since {new Date(friend.createdAt!).toLocaleDateString()}\n            </p>\n            \n            <Button \n              size=\"sm\" \n              variant=\"destructive\"\n              onClick={() => onRemoveFriend(friend.friend.id)}\n              disabled={isRemoving}\n              className=\"w-full\"\n              data-testid={`remove-friend-${friend.friend.id}`}\n            >\n              <UserX className=\"h-3 w-3 mr-1\" />\n              {isRemoving ? \"Removing...\" : \"Remove Friend\"}\n            </Button>\n          </div>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n\nexport default function Partners() {\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [isAddFriendDialogOpen, setIsAddFriendDialogOpen] = useState(false);\n  const [friendUsernameSearch, setFriendUsernameSearch] = useState(\"\");\n  const debouncedSearch = useDebounce(searchQuery, 300);\n  const debouncedFriendSearch = useDebounce(friendUsernameSearch, 300);\n  const { toast } = useToast();\n\n  // Get current user for friends list\n  const { data: currentUserData } = useQuery<{ user: PublicUser }>({\n    queryKey: ['/api/auth/me']\n  });\n\n  const currentUser = currentUserData?.user;\n\n  // Search users query\n  const { data: searchResults = [], isLoading: isSearching } = useQuery<SearchUser[]>({\n    queryKey: ['/api/users/search', debouncedSearch],\n    enabled: debouncedSearch.length >= 2,\n    queryFn: async () => {\n      const res = await fetch(`/api/users/search?q=${encodeURIComponent(debouncedSearch)}`, {\n        credentials: 'include'\n      });\n      if (!res.ok) {\n        throw new Error(`${res.status}: ${res.statusText}`);\n      }\n      return res.json();\n    }\n  });\n\n  // Search users for dialog\n  const { data: dialogSearchResults = [], isLoading: isDialogSearching } = useQuery<SearchUser[]>({\n    queryKey: ['/api/users/search', 'dialog', debouncedFriendSearch],\n    enabled: debouncedFriendSearch.length >= 1 && isAddFriendDialogOpen,\n    queryFn: async () => {\n      const res = await fetch(`/api/users/search?q=${encodeURIComponent(debouncedFriendSearch)}`, {\n        credentials: 'include'\n      });\n      if (!res.ok) {\n        throw new Error(`${res.status}: ${res.statusText}`);\n      }\n      return res.json();\n    }\n  });\n\n  // Get friends list\n  const { data: friends = [], isLoading: isLoadingFriends } = useQuery<FriendWithUser[]>({\n    queryKey: ['/api/friends', currentUser?.id],\n    enabled: !!currentUser?.id,\n    queryFn: async () => {\n      if (!currentUser?.id) throw new Error('User ID not available');\n      const res = await fetch(`/api/friends/${currentUser.id}`, {\n        credentials: 'include'\n      });\n      if (!res.ok) {\n        throw new Error(`${res.status}: ${res.statusText}`);\n      }\n      return res.json();\n    }\n  });\n\n  // Add friend mutation\n  const addFriendMutation = useMutation({\n    mutationFn: async (friendId: string) => {\n      return apiRequest('POST', `/api/friends`, { friendId });\n    },\n    onSuccess: (data, friendId) => {\n      toast({\n        title: \"Friend added successfully\",\n        description: \"They have been added to your friends list.\"\n      });\n      \n      // Close dialog and reset search\n      setIsAddFriendDialogOpen(false);\n      setFriendUsernameSearch(\"\");\n      \n      // Invalidate and refetch queries\n      queryClient.invalidateQueries({ queryKey: ['/api/friends'] });\n      queryClient.invalidateQueries({ queryKey: ['/api/users/search'] });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Failed to add friend\",\n        description: error.message || \"An error occurred while adding the friend.\",\n        variant: \"destructive\"\n      });\n    }\n  });\n\n  // Remove friend mutation\n  const removeFriendMutation = useMutation({\n    mutationFn: async (friendId: string) => {\n      return apiRequest('DELETE', `/api/friends/${friendId}`);\n    },\n    onSuccess: (data, friendId) => {\n      toast({\n        title: \"Friend removed\",\n        description: \"They have been removed from your friends list.\"\n      });\n      \n      // Invalidate and refetch queries\n      queryClient.invalidateQueries({ queryKey: ['/api/friends'] });\n      queryClient.invalidateQueries({ queryKey: ['/api/users/search'] });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Failed to remove friend\",\n        description: error.message || \"An error occurred while removing the friend.\",\n        variant: \"destructive\"\n      });\n    }\n  });\n\n  const handleAddFriend = (friendId: string) => {\n    addFriendMutation.mutate(friendId);\n  };\n\n  const handleRemoveFriend = (friendId: string) => {\n    removeFriendMutation.mutate(friendId);\n  };\n\n  const isAddingFriend = addFriendMutation.isPending;\n  const isRemovingFriend = removeFriendMutation.isPending;\n\n  const filteredSearchResults = useMemo(() => {\n    return searchResults.filter(user => user.id !== currentUser?.id);\n  }, [searchResults, currentUser?.id]);\n\n  return (\n    <div className=\"container mx-auto p-4 max-w-4xl\">\n      <div className=\"mb-6\">\n        <h1 className=\"text-2xl font-bold mb-2\">Study Partners</h1>\n        <p className=\"text-muted-foreground\">\n          Find and connect with study partners who share your classes and interests.\n        </p>\n      </div>\n\n      <Tabs defaultValue=\"search\" className=\"space-y-4\">\n        <TabsList className=\"grid w-full grid-cols-2\">\n          <TabsTrigger value=\"search\" data-testid=\"tab-search\">\n            <Search className=\"h-4 w-4 mr-2\" />\n            Search Partners\n          </TabsTrigger>\n          <TabsTrigger value=\"friends\" data-testid=\"tab-friends\">\n            <Users className=\"h-4 w-4 mr-2\" />\n            My Friends ({friends.length})\n          </TabsTrigger>\n        </TabsList>\n\n        <TabsContent value=\"search\" className=\"space-y-4\">\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"text-lg flex items-center gap-2\">\n                <Search className=\"h-5 w-5\" />\n                Find Study Partners\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-4\">\n                <div className=\"relative\">\n                  <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-muted-foreground\" />\n                  <Input\n                    placeholder=\"Search by username or major...\"\n                    value={searchQuery}\n                    onChange={(e) => setSearchQuery(e.target.value)}\n                    className=\"pl-10\"\n                    data-testid=\"input-search\"\n                  />\n                </div>\n                \n                <Separator />\n                \n                <div className=\"flex items-center justify-center\">\n                  <Dialog open={isAddFriendDialogOpen} onOpenChange={setIsAddFriendDialogOpen}>\n                    <DialogTrigger asChild>\n                      <Button \n                        variant=\"outline\" \n                        className=\"w-full\"\n                        data-testid=\"button-add-friend-username\"\n                      >\n                        <UserPlus className=\"h-4 w-4 mr-2\" />\n                        Add Friend by Username\n                      </Button>\n                    </DialogTrigger>\n                    <DialogContent className=\"sm:max-w-md\">\n                      <DialogHeader>\n                        <DialogTitle>Add Friend by Username</DialogTitle>\n                      </DialogHeader>\n                      <div className=\"space-y-4\">\n                        <div className=\"relative\">\n                          <UserPlus className=\"absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-muted-foreground\" />\n                          <Input\n                            placeholder=\"Enter username...\"\n                            value={friendUsernameSearch}\n                            onChange={(e) => setFriendUsernameSearch(e.target.value)}\n                            className=\"pl-10\"\n                            data-testid=\"input-friend-username\"\n                          />\n                        </div>\n                        \n                        {isDialogSearching && debouncedFriendSearch.length >= 1 && (\n                          <p className=\"text-sm text-muted-foreground\">\n                            Searching users...\n                          </p>\n                        )}\n                        \n                        {dialogSearchResults.length > 0 && (\n                          <div className=\"max-h-64 overflow-y-auto space-y-2\">\n                            {dialogSearchResults.filter(user => user.id !== currentUser?.id).map((user: SearchUser) => (\n                              <div key={user.id} className=\"flex items-center gap-3 p-3 border rounded-lg\">\n                                <Avatar className=\"h-10 w-10\">\n                                  {user.avatar && <AvatarImage src={user.avatar} alt={user.fullName || user.username} />}\n                                  <AvatarFallback>\n                                    {(user.fullName || user.username)\n                                      .split(\" \")\n                                      .map(n => n[0])\n                                      .join(\"\")\n                                      .toUpperCase()}\n                                  </AvatarFallback>\n                                </Avatar>\n                                <div className=\"flex-1 min-w-0\">\n                                  <div className=\"flex items-center gap-2\">\n                                    <p className=\"font-medium text-sm truncate\">{user.fullName || user.username}</p>\n                                    {user.fullName && (\n                                      <span className=\"text-xs text-muted-foreground\">@{user.username}</span>\n                                    )}\n                                  </div>\n                                  <p className=\"text-xs text-muted-foreground\">{user.major}</p>\n                                </div>\n                                {!user.isFriend ? (\n                                  <Button \n                                    size=\"sm\" \n                                    onClick={() => handleAddFriend(user.id)}\n                                    disabled={isAddingFriend}\n                                    data-testid={`dialog-add-friend-${user.id}`}\n                                  >\n                                    <Plus className=\"h-3 w-3 mr-1\" />\n                                    {isAddingFriend ? \"Adding...\" : \"Add\"}\n                                  </Button>\n                                ) : (\n                                  <Badge variant=\"secondary\" className=\"text-xs\">\n                                    <Users className=\"h-3 w-3 mr-1\" />\n                                    Friend\n                                  </Badge>\n                                )}\n                              </div>\n                            ))}\n                          </div>\n                        )}\n                        \n                        {debouncedFriendSearch.length >= 1 && !isDialogSearching && dialogSearchResults.filter(user => user.id !== currentUser?.id).length === 0 && (\n                          <div className=\"text-center py-6\">\n                            <UserX className=\"h-12 w-12 text-muted-foreground mx-auto mb-2\" />\n                            <p className=\"text-sm text-muted-foreground\">No users found with that username</p>\n                          </div>\n                        )}\n                      </div>\n                    </DialogContent>\n                  </Dialog>\n                </div>\n                \n                {searchQuery.length > 0 && searchQuery.length < 2 && (\n                  <p className=\"text-sm text-muted-foreground\">\n                    Type at least 2 characters to search\n                  </p>\n                )}\n                \n                {isSearching && debouncedSearch.length >= 2 && (\n                  <p className=\"text-sm text-muted-foreground\">\n                    Searching...\n                  </p>\n                )}\n              </div>\n            </CardContent>\n          </Card>\n\n          {filteredSearchResults.length > 0 && (\n            <div className=\"space-y-4\">\n              <div className=\"flex items-center justify-between\">\n                <h3 className=\"text-lg font-semibold\">Search Results</h3>\n                <Badge variant=\"outline\">{filteredSearchResults.length} found</Badge>\n              </div>\n              \n              <div className=\"grid gap-4 md:grid-cols-2\">\n                {filteredSearchResults.map((user: SearchUser) => (\n                  <SearchUserCard\n                    key={user.id}\n                    user={user}\n                    onAddFriend={handleAddFriend}\n                    isAdding={isAddingFriend}\n                  />\n                ))}\n              </div>\n            </div>\n          )}\n\n          {debouncedSearch.length >= 2 && !isSearching && filteredSearchResults.length === 0 && (\n            <Card>\n              <CardContent className=\"p-6 text-center\">\n                <Search className=\"h-12 w-12 text-muted-foreground mx-auto mb-4\" />\n                <h3 className=\"text-lg font-medium mb-2\">No results found</h3>\n                <p className=\"text-muted-foreground\">\n                  Try searching with different keywords or check the spelling.\n                </p>\n              </CardContent>\n            </Card>\n          )}\n        </TabsContent>\n\n        <TabsContent value=\"friends\" className=\"space-y-4\">\n          {isLoadingFriends ? (\n            <Card>\n              <CardContent className=\"p-6 text-center\">\n                <p className=\"text-muted-foreground\">Loading your friends...</p>\n              </CardContent>\n            </Card>\n          ) : friends.length > 0 ? (\n            <div className=\"space-y-4\">\n              <div className=\"flex items-center justify-between\">\n                <h3 className=\"text-lg font-semibold\">Your Study Partners</h3>\n                <Badge variant=\"outline\">{friends.length} friends</Badge>\n              </div>\n              \n              <div className=\"grid gap-4 md:grid-cols-2\">\n                {friends.map((friend: FriendWithUser) => (\n                  <FriendCard\n                    key={friend.id}\n                    friend={friend}\n                    onRemoveFriend={handleRemoveFriend}\n                    isRemoving={isRemovingFriend}\n                  />\n                ))}\n              </div>\n            </div>\n          ) : (\n            <Card>\n              <CardContent className=\"p-6 text-center\">\n                <Users className=\"h-12 w-12 text-muted-foreground mx-auto mb-4\" />\n                <h3 className=\"text-lg font-medium mb-2\">No friends yet</h3>\n                <p className=\"text-muted-foreground mb-4\">\n                  Search for study partners and add them as friends to get started.\n                </p>\n                <Button \n                  onClick={() => {\n                    // Switch to search tab\n                    const searchTab = document.querySelector('[data-testid=\"tab-search\"]') as HTMLElement;\n                    if (searchTab) {\n                      searchTab.click();\n                    }\n                  }}\n                  data-testid=\"button-find-partners\"\n                >\n                  <Search className=\"h-4 w-4 mr-2\" />\n                  Find Study Partners\n                </Button>\n              </CardContent>\n            </Card>\n          )}\n        </TabsContent>\n      </Tabs>\n    </div>\n  );\n}","size_bytes":21611},"server/test-data.ts":{"content":"import { storage } from \"./storage\";\nimport { type RegisterUser, type InsertSchedule } from \"@shared/schema\";\nimport bcrypt from \"bcrypt\";\n\n// Test user data with strategic overlaps for recommendation algorithm testing\ninterface TestUserData {\n  user: RegisterUser;\n  schedules: InsertSchedule[];\n  hobbies: string[];\n}\n\n// Strategic course overlaps - these courses will be shared across multiple users\nconst SHARED_COURSES = {\n  // STEM Core (shared by CS, Math, Engineering, Physics)\n  CALC_I: { code: \"MATH101\", name: \"Calculus I\" },\n  LINEAR_ALG: { code: \"MATH201\", name: \"Linear Algebra\" },\n  STATISTICS: { code: \"MATH301\", name: \"Statistics\" },\n  \n  // CS Core (shared by CS students and some Engineering)\n  DATA_STRUCT: { code: \"CS201\", name: \"Data Structures\" },\n  ALGORITHMS: { code: \"CS301\", name: \"Algorithms\" },\n  MACHINE_LEARN: { code: \"CS401\", name: \"Machine Learning\" },\n  \n  // General Education (shared across all majors)\n  ENG_WRITING: { code: \"ENG101\", name: \"English Writing\" },\n  PSYCH_INTRO: { code: \"PSYCH101\", name: \"Introduction to Psychology\" },\n  HIST_MODERN: { code: \"HIST201\", name: \"Modern History\" },\n  \n  // Business/Economics (shared by Economics, some CS)\n  MICROECON: { code: \"ECON101\", name: \"Microeconomics\" },\n  FINANCE: { code: \"BUS201\", name: \"Business Finance\" },\n  \n  // Art/Creative (shared by Art, some Psychology)\n  ART_HISTORY: { code: \"ART101\", name: \"Art History\" },\n  DESIGN: { code: \"ART201\", name: \"Digital Design\" }\n};\n\n// Test users with strategic overlaps\nconst TEST_USERS: TestUserData[] = [\n  {\n    user: {\n      username: \"alex_cs\",\n      password: \"TestPass123\",\n      fullName: \"Alex Chen\",\n      major: \"Computer Science\",\n      confirmPassword: \"TestPass123\"\n    },\n    hobbies: [\"Programming\", \"Gaming\", \"Music Production\"],\n    schedules: [\n      { courseCode: SHARED_COURSES.DATA_STRUCT.code, courseName: SHARED_COURSES.DATA_STRUCT.name, day: \"monday\", startTime: \"10:00\", endTime: \"11:30\", location: \"CS Building 201\" },\n      { courseCode: SHARED_COURSES.ALGORITHMS.code, courseName: SHARED_COURSES.ALGORITHMS.name, day: \"wednesday\", startTime: \"14:00\", endTime: \"15:30\", location: \"CS Building 301\" },\n      { courseCode: SHARED_COURSES.LINEAR_ALG.code, courseName: SHARED_COURSES.LINEAR_ALG.name, day: \"tuesday\", startTime: \"09:00\", endTime: \"10:30\", location: \"Math Building 105\" },\n      { courseCode: SHARED_COURSES.ENG_WRITING.code, courseName: SHARED_COURSES.ENG_WRITING.name, day: \"friday\", startTime: \"13:00\", endTime: \"14:30\", location: \"Liberal Arts 202\" }\n    ]\n  },\n  {\n    user: {\n      username: \"sarah_math\",\n      password: \"TestPass123\",\n      fullName: \"Sarah Williams\",\n      major: \"Mathematics\",\n      confirmPassword: \"TestPass123\"\n    },\n    hobbies: [\"Reading\", \"Chess\", \"Photography\"],\n    schedules: [\n      { courseCode: SHARED_COURSES.CALC_I.code, courseName: SHARED_COURSES.CALC_I.name, day: \"monday\", startTime: \"08:00\", endTime: \"09:30\", location: \"Math Building 201\" },\n      { courseCode: SHARED_COURSES.LINEAR_ALG.code, courseName: SHARED_COURSES.LINEAR_ALG.name, day: \"tuesday\", startTime: \"09:00\", endTime: \"10:30\", location: \"Math Building 105\" },\n      { courseCode: SHARED_COURSES.STATISTICS.code, courseName: SHARED_COURSES.STATISTICS.name, day: \"thursday\", startTime: \"11:00\", endTime: \"12:30\", location: \"Math Building 301\" },\n      { courseCode: SHARED_COURSES.ENG_WRITING.code, courseName: SHARED_COURSES.ENG_WRITING.name, day: \"friday\", startTime: \"13:00\", endTime: \"14:30\", location: \"Liberal Arts 202\" }\n    ]\n  },\n  {\n    user: {\n      username: \"mike_eng\",\n      password: \"TestPass123\",\n      fullName: \"Michael Rodriguez\",\n      major: \"Engineering\",\n      confirmPassword: \"TestPass123\"\n    },\n    hobbies: [\"3D Printing\", \"Robotics\", \"Gaming\"],\n    schedules: [\n      { courseCode: SHARED_COURSES.CALC_I.code, courseName: SHARED_COURSES.CALC_I.name, day: \"monday\", startTime: \"08:00\", endTime: \"09:30\", location: \"Math Building 201\" },\n      { courseCode: SHARED_COURSES.DATA_STRUCT.code, courseName: SHARED_COURSES.DATA_STRUCT.name, day: \"monday\", startTime: \"10:00\", endTime: \"11:30\", location: \"CS Building 201\" },\n      { courseCode: \"ENG201\", courseName: \"Engineering Mechanics\", day: \"wednesday\", startTime: \"10:00\", endTime: \"11:30\", location: \"Engineering 101\" },\n      { courseCode: SHARED_COURSES.PSYCH_INTRO.code, courseName: SHARED_COURSES.PSYCH_INTRO.name, day: \"thursday\", startTime: \"15:00\", endTime: \"16:30\", location: \"Psychology Building 201\" }\n    ]\n  },\n  {\n    user: {\n      username: \"emma_econ\",\n      password: \"TestPass123\",\n      fullName: \"Emma Thompson\",\n      major: \"Economics\",\n      confirmPassword: \"TestPass123\"\n    },\n    hobbies: [\"Finance\", \"Travel\", \"Cooking\"],\n    schedules: [\n      { courseCode: SHARED_COURSES.MICROECON.code, courseName: SHARED_COURSES.MICROECON.name, day: \"tuesday\", startTime: \"11:00\", endTime: \"12:30\", location: \"Economics Building 101\" },\n      { courseCode: SHARED_COURSES.STATISTICS.code, courseName: SHARED_COURSES.STATISTICS.name, day: \"thursday\", startTime: \"11:00\", endTime: \"12:30\", location: \"Math Building 301\" },\n      { courseCode: SHARED_COURSES.FINANCE.code, courseName: SHARED_COURSES.FINANCE.name, day: \"friday\", startTime: \"09:00\", endTime: \"10:30\", location: \"Business Building 205\" },\n      { courseCode: SHARED_COURSES.ENG_WRITING.code, courseName: SHARED_COURSES.ENG_WRITING.name, day: \"friday\", startTime: \"13:00\", endTime: \"14:30\", location: \"Liberal Arts 202\" }\n    ]\n  },\n  {\n    user: {\n      username: \"david_psych\",\n      password: \"TestPass123\",\n      fullName: \"David Kim\",\n      major: \"Psychology\",\n      confirmPassword: \"TestPass123\"\n    },\n    hobbies: [\"Reading\", \"Music\", \"Fitness\"],\n    schedules: [\n      { courseCode: SHARED_COURSES.PSYCH_INTRO.code, courseName: SHARED_COURSES.PSYCH_INTRO.name, day: \"thursday\", startTime: \"15:00\", endTime: \"16:30\", location: \"Psychology Building 201\" },\n      { courseCode: SHARED_COURSES.STATISTICS.code, courseName: SHARED_COURSES.STATISTICS.name, day: \"thursday\", startTime: \"11:00\", endTime: \"12:30\", location: \"Math Building 301\" },\n      { courseCode: \"PSYCH201\", courseName: \"Cognitive Psychology\", day: \"monday\", startTime: \"14:00\", endTime: \"15:30\", location: \"Psychology Building 301\" },\n      { courseCode: SHARED_COURSES.ART_HISTORY.code, courseName: SHARED_COURSES.ART_HISTORY.name, day: \"wednesday\", startTime: \"16:00\", endTime: \"17:30\", location: \"Art Building 101\" }\n    ]\n  },\n  {\n    user: {\n      username: \"lily_art\",\n      password: \"TestPass123\",\n      fullName: \"Lily Zhang\",\n      major: \"Art\",\n      confirmPassword: \"TestPass123\"\n    },\n    hobbies: [\"Photography\", \"Digital Art\", \"Music\"],\n    schedules: [\n      { courseCode: SHARED_COURSES.ART_HISTORY.code, courseName: SHARED_COURSES.ART_HISTORY.name, day: \"wednesday\", startTime: \"16:00\", endTime: \"17:30\", location: \"Art Building 101\" },\n      { courseCode: SHARED_COURSES.DESIGN.code, courseName: SHARED_COURSES.DESIGN.name, day: \"tuesday\", startTime: \"14:00\", endTime: \"15:30\", location: \"Art Building 205\" },\n      { courseCode: \"ART301\", courseName: \"Advanced Photography\", day: \"friday\", startTime: \"10:00\", endTime: \"11:30\", location: \"Art Building 301\" },\n      { courseCode: SHARED_COURSES.HIST_MODERN.code, courseName: SHARED_COURSES.HIST_MODERN.name, day: \"monday\", startTime: \"16:00\", endTime: \"17:30\", location: \"History Building 201\" }\n    ]\n  },\n  {\n    user: {\n      username: \"ryan_physics\",\n      password: \"TestPass123\",\n      fullName: \"Ryan Johnson\",\n      major: \"Physics\",\n      confirmPassword: \"TestPass123\"\n    },\n    hobbies: [\"Programming\", \"Astronomy\", \"Chess\"],\n    schedules: [\n      { courseCode: SHARED_COURSES.CALC_I.code, courseName: SHARED_COURSES.CALC_I.name, day: \"monday\", startTime: \"08:00\", endTime: \"09:30\", location: \"Math Building 201\" },\n      { courseCode: SHARED_COURSES.LINEAR_ALG.code, courseName: SHARED_COURSES.LINEAR_ALG.name, day: \"tuesday\", startTime: \"09:00\", endTime: \"10:30\", location: \"Math Building 105\" },\n      { courseCode: \"PHYS201\", courseName: \"Classical Mechanics\", day: \"wednesday\", startTime: \"08:00\", endTime: \"09:30\", location: \"Physics Building 101\" },\n      { courseCode: SHARED_COURSES.DATA_STRUCT.code, courseName: SHARED_COURSES.DATA_STRUCT.name, day: \"monday\", startTime: \"10:00\", endTime: \"11:30\", location: \"CS Building 201\" }\n    ]\n  },\n  {\n    user: {\n      username: \"nina_cs2\",\n      password: \"TestPass123\",\n      fullName: \"Nina Patel\",\n      major: \"Computer Science\",\n      confirmPassword: \"TestPass123\"\n    },\n    hobbies: [\"Gaming\", \"AI Research\", \"Fitness\"],\n    schedules: [\n      { courseCode: SHARED_COURSES.ALGORITHMS.code, courseName: SHARED_COURSES.ALGORITHMS.name, day: \"wednesday\", startTime: \"14:00\", endTime: \"15:30\", location: \"CS Building 301\" },\n      { courseCode: SHARED_COURSES.MACHINE_LEARN.code, courseName: SHARED_COURSES.MACHINE_LEARN.name, day: \"tuesday\", startTime: \"16:00\", endTime: \"17:30\", location: \"CS Building 401\" },\n      { courseCode: SHARED_COURSES.STATISTICS.code, courseName: SHARED_COURSES.STATISTICS.name, day: \"thursday\", startTime: \"11:00\", endTime: \"12:30\", location: \"Math Building 301\" },\n      { courseCode: SHARED_COURSES.MICROECON.code, courseName: SHARED_COURSES.MICROECON.name, day: \"tuesday\", startTime: \"11:00\", endTime: \"12:30\", location: \"Economics Building 101\" }\n    ]\n  },\n  {\n    user: {\n      username: \"jake_math2\",\n      password: \"TestPass123\",\n      fullName: \"Jake Anderson\",\n      major: \"Mathematics\",\n      confirmPassword: \"TestPass123\"\n    },\n    hobbies: [\"Chess\", \"Programming\", \"Finance\"],\n    schedules: [\n      { courseCode: SHARED_COURSES.LINEAR_ALG.code, courseName: SHARED_COURSES.LINEAR_ALG.name, day: \"tuesday\", startTime: \"09:00\", endTime: \"10:30\", location: \"Math Building 105\" },\n      { courseCode: SHARED_COURSES.ALGORITHMS.code, courseName: SHARED_COURSES.ALGORITHMS.name, day: \"wednesday\", startTime: \"14:00\", endTime: \"15:30\", location: \"CS Building 301\" },\n      { courseCode: \"MATH401\", courseName: \"Abstract Algebra\", day: \"thursday\", startTime: \"09:00\", endTime: \"10:30\", location: \"Math Building 401\" },\n      { courseCode: SHARED_COURSES.FINANCE.code, courseName: SHARED_COURSES.FINANCE.name, day: \"friday\", startTime: \"09:00\", endTime: \"10:30\", location: \"Business Building 205\" }\n    ]\n  },\n  {\n    user: {\n      username: \"zoe_interdis\",\n      password: \"TestPass123\",\n      fullName: \"Zoe Martinez\",\n      major: \"Economics\",\n      confirmPassword: \"TestPass123\"\n    },\n    hobbies: [\"Travel\", \"Digital Art\", \"Finance\"],\n    schedules: [\n      { courseCode: SHARED_COURSES.MACHINE_LEARN.code, courseName: SHARED_COURSES.MACHINE_LEARN.name, day: \"tuesday\", startTime: \"16:00\", endTime: \"17:30\", location: \"CS Building 401\" },\n      { courseCode: SHARED_COURSES.MICROECON.code, courseName: SHARED_COURSES.MICROECON.name, day: \"tuesday\", startTime: \"11:00\", endTime: \"12:30\", location: \"Economics Building 101\" },\n      { courseCode: SHARED_COURSES.DESIGN.code, courseName: SHARED_COURSES.DESIGN.name, day: \"tuesday\", startTime: \"14:00\", endTime: \"15:30\", location: \"Art Building 205\" },\n      { courseCode: SHARED_COURSES.HIST_MODERN.code, courseName: SHARED_COURSES.HIST_MODERN.name, day: \"monday\", startTime: \"16:00\", endTime: \"17:30\", location: \"History Building 201\" }\n    ]\n  }\n];\n\n// Function to create bio text from hobbies\nfunction createBioFromHobbies(fullName: string, major: string, hobbies: string[]): string {\n  const majorDesc = major === \"Computer Science\" ? \"CS\" : major;\n  return `${majorDesc} student who enjoys ${hobbies.join(\", \")}. Looking for study partners and academic collaboration!`;\n}\n\n// Function to hash password\nasync function hashPassword(password: string): Promise<string> {\n  return await bcrypt.hash(password, 10);\n}\n\n// Main function to insert test users and their schedules\nexport async function insertTestData(): Promise<void> {\n  console.log(\"Starting test data insertion...\");\n  \n  try {\n    for (const testUser of TEST_USERS) {\n      console.log(`Creating user: ${testUser.user.username}`);\n      \n      // Check if user already exists\n      const existingUser = await storage.getUserByUsername(testUser.user.username);\n      if (existingUser) {\n        console.log(`User ${testUser.user.username} already exists, skipping...`);\n        continue;\n      }\n      \n      // Create user (let registerUser handle password hashing)\n      const bio = createBioFromHobbies(testUser.user.fullName!, testUser.user.major, testUser.hobbies);\n      \n      const createdUser = await storage.registerUser({\n        username: testUser.user.username,\n        password: testUser.user.password, // Use plain text password\n        fullName: testUser.user.fullName,\n        major: testUser.user.major,\n        confirmPassword: testUser.user.password, // Same as password\n      });\n      \n      // Update user with bio and additional profile info\n      await storage.updateUser(createdUser.id, {\n        bio: bio,\n        college: \"Carnegie Mellon University\", // Default college\n        dorm: `${testUser.user.fullName!.split(' ')[0]}'s Dorm`, // Generate dorm name\n        avatar: null // Let users add their own avatars\n      });\n      \n      console.log(`Created user: ${testUser.user.username} (${createdUser.id})`);\n      \n      // Add schedules for this user\n      console.log(`Adding ${testUser.schedules.length} schedules for ${testUser.user.username}`);\n      for (const schedule of testUser.schedules) {\n        await storage.createSchedule(schedule, createdUser.id);\n      }\n      \n      console.log(`Completed setup for user: ${testUser.user.username}`);\n    }\n    \n    console.log(\"Test data insertion completed successfully!\");\n    \n    // Print summary of overlaps\n    console.log(\"\\n=== TEST DATA SUMMARY ===\");\n    console.log(\"Shared courses for recommendation testing:\");\n    Object.values(SHARED_COURSES).forEach(course => {\n      const usersWithCourse = TEST_USERS.filter(user => \n        user.schedules.some(schedule => schedule.courseCode === course.code)\n      );\n      console.log(`${course.code} (${course.name}): ${usersWithCourse.length} users - ${usersWithCourse.map(u => u.user.username).join(\", \")}`);\n    });\n    \n    console.log(\"\\nMajor distribution:\");\n    const majorCounts = TEST_USERS.reduce((acc, user) => {\n      acc[user.user.major] = (acc[user.user.major] || 0) + 1;\n      return acc;\n    }, {} as Record<string, number>);\n    Object.entries(majorCounts).forEach(([major, count]) => {\n      console.log(`${major}: ${count} users`);\n    });\n    \n    console.log(\"\\nHobby overlaps:\");\n    const allHobbies = TEST_USERS.flatMap(user => user.hobbies);\n    const hobbyCounts = allHobbies.reduce((acc, hobby) => {\n      acc[hobby] = (acc[hobby] || 0) + 1;\n      return acc;\n    }, {} as Record<string, number>);\n    Object.entries(hobbyCounts)\n      .filter(([_, count]) => count > 1)\n      .forEach(([hobby, count]) => {\n        console.log(`${hobby}: ${count} users`);\n      });\n      \n  } catch (error) {\n    console.error(\"Error inserting test data:\", error);\n    throw error;\n  }\n}\n\n// Function to clear test data (for cleanup)\nexport async function clearTestData(): Promise<void> {\n  console.log(\"Clearing test data...\");\n  \n  for (const testUser of TEST_USERS) {\n    try {\n      const user = await storage.getUserByUsername(testUser.user.username);\n      if (user) {\n        // Note: This requires implementing a delete user method in storage\n        console.log(`Would delete user: ${testUser.user.username} (implement deleteUser method)`);\n      }\n    } catch (error) {\n      console.warn(`Could not clear user ${testUser.user.username}:`, error);\n    }\n  }\n}\n\n// Export test user data for reference\nexport { TEST_USERS, SHARED_COURSES };","size_bytes":15723},"client/src/pages/Notifications.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { PendingFriendRequest } from \"@shared/schema\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { Bell, Users, UserCheck, UserX, AlertCircle, ArrowLeft, Home } from \"lucide-react\";\nimport { Link } from \"wouter\";\n\nexport default function Notifications() {\n  const { toast } = useToast();\n\n  // Fetch pending friend requests\n  const { data: pendingRequests, isLoading } = useQuery<PendingFriendRequest[]>({\n    queryKey: ['/api/friends/requests'],\n  });\n\n  // Accept friend request mutation\n  const acceptRequestMutation = useMutation({\n    mutationFn: async (requestId: string) => {\n      return apiRequest('PUT', `/api/friends/requests/${requestId}/accept`);\n    },\n    onSuccess: (data, requestId) => {\n      toast({\n        title: \"Friend request accepted\",\n        description: \"You are now friends!\",\n      });\n      \n      // Invalidate and refetch queries\n      queryClient.invalidateQueries({ queryKey: ['/api/friends/requests'] });\n      queryClient.invalidateQueries({ queryKey: ['/api/friends'] });\n      queryClient.invalidateQueries({ queryKey: ['/api/users/search'] });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Failed to accept request\",\n        description: error.message || \"An error occurred\",\n        variant: \"destructive\"\n      });\n    }\n  });\n\n  // Reject friend request mutation\n  const rejectRequestMutation = useMutation({\n    mutationFn: async (requestId: string) => {\n      return apiRequest('PUT', `/api/friends/requests/${requestId}/reject`);\n    },\n    onSuccess: (data, requestId) => {\n      toast({\n        title: \"Friend request declined\",\n        description: \"The request has been removed.\",\n      });\n      \n      // Invalidate and refetch queries\n      queryClient.invalidateQueries({ queryKey: ['/api/friends/requests'] });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Failed to decline request\",\n        description: error.message || \"An error occurred\",\n        variant: \"destructive\"\n      });\n    }\n  });\n\n  const handleAcceptRequest = (requestId: string) => {\n    acceptRequestMutation.mutate(requestId);\n  };\n\n  const handleRejectRequest = (requestId: string) => {\n    rejectRequestMutation.mutate(requestId);\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"container mx-auto px-4 py-8\">\n        <div className=\"flex items-center gap-2 mb-6\">\n          <Bell className=\"h-6 w-6\" />\n          <h1 className=\"text-2xl font-bold\">Notifications</h1>\n        </div>\n        <div className=\"space-y-4\">\n          {[1, 2, 3].map(i => (\n            <Card key={i} className=\"animate-pulse\">\n              <CardContent className=\"p-4\">\n                <div className=\"flex items-center gap-3\">\n                  <div className=\"h-12 w-12 bg-muted rounded-full\" />\n                  <div className=\"flex-1\">\n                    <div className=\"h-4 bg-muted rounded mb-2\" />\n                    <div className=\"h-3 bg-muted rounded w-2/3\" />\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          ))}\n        </div>\n      </div>\n    );\n  }\n\n  const pendingCount = pendingRequests?.length || 0;\n\n  return (\n    <div className=\"container mx-auto px-4 py-8\">\n      <div className=\"flex items-center gap-2 mb-6\">\n        <Link href=\"/\" data-testid=\"link-back-home\">\n          <Button variant=\"ghost\" size=\"sm\" className=\"mr-2 hover-elevate\">\n            <ArrowLeft className=\"h-4 w-4 mr-1\" />\n            Back\n          </Button>\n        </Link>\n        <Bell className=\"h-6 w-6\" />\n        <h1 className=\"text-2xl font-bold\">Notifications</h1>\n        {pendingCount > 0 && (\n          <Badge variant=\"destructive\" className=\"ml-2\">\n            {pendingCount}\n          </Badge>\n        )}\n      </div>\n\n      {/* Friend Request Notifications */}\n      <Card className=\"mb-6\" data-testid=\"friend-requests-section\">\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <Users className=\"h-5 w-5\" />\n            Friend Requests\n            {pendingCount > 0 && (\n              <Badge variant=\"secondary\">\n                {pendingCount}\n              </Badge>\n            )}\n          </CardTitle>\n        </CardHeader>\n        <CardContent className=\"space-y-4\">\n          {pendingCount === 0 ? (\n            <div className=\"text-center py-8 text-muted-foreground\">\n              <AlertCircle className=\"h-12 w-12 mx-auto mb-4 opacity-50\" />\n              <p>No pending friend requests</p>\n              <p className=\"text-sm\">When someone sends you a friend request, it will appear here.</p>\n            </div>\n          ) : (\n            pendingRequests?.map((request) => {\n              const displayName = request.requester.fullName || request.requester.username;\n              const initials = displayName\n                .split(\" \")\n                .map(n => n[0])\n                .join(\"\")\n                .toUpperCase();\n\n              return (\n                <Card key={request.id} className=\"hover-elevate\" data-testid={`friend-request-${request.id}`}>\n                  <CardContent className=\"p-4\">\n                    <div className=\"flex items-start gap-3\">\n                      <Avatar className=\"h-12 w-12\">\n                        {request.requester.avatar && (\n                          <AvatarImage src={request.requester.avatar} alt={displayName} />\n                        )}\n                        <AvatarFallback>{initials}</AvatarFallback>\n                      </Avatar>\n                      \n                      <div className=\"flex-1 min-w-0\">\n                        <div className=\"flex items-center gap-2 mb-2\">\n                          <h3 className=\"font-semibold text-sm truncate\">{displayName}</h3>\n                          {request.requester.fullName && (\n                            <span className=\"text-xs text-muted-foreground\">@{request.requester.username}</span>\n                          )}\n                          <Badge variant=\"outline\" className=\"text-xs\">\n                            Pending\n                          </Badge>\n                        </div>\n                        \n                        <p className=\"text-xs text-muted-foreground mb-2\">{request.requester.major}</p>\n                        \n                        {request.requester.grade && (\n                          <p className=\"text-xs text-muted-foreground mb-2\">Grade: {request.requester.grade}</p>\n                        )}\n\n                        {request.requester.bio && (\n                          <p className=\"text-xs text-foreground mb-3\">{request.requester.bio}</p>\n                        )}\n\n                        {request.requester.hobbies && (\n                          <div className=\"mb-3\">\n                            <div className=\"flex flex-wrap gap-1\">\n                              {request.requester.hobbies.split(',').map((hobby, index) => (\n                                <Badge key={index} variant=\"outline\" className=\"text-xs\">\n                                  {hobby.trim()}\n                                </Badge>\n                              ))}\n                            </div>\n                          </div>\n                        )}\n                        \n                        <p className=\"text-xs text-muted-foreground mb-3\">\n                          Sent on {new Date(request.createdAt!).toLocaleDateString()}\n                        </p>\n                        \n                        <div className=\"flex gap-2\">\n                          <Button \n                            size=\"sm\" \n                            onClick={() => handleAcceptRequest(request.id)}\n                            disabled={acceptRequestMutation.isPending || rejectRequestMutation.isPending}\n                            className=\"flex-1\"\n                            data-testid={`accept-request-${request.id}`}\n                          >\n                            <UserCheck className=\"h-3 w-3 mr-1\" />\n                            {acceptRequestMutation.isPending ? \"Accepting...\" : \"Accept\"}\n                          </Button>\n                          \n                          <Button \n                            size=\"sm\" \n                            variant=\"destructive\"\n                            onClick={() => handleRejectRequest(request.id)}\n                            disabled={acceptRequestMutation.isPending || rejectRequestMutation.isPending}\n                            className=\"flex-1\"\n                            data-testid={`reject-request-${request.id}`}\n                          >\n                            <UserX className=\"h-3 w-3 mr-1\" />\n                            {rejectRequestMutation.isPending ? \"Declining...\" : \"Decline\"}\n                          </Button>\n                        </div>\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n              );\n            })\n          )}\n        </CardContent>\n      </Card>\n\n      {/* Future: Other notification types could be added here */}\n      {/* Study group invitations, event reminders, etc. */}\n    </div>\n  );\n}","size_bytes":9549},"client/src/utils/courseUtils.ts":{"content":"// 课程相关的实用函数\n\n// 从课程名称中提取课号 - 增强版支持多种格式\nexport function extractCourseCode(courseName: string): string | null {\n  if (!courseName) return null;\n  \n  // 标准化全角冒号为ASCII冒号\n  const normalized = courseName.replace(/[：:]{2,}/g, '::').replace(/：/g, ':');\n  \n  // 匹配 \"：： 12345 1\" 或 \":: 12345 1\" 格式，提取五位数字\n  const match = normalized.match(/::\\s*(\\d{5})(?:\\s+\\d+)?/);\n  if (match) {\n    return match[1]; // 返回五位数课号\n  }\n  \n  // 匹配独立的5位数字（不在其他数字序列中）\n  const fiveDigitMatch = normalized.match(/(?<!\\d)(\\d{5})(?!\\d)/);\n  if (fiveDigitMatch) {\n    return fiveDigitMatch[1];\n  }\n  \n  // 如果没有匹配到五位数字，返回null而不是第一个词\n  return null;\n}\n\n// 为课号生成一致的颜色\nexport function getCourseColor(courseCode: string): string {\n  const colors = [\n    'bg-red-100 text-red-800 border-red-200',\n    'bg-blue-100 text-blue-800 border-blue-200',\n    'bg-green-100 text-green-800 border-green-200',\n    'bg-yellow-100 text-yellow-800 border-yellow-200',\n    'bg-purple-100 text-purple-800 border-purple-200',\n    'bg-pink-100 text-pink-800 border-pink-200',\n    'bg-indigo-100 text-indigo-800 border-indigo-200',\n    'bg-orange-100 text-orange-800 border-orange-200',\n    'bg-teal-100 text-teal-800 border-teal-200',\n    'bg-cyan-100 text-cyan-800 border-cyan-200'\n  ];\n  \n  // 使用课号生成一个稳定的哈希值\n  let hash = 0;\n  for (let i = 0; i < courseCode.length; i++) {\n    const char = courseCode.charCodeAt(i);\n    hash = ((hash << 5) - hash) + char;\n    hash = hash & hash; // 转换为32位整数\n  }\n  \n  // 确保哈希值为正数并选择颜色\n  const colorIndex = Math.abs(hash) % colors.length;\n  return colors[colorIndex];\n}\n\n// 格式化课程显示名称（移除课号部分）\nexport function formatCourseName(courseName: string): string {\n  // 如果匹配 \"：： 12345 1\" 格式，移除这部分\n  const cleanName = courseName.replace(/：：\\s*\\d{5}\\s+\\d+\\s*/, '').trim();\n  return cleanName || courseName; // 如果清理后为空，返回原名称\n}","size_bytes":2164},"server/matchAlgorithm.ts":{"content":"// Match Algorithm Implementation based on MVP specification\nimport { StudyPartner } from \"@shared/schema\";\n\n// Configuration weights as specified\nconst WEIGHTS = {\n  shared_course: 10,\n  help: 6,\n  busy_tired: -4,\n  same_major: 3,\n  same_location: 2,\n  same_current_class: 15,  // Enhanced feature\n  same_next_class: 10      // Enhanced feature\n};\n\n// Course code normalization function\nexport function normalizeCourseCode(courseCode: string): string {\n  if (!courseCode) return '';\n  // Extract numeric part - handles cases like \"CS 10301\", \"10301 A\", \"：： 12345 1\"\n  const match = courseCode.match(/\\d{4,6}/);\n  return match ? match[0] : courseCode.trim().toUpperCase();\n}\n\n// Time utility functions\nexport function timeToMinutes(timeStr: string): number {\n  const [hours, minutes] = timeStr.split(':').map(Number);\n  return hours * 60 + minutes;\n}\n\nexport function isBetween(now: number, start: string, end: string): boolean {\n  const startMinutes = timeToMinutes(start);\n  const endMinutes = timeToMinutes(end);\n  return now >= startMinutes && now < endMinutes; // [start, end)\n}\n\n// Availability functions\nexport function getCurrentClassFor(schedules: any[], now: Date): any | null {\n  const currentDay = now.toLocaleDateString('en-US', { weekday: 'long' }).toLowerCase();\n  const currentTime = now.toTimeString().slice(0, 5);\n  const currentMinutes = timeToMinutes(currentTime);\n\n  for (const schedule of schedules) {\n    if (schedule.days.includes(currentDay)) {\n      if (isBetween(currentMinutes, schedule.startTime, schedule.endTime)) {\n        return schedule;\n      }\n    }\n  }\n  return null;\n}\n\nexport function getNextClassFor(schedules: any[], now: Date): any | null {\n  const currentDay = now.toLocaleDateString('en-US', { weekday: 'long' }).toLowerCase();\n  const currentTime = now.toTimeString().slice(0, 5);\n  const currentMinutes = timeToMinutes(currentTime);\n\n  // Find today's schedules after current time\n  const todaySchedules = schedules.filter(s => s.days.includes(currentDay));\n  const futureSchedules = todaySchedules.filter(s => timeToMinutes(s.startTime) > currentMinutes);\n  \n  if (futureSchedules.length > 0) {\n    // Return the earliest one\n    return futureSchedules.sort((a, b) => timeToMinutes(a.startTime) - timeToMinutes(b.startTime))[0];\n  }\n  \n  return null;\n}\n\n// Main matching algorithm\nexport async function getStudyPartners(\n  snapshot: {\n    users: Map<string, any>,\n    schedules: Map<string, any[]>, \n    statuses: Map<string, any>\n  },\n  userId: string,\n  now: Date = new Date(),\n  topN: number = 5\n): Promise<StudyPartner[]> {\n  \n  const currentUser = snapshot.users.get(userId);\n  if (!currentUser) return [];\n\n  const currentUserSchedules = snapshot.schedules.get(userId) || [];\n  const currentUserCourses = new Set(\n    currentUserSchedules.map(s => normalizeCourseCode(s.courseCode))\n  );\n  const currentUserStatus = snapshot.statuses.get(userId);\n  \n  console.log(`[MatchAlgorithm] User ${userId} has ${currentUserCourses.size} normalized courses: ${Array.from(currentUserCourses).join(', ')}`);\n  console.log(`[MatchAlgorithm] User ${userId} status:`, currentUserStatus);\n\n  // Check if current user is free (not in class)\n  const currentUserInClass = getCurrentClassFor(currentUserSchedules, now);\n  if (currentUserInClass) {\n    return []; // Current user is in class, no recommendations\n  }\n\n  const candidates: StudyPartner[] = [];\n\n  // Generate candidate set (filters)\n  for (const [otherUserId, otherUser] of Array.from(snapshot.users.entries())) {\n    if (otherUserId === userId) continue; // Skip self\n\n    const otherUserSchedules = snapshot.schedules.get(otherUserId) || [];\n    const otherUserCourses = new Set(\n      otherUserSchedules.map(s => normalizeCourseCode(s.courseCode))\n    );\n    const otherUserStatus = snapshot.statuses.get(otherUserId);\n    \n    // Check for at least 1 shared class\n    const sharedCourses = Array.from(currentUserCourses).filter(course => \n      otherUserCourses.has(course)\n    );\n    \n    console.log(`[MatchAlgorithm] Checking user ${otherUser.username}: ${otherUserCourses.size} courses, ${sharedCourses.length} shared`);\n    \n    if (sharedCourses.length === 0) continue;\n\n    // Check if other user is also free (not in class)\n    const otherUserInClass = getCurrentClassFor(otherUserSchedules, now);\n    if (otherUserInClass) continue; // Other user is in class\n\n    // Both users are free and have shared classes - proceed to scoring\n    let score = 0;\n    let reasons: string[] = [];\n\n    // 1. Shared courses score (+10 per shared course)\n    score += sharedCourses.length * WEIGHTS.shared_course;\n    reasons.push(`Shares ${sharedCourses.length} class${sharedCourses.length > 1 ? 'es' : ''}`);\n\n    // 2. Status compatibility\n    const otherManualStatus = otherUserStatus?.status || 'free';\n    if (otherManualStatus === 'help') {\n      score += WEIGHTS.help;\n      reasons.push('Willing to help');\n    } else if (otherManualStatus === 'busy' || otherManualStatus === 'tired') {\n      score += WEIGHTS.busy_tired; // This is negative\n    }\n\n    // 3. Same major bonus\n    if (currentUser.major === otherUser.major) {\n      score += WEIGHTS.same_major;\n      reasons.push('Same major');\n    }\n\n    // 4. Location proximity (if available)\n    // Note: This is simplified - in real implementation, you'd have location data\n    // For now, we skip this enhancement\n\n    // 5. Enhanced features (optional)\n    const currentUserNextClass = getNextClassFor(currentUserSchedules, now);\n    const otherUserNextClass = getNextClassFor(otherUserSchedules, now);\n    \n    if (currentUserNextClass && otherUserNextClass) {\n      if (currentUserNextClass.courseCode === otherUserNextClass.courseCode) {\n        score += WEIGHTS.same_next_class;\n        reasons.push(`Next class together: ${currentUserNextClass.courseCode}`);\n      }\n    }\n\n    // Only include candidates with positive scores\n    if (score > 0) {\n      // Generate reason string\n      let reason = reasons.slice(0, 2).join('; '); // Take first 2 reasons\n      reason += '; Both free now'; // Always append this as per spec\n\n      candidates.push({\n        id: otherUser.id,\n        username: otherUser.username,\n        fullName: otherUser.fullName,\n        major: otherUser.major,\n        grade: otherUser.grade,\n        bio: otherUser.bio,\n        avatar: otherUser.avatar,\n        score,\n        shared_classes: sharedCourses,\n        current_class: undefined, // Both are free\n        next_class: otherUserNextClass ? `${otherUserNextClass.courseCode} @ ${otherUserNextClass.startTime}` : undefined,\n        reason\n      });\n    }\n  }\n\n  // Sort by score (descending) then by username (ascending) for stable sort\n  candidates.sort((a, b) => {\n    if (b.score !== a.score) {\n      return b.score - a.score;\n    }\n    return a.username.localeCompare(b.username);\n  });\n\n  // Return top N candidates\n  return candidates.slice(0, topN);\n}","size_bytes":6905}},"version":1}